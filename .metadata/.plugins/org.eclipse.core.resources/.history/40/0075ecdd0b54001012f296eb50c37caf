#include "login.h"
#include "Model_mode.h"
#include "Controller.h"


safeState_t login_state = WAIT_INPUT;
watch_t stopWatch;
login_input_TypeDef login_controldata;
static uint32_t openStartTick = 0;
int password_input;
bool is_timeout(uint32_t *startTick, uint32_t interval_ms);


static void wait_input();
static void input_ING();
static void Login_Open();
static void Login_Fail();
static void SAFE_IncTime();


void safe_IncTimeCallBack()
{
	if (login_state == ING_INPUT ) {
		SAFE_IncTime();
	}
}

void SAFE_IncTime()
{
	if (stopWatch.msec < 1000-1) {
		stopWatch.msec++;
		return;
	}
	stopWatch.msec = 0;
}

void Login_Execute()
{

	switch (login_state) {
	case WAIT_INPUT:   wait_input();   break;
	case ING_INPUT:   input_ING();   break;
	case OPEN:     Login_Open();    break;
	case FAIL:     Login_Fail();    break;
	}
}

void wait_input(void)
{
	//	controlData.id_safe = WAIT_INPUT;
	if(login_controldata.data_pw_input)
	{
		login_state = ING_INPUT;
	}
}

void input_ING(void)
{
	if(login_controldata.data_pw_correct)	login_state = OPEN;
	else login_state = FAIL;

}

void Login_Open(void)
{
	if (is_timeout(&openStartTick, 60000U)) {
		login_state = WAIT_INPUT;
	}
}

void Login_Fail(void)
{
	HAL_Delay(3000);
	login_state = WAIT_INPUT;
}

////////////////////////////////////

bool is_timeout(uint32_t *startTick, uint32_t interval_ms)
{
	uint32_t now = HAL_GetTick();

	if (*startTick == 0) {
		*startTick = now;
		return false;
	}

	if ((now - *startTick) >= interval_ms) {
		*startTick = 0;
		return true;
	}

	return false;
}



#include "Listener.h"
#include "usart.h"
#include "Model_mode.h"
#include "Controller.h"
#include <string.h>




static Que_TypeDef    uartRxQue;
static uint8_t        rcvData;
int            bufPos = 0;
static const char     correctPassword[PASS_LEN + 1] = "1234";
static inputData_TypeDef inputData;
char           uartBuffer[PASS_LEN + 1];

void ComparePassword();


void Listener_Init()
{
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
	Que_Init(&uartRxQue);
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
}

void Listener_Excute()
{
	Listener_CheckUart();
}


void Listener_CheckUart()
{
	int byte;

	while (!isQueEmpty(&uartRxQue)) {
		byte = deQue(&uartRxQue);

		if (byte == 'm') {
			inputData.id   = MODE;
			inputData.data = MODE_ACT;
			Controller_SetInputData(inputData);
		}
		else if (byte == 'i') {
			login_controldata.data_pw_input = 1;
			bufPos = 0;              // 새 입력 시작
		}
		// 비밀번호 입력 모드일 때만 숫자 저장
		if (login_controldata.data_pw_input) {
			if (byte >= '0' && byte <= '9' && bufPos < PASS_LEN) {
				uartBuffer[bufPos++] = (char)byte;
			}
			if (bufPos == PASS_LEN) {
				ComparePassword();
				login_controldata.data_pw_input = 0;
				bufPos = 0;
			}
		}
	}
}


void ComparePassword() {
	uartBuffer[PASS_LEN] = '\0';
	if (strcmp(uartBuffer, correctPassword) == 0) {
		login_controldata.data_pw_correct = 1;
	} else {
		login_controldata.data_pw_correct = 0;
	}
	Controller_SetInputData(inputData);
}


void Listener_UartCallBack()
{
	enQue(&uartRxQue, rcvData);
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
}





