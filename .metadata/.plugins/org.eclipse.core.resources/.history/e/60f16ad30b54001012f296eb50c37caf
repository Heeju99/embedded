#include "login.h"
#include "Model_mode.h"
#include "Controller.h"


safeState_t login_state = WAIT_INPUT;
watch_t stopWatch;
login_input_TypeDef login_controldata;
static uint32_t openStartTick = 0;
int password_input;
bool is_timeout(uint32_t *startTick, uint32_t interval_ms);


static void wait_input();
static void input_ING();
static void Login_Open();
static void Login_Fail();
static void SAFE_IncTime();


void safe_IncTimeCallBack()
{
	if (login_state == ING_INPUT ) {
		SAFE_IncTime();
	}
}

void SAFE_IncTime()
{
	if (stopWatch.msec < 1000-1) {
		stopWatch.msec++;
		return;
	}
	stopWatch.msec = 0;
}

void Login_Execute()
{

	switch (login_state) {
	case WAIT_INPUT:   wait_input();   break;
	case ING_INPUT:   input_ING();   break;
	case OPEN:     Login_Open();    break;
	case FAIL:     Login_Fail();    break;
	}
}

void wait_input(void)
{
	//	controlData.id_safe = WAIT_INPUT;
	if(login_controldata.data_pw_input)
	{
		login_state = ING_INPUT;
	}
}

void input_ING(void)
{
	if(login_controldata.data_pw_correct)	login_state = OPEN;
	else login_state = FAIL;

}

void Login_Open(void)
{
	if (is_timeout(&openStartTick, 60000U)) {
		login_state = WAIT_INPUT;
	}
}

void Login_Fail(void)
{
	HAL_Delay(3000);
	login_state = WAIT_INPUT;
}

////////////////////////////////////

bool is_timeout(uint32_t *startTick, uint32_t interval_ms)
{
	uint32_t now = HAL_GetTick();

	if (*startTick == 0) {
		*startTick = now;
		return false;
	}

	if ((now - *startTick) >= interval_ms) {
		*startTick = 0;
		return true;
	}

	return false;
}




