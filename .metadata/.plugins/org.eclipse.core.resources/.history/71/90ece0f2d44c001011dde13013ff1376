#include "ap_main.h"

enum {LEFT, RIGHT, OFF};

Button_Handler_t hBtnLeft;
Button_Handler_t hBtnRight;
Button_Handler_t hBtnOnOff;
Button_Handler_t hBtnStart;

int ap_main()
{
	uint8_t data;
	int led_state;


	while(1)
	{
		if(Button_GetState(&hBtnStart) == ACT_PUSHED){
			uint8_t data = 0;
			led_state = 2;
		}

		switch(led_state)
		{
			case LEFT :
				data = (data << 1) | (data >> 7);
				if(Button_GetState(&hBtnOnOff) == ACT_PUSHED){
					led_state = 2;
				} else if(Button_GetState(&hBtnRight) == ACT_PUSHED){
					led_state = 1;
				}
				break;

			case RIGHT :
				data = (data >> 1) | (data << 7);
				if(Button_GetState(&hBtnLeft) == ACT_PUSHED){
					led_state = 0;
				} else if(Button_GetState(&hBtnOnOff) == ACT_PUSHED){
					led_state = 2;
				}
				break;

			case OFF :
				data = 0;
				if(Button_GetState(&hBtnLeft) == ACT_PUSHED){
					data = 1;
					led_state = 0;
				} else if(Button_GetState(&hBtnRight) == ACT_PUSHED){
					data = 1;
					led_state = 1;
				}
				break;
			}
			LEDBar_Write(data);
			delay(100);
	}
	return 0;
}

void ap_Init()
{
	SystemClock_Init();
	LedBar_Init();
	Button_Init(&hBtnStart, GPIOC, 13);
	Button_Init(&hBtnLeft, GPIOB, 5);
	Button_Init(&hBtnRight, GPIOB, 3);
	Button_Init(&hBtnOnOff, GPIOA, 10);
}

