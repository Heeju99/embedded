# include "FND_prof.h"

enum {DIGIT_1, DIGIT_10, DIGIT_100, DIGIT_1000};

typedef struct {
	GPIO_TypeDef *GPIOx;
	uint32_t pinNum;
} FND_TypeDef;

FND_TypeDef fndDigitCom[4] = {
		{GPIOC, 8},
		{GPIOC, 6},
		{GPIOC, 5},
		{GPIOA, 12}
};

FND_TypeDef fndPin[8] = {
		{GPIOA, 11}, //a
		{GPIOB, 12}, //b
		{GPIOB, 2},  //c
		{GPIOB, 1},  //d
		{GPIOB, 15},  //e
		{GPIOB, 14},  //f
		{GPIOB, 13},  //g
		{GPIOC, 4}  //dp
};

static void FND_DisplayDigit(uint16_t digit);
static void FND_DisplayOff(int fndPos);
static void FND_DisplayOn(int fndPos);

static uint16_t fndDisplayNum = 0; //static 붙히면 외부에서 접근 불가

void FND_Init()
{
	for(int i = 0; i< 4; i++){
		GPIO_Init(fndDigitCom[i].GPIOx,fndDigitCom[i].pinNum, OUTPUT);
	}
	for(int i = 0; i < 8; i++){
		GPIO_Init(fndPim[i].GPIOx,fndPin[i].pinNum, OUTPUT);
	}
}

//write fndDisplayNum
void FND_WriteData(uint16_t data)
{
	fndDisplayNum = data;
}

//read fndDisplayNum
uint16_t FND_ReadData()
{
	return fndDisplayNum;
}

//display fndDisplayNUm
void FND_DisplayData()
{

	static int digitPos = 0;

	digitPos = (digitPos + 1) % 4;
	//인터럽트가 발생하면 한 자리씩 출력한다.
	switch(digitPos){
		case DIGIT_1 :
			void FND_DisplayOffAll(); //잔상 제거용
			FND_DisplayDigit((fndDisplayNum % 10));
			FND_DisplayOn(digitPos);
			break;
		case DIGIT_10 :
			void FND_DisplayOffAll();
			FND_DisplayDigit((fndDisplayNum / 10) %10 );
			FND_DisplayOn(digitPos);
			break;
		case DIGIT_100 :
			void FND_DisplayOffAll();
			FND_DisplayDigit((fndDisplayNum/ 100) % 10);
			FND_DisplayOn(digitPos);
			break;
		case DIGIT_1000 :
			void FND_DisplayOffAll();
			FND_DisplayDigit((fndDisplayNum/1000) % 10);
			FND_DisplayOn(digitPos);
			break;
	}

}

void FND_DisplayDigit(uint16_t digit)
{
	const uint8_t segFont[10] = {
			0x3F,
			0x06,
			0x5B,
			0x4F,
			0x66,
			0x6D,
			0x7D,
			0x07,
			0x7F,
			0x6F
	};


	for(int i = 0; i <8; i++){
		if(!(segFont[digit] & (1 << i))){ // 0일 경우
			GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, PIN_RESET);
		} else {
			GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, PIN_SET);

		}
	}
}

void FND_DisplayOn(int fndPos)
{
	GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, PIN_SET);
}

void FND_DisplayOff(int fndPos)
{
	GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, PIN_RESET);
}

void FND_DisplayOffAll()
{
	for(int i = 0; i < 4; i++){
		GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, PIN_RESET);
	}
}

