#include "StopWatch.h"


stopWatch_t stopWatchData;
eStopWatchEvent_t stateEvent;

void StopWatch_Init()
{
	stopWatchData.hour = 0;
	stopWatchData.min  = 0;
	stopWatchData.sec  = 0;
	stopWatchData.msec = 0;
}


void StopWatch_Excute()
{
	estopWatchState_t state = Model_Get_StopWatchState();

	switch(state)
	{
		case S_STOPWATCH_STOP :
			StopWatch_Stop();
			break;

		case S_STOPWATCH_RUN :
			StopWatch_Run();
			break;

		case S_STOPWATCH_CLEAR :
			StopWatch_Clear();
			break;

		default :
			break;
	}
}

void StopWatch_Stop()
{
	if(stateEvent == EVENT_RUN_STOP){
		Model_Set_StopWatchState(S_STOPWATCH_RUN);
	}
	else if(stateEvent == EVENT_CLEAR){
		Model_Set_StopWatchState(S_STOPWATCH_CLEAR);
	}

	stopWatchData.msec = stopWatchData.msec;
	stopWatchData.sec = stopWatchData.sec;
	stopWatchData.min = stopWatchData.min;
	stopWatchData.hour = stopWatchData.hour;

}

void StopWatch_Run()
{
	if(stateEvent == EVENT_RUN_STOP){
		Model_Set_StopWatchState(S_STOPWATCH_STOP);
	}

	StopWatch_IncTime();
}


void StopWatch_Clear()
{
	stopWatchData.hour = 0;
	stopWatchData.min  = 0;
	stopWatchData.sec  = 0;
	stopWatchData.msec = 0;
}

void StopWatch_IncTime()
{
	if(stopWatchData.msec != 1000-1){
		stopWatchData.msec++;
		return;
	}
	stopWatchData.msec = 0;

	if(stopWatchData.sec != 60-1){
		stopWatchData.sec++;
		return;
	}
	stopWatchData.sec = 0;

	if(stopWatchData.min != 60-1){
		stopWatchData.min++;
		return;
	}
	stopWatchData.min = 0;


	if(stopWatchData.hour != 24-1){
		stopWatchData.hour++;
		return;
	}
	stopWatchData.hour = 0;
}
