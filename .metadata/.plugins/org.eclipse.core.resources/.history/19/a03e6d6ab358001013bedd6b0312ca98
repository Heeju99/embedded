#include "Presenter_Distance.h"

void Presenter_Distance_Init()
{

}

void Presenter_Distance_Excute()
{
	static distance_t *distanceData;

	osEvent evt = osMailGet(DistanceDataMailBox, 0);
	if(evt.status == osEventMail){
		distanceData = evt.value.p;
		osMailFree(DistanceDataMailBox, distanceData); //Free mem
		Presenter_TimeWatch_LCD(timeWatchData);
	}
}

void Presenter_StopWatch_LCD(stopWatch_t stopWatchData)
{
	char str[30];
	static estopWatchState_t prevStopWatchState = 10;
	estopWatchState_t stopWatchState = Model_Get_StopWatchState();
	if(stopWatchState != prevStopWatchState) {
		prevStopWatchState = stopWatchState;
		if(stopWatchState == S_STOPWATCH_STOP) {
			sprintf(str, "STOP ");
		}
		else if(stopWatchState == S_STOPWATCH_RUN) {
			sprintf(str, "RUN  ");
		}
		else if(stopWatchState == S_STOPWATCH_CLEAR) {
			sprintf(str, "CLEAR");
		}
		LCD_writeStringXY(0, 11, str);
	}
		if (stopWatchData.msec < 500) {
			sprintf(str, "%02d:%02d:%02d.%02d           ", stopWatchData.hour, stopWatchData.min, stopWatchData.sec, stopWatchData.msec);
		}
		else {
			sprintf(str, "%02d %02d %02d %02d           ", stopWatchData.hour, stopWatchData.min, stopWatchData.sec, stopWatchData.msec);
		}

		LCD_writeStringXY(1, 0, str);
}
