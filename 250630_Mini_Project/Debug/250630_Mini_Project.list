
250630_Mini_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800534c  0800534c  0000634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005370  08005370  0000707c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005378  08005378  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005378  08005378  00006378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800537c  0800537c  0000637c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005380  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000007c  080053fc  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080053fc  00007274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d89  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d3  00000000  00000000  0001be35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0001f808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e81  00000000  00000000  00020ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184e7  00000000  00000000  00021959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a974  00000000  00000000  00039e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912d0  00000000  00000000  000547b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b08  00000000  00000000  000e5ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000ea5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005334 	.word	0x08005334

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08005334 	.word	0x08005334

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a48      	ldr	r2, [pc, #288]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b46      	ldr	r3, [pc, #280]	@ (8000644 <MX_GPIO_Init+0x140>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <MX_GPIO_Init+0x140>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a41      	ldr	r2, [pc, #260]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b3f      	ldr	r3, [pc, #252]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b3b      	ldr	r3, [pc, #236]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a3a      	ldr	r2, [pc, #232]	@ (8000644 <MX_GPIO_Init+0x140>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b34      	ldr	r3, [pc, #208]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a33      	ldr	r2, [pc, #204]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <MX_GPIO_Init+0x140>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000590:	482d      	ldr	r0, [pc, #180]	@ (8000648 <MX_GPIO_Init+0x144>)
 8000592:	f001 fd63 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000596:	2200      	movs	r2, #0
 8000598:	f24f 0106 	movw	r1, #61446	@ 0xf006
 800059c:	482b      	ldr	r0, [pc, #172]	@ (800064c <MX_GPIO_Init+0x148>)
 800059e:	f001 fd5d 	bl	800205c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80005a8:	4829      	ldr	r0, [pc, #164]	@ (8000650 <MX_GPIO_Init+0x14c>)
 80005aa:	f001 fd57 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80005ae:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4820      	ldr	r0, [pc, #128]	@ (8000648 <MX_GPIO_Init+0x144>)
 80005c8:	f001 fbc4 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80005cc:	f24f 0306 	movw	r3, #61446	@ 0xf006
 80005d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	4819      	ldr	r0, [pc, #100]	@ (800064c <MX_GPIO_Init+0x148>)
 80005e6:	f001 fbb5 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4814      	ldr	r0, [pc, #80]	@ (8000650 <MX_GPIO_Init+0x14c>)
 8000600:	f001 fba8 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000604:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <MX_GPIO_Init+0x14c>)
 800061e:	f001 fb99 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000622:	2328      	movs	r3, #40	@ 0x28
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_GPIO_Init+0x148>)
 8000636:	f001 fb8d 	bl	8001d54 <HAL_GPIO_Init>

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	@ 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020800 	.word	0x40020800
 800064c:	40020400 	.word	0x40020400
 8000650:	40020000 	.word	0x40020000

08000654 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	@ (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f001 fcfd 	bl	8002090 <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 f8d0 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000098 	.word	0x20000098
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a19      	ldr	r2, [pc, #100]	@ (8000734 <HAL_I2C_MspInit+0x84>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d12c      	bne.n	800072c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f4:	2312      	movs	r3, #18
 80006f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000700:	2304      	movs	r3, #4
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	480c      	ldr	r0, [pc, #48]	@ (800073c <HAL_I2C_MspInit+0x8c>)
 800070c:	f001 fb22 	bl	8001d54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 800071a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_I2C_MspInit+0x88>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40005400 	.word	0x40005400
 8000738:	40023800 	.word	0x40023800
 800073c:	40020400 	.word	0x40020400

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f001 f8cc 	bl	80018e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f812 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f7ff feda 	bl	8000504 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000750:	f000 f99a 	bl	8000a88 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000754:	f000 fb10 	bl	8000d78 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000758:	f7ff ff7c 	bl	8000654 <MX_I2C1_Init>
  MX_TIM3_Init();
 800075c:	f000 f9e0 	bl	8000b20 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000760:	f000 f8f2 	bl	8000948 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000764:	f000 fc70 	bl	8001048 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000768:	f000 fc64 	bl	8001034 <ap_main>
 800076c:	e7fc      	b.n	8000768 <main+0x28>
	...

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	@ 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fdac 	bl	80052dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <SystemClock_Config+0xc8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	4a26      	ldr	r2, [pc, #152]	@ (8000838 <SystemClock_Config+0xc8>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a4:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <SystemClock_Config+0xc8>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <SystemClock_Config+0xcc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a20      	ldr	r2, [pc, #128]	@ (800083c <SystemClock_Config+0xcc>)
 80007ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <SystemClock_Config+0xcc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007e4:	2364      	movs	r3, #100	@ 0x64
 80007e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 f8e9 	bl	80029cc <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000800:	f000 f81e 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2103      	movs	r1, #3
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fb4b 	bl	8002ebc <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800082c:	f000 f808 	bl	8000840 <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	@ 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	@ (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000860:	6453      	str	r3, [r2, #68]	@ 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	@ (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	@ 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f2:	f001 f847 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000900:	4802      	ldr	r0, [pc, #8]	@ (800090c <TIM2_IRQHandler+0x10>)
 8000902:	f002 ff1b 	bl	800373c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000134 	.word	0x20000134

08000910 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000914:	4802      	ldr	r0, [pc, #8]	@ (8000920 <USART2_IRQHandler+0x10>)
 8000916:	f003 fdcf 	bl	80044b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200001c4 	.word	0x200001c4

08000924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <SystemInit+0x20>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092e:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <SystemInit+0x20>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b096      	sub	sp, #88	@ 0x58
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2220      	movs	r2, #32
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f004 fcab 	bl	80052dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000986:	4b3e      	ldr	r3, [pc, #248]	@ (8000a80 <MX_TIM1_Init+0x138>)
 8000988:	4a3e      	ldr	r2, [pc, #248]	@ (8000a84 <MX_TIM1_Init+0x13c>)
 800098a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800098c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a80 <MX_TIM1_Init+0x138>)
 800098e:	2263      	movs	r2, #99	@ 0x63
 8000990:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b3b      	ldr	r3, [pc, #236]	@ (8000a80 <MX_TIM1_Init+0x138>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000998:	4b39      	ldr	r3, [pc, #228]	@ (8000a80 <MX_TIM1_Init+0x138>)
 800099a:	2263      	movs	r2, #99	@ 0x63
 800099c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b38      	ldr	r3, [pc, #224]	@ (8000a80 <MX_TIM1_Init+0x138>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a4:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <MX_TIM1_Init+0x138>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009aa:	4b35      	ldr	r3, [pc, #212]	@ (8000a80 <MX_TIM1_Init+0x138>)
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b0:	4833      	ldr	r0, [pc, #204]	@ (8000a80 <MX_TIM1_Init+0x138>)
 80009b2:	f002 fca3 	bl	80032fc <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80009bc:	f7ff ff40 	bl	8000840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009ca:	4619      	mov	r1, r3
 80009cc:	482c      	ldr	r0, [pc, #176]	@ (8000a80 <MX_TIM1_Init+0x138>)
 80009ce:	f003 f867 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009d8:	f7ff ff32 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009dc:	4828      	ldr	r0, [pc, #160]	@ (8000a80 <MX_TIM1_Init+0x138>)
 80009de:	f002 fd3f 	bl	8003460 <HAL_TIM_PWM_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80009e8:	f7ff ff2a 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009f8:	4619      	mov	r1, r3
 80009fa:	4821      	ldr	r0, [pc, #132]	@ (8000a80 <MX_TIM1_Init+0x138>)
 80009fc:	f003 fc12 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a06:	f7ff ff1b 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0a:	2360      	movs	r3, #96	@ 0x60
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a16:	2300      	movs	r3, #0
 8000a18:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4814      	ldr	r0, [pc, #80]	@ (8000a80 <MX_TIM1_Init+0x138>)
 8000a30:	f002 ff74 	bl	800391c <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a3a:	f7ff ff01 	bl	8000840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <MX_TIM1_Init+0x138>)
 8000a62:	f003 fc4d 	bl	8004300 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a6c:	f7ff fee8 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a70:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <MX_TIM1_Init+0x138>)
 8000a72:	f000 f91f 	bl	8000cb4 <HAL_TIM_MspPostInit>

}
 8000a76:	bf00      	nop
 8000a78:	3758      	adds	r7, #88	@ 0x58
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000ec 	.word	0x200000ec
 8000a84:	40010000 	.word	0x40010000

08000a88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <MX_TIM2_Init+0x94>)
 8000aa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <MX_TIM2_Init+0x94>)
 8000aae:	220f      	movs	r2, #15
 8000ab0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <MX_TIM2_Init+0x94>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <MX_TIM2_Init+0x94>)
 8000aba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000abe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <MX_TIM2_Init+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <MX_TIM2_Init+0x94>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000acc:	4813      	ldr	r0, [pc, #76]	@ (8000b1c <MX_TIM2_Init+0x94>)
 8000ace:	f002 fc15 	bl	80032fc <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ad8:	f7ff feb2 	bl	8000840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <MX_TIM2_Init+0x94>)
 8000aea:	f002 ffd9 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000af4:	f7ff fea4 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_TIM2_Init+0x94>)
 8000b06:	f003 fb8d 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f7ff fe96 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000134 	.word	0x20000134

08000b20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	@ 0x38
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]
 8000b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b50:	4b2d      	ldr	r3, [pc, #180]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000b52:	4a2e      	ldr	r2, [pc, #184]	@ (8000c0c <MX_TIM3_Init+0xec>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000b56:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000b58:	2263      	movs	r2, #99	@ 0x63
 8000b5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000b64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b70:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000b72:	2280      	movs	r2, #128	@ 0x80
 8000b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b76:	4824      	ldr	r0, [pc, #144]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000b78:	f002 fbc0 	bl	80032fc <HAL_TIM_Base_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b82:	f7ff fe5d 	bl	8000840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b90:	4619      	mov	r1, r3
 8000b92:	481d      	ldr	r0, [pc, #116]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000b94:	f002 ff84 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b9e:	f7ff fe4f 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ba2:	4819      	ldr	r0, [pc, #100]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000ba4:	f002 fc5c 	bl	8003460 <HAL_TIM_PWM_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bae:	f7ff fe47 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000bc2:	f003 fb2f 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bcc:	f7ff fe38 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd0:	2360      	movs	r3, #96	@ 0x60
 8000bd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000bd4:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000bd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000bea:	f002 fe97 	bl	800391c <HAL_TIM_PWM_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000bf4:	f7ff fe24 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bf8:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <MX_TIM3_Init+0xe8>)
 8000bfa:	f000 f85b 	bl	8000cb4 <HAL_TIM_MspPostInit>

}
 8000bfe:	bf00      	nop
 8000c00:	3738      	adds	r7, #56	@ 0x38
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000017c 	.word	0x2000017c
 8000c0c:	40000400 	.word	0x40000400

08000c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x98>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10e      	bne.n	8000c40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <HAL_TIM_Base_MspInit+0x9c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	4a20      	ldr	r2, [pc, #128]	@ (8000cac <HAL_TIM_Base_MspInit+0x9c>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c32:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <HAL_TIM_Base_MspInit+0x9c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c3e:	e02e      	b.n	8000c9e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c48:	d116      	bne.n	8000c78 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_TIM_Base_MspInit+0x9c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	4a16      	ldr	r2, [pc, #88]	@ (8000cac <HAL_TIM_Base_MspInit+0x9c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_TIM_Base_MspInit+0x9c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	201c      	movs	r0, #28
 8000c6c:	f000 ffa9 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c70:	201c      	movs	r0, #28
 8000c72:	f000 ffc2 	bl	8001bfa <HAL_NVIC_EnableIRQ>
}
 8000c76:	e012      	b.n	8000c9e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d10d      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <HAL_TIM_Base_MspInit+0x9c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <HAL_TIM_Base_MspInit+0x9c>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_TIM_Base_MspInit+0x9c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40000400 	.word	0x40000400

08000cb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a24      	ldr	r2, [pc, #144]	@ (8000d64 <HAL_TIM_MspPostInit+0xb0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d11f      	bne.n	8000d16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a22      	ldr	r2, [pc, #136]	@ (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4817      	ldr	r0, [pc, #92]	@ (8000d6c <HAL_TIM_MspPostInit+0xb8>)
 8000d10:	f001 f820 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d14:	e022      	b.n	8000d5c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a15      	ldr	r2, [pc, #84]	@ (8000d70 <HAL_TIM_MspPostInit+0xbc>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d11d      	bne.n	8000d5c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d28:	4a0f      	ldr	r2, [pc, #60]	@ (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d3c:	2310      	movs	r3, #16
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <HAL_TIM_MspPostInit+0xc0>)
 8000d58:	f000 fffc 	bl	8001d54 <HAL_GPIO_Init>
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	@ 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40010000 	.word	0x40010000
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40000400 	.word	0x40000400
 8000d74:	40020400 	.word	0x40020400

08000d78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000db0:	f003 fb0c 	bl	80043cc <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f7ff fd41 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001c4 	.word	0x200001c4
 8000dc8:	40004400 	.word	0x40004400

08000dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e60 <HAL_UART_MspInit+0x94>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d133      	bne.n	8000e56 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <HAL_UART_MspInit+0x98>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <HAL_UART_MspInit+0x98>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfe:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <HAL_UART_MspInit+0x98>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <HAL_UART_MspInit+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a14      	ldr	r2, [pc, #80]	@ (8000e64 <HAL_UART_MspInit+0x98>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <HAL_UART_MspInit+0x98>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e26:	230c      	movs	r3, #12
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e36:	2307      	movs	r3, #7
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <HAL_UART_MspInit+0x9c>)
 8000e42:	f000 ff87 	bl	8001d54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2026      	movs	r0, #38	@ 0x26
 8000e4c:	f000 feb9 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e50:	2026      	movs	r0, #38	@ 0x26
 8000e52:	f000 fed2 	bl	8001bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	@ 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40004400 	.word	0x40004400
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000

08000e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e70:	f7ff fd58 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e76:	490d      	ldr	r1, [pc, #52]	@ (8000eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f004 fa27 	bl	80052ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9e:	f7ff fc4f 	bl	8000740 <main>
  bx  lr    
 8000ea2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000eb0:	08005380 	.word	0x08005380
  ldr r2, =_sbss
 8000eb4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000eb8:	20000274 	.word	0x20000274

08000ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC_IRQHandler>
	...

08000ec0 <Listener_Init>:

static uint8_t rcvData = 0;
static Que_TypeDef uartRxQue;

void Listener_Init()
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <Listener_Init+0x38>)
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <Listener_Init+0x3c>)
 8000eca:	f000 f9ab 	bl	8001224 <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 8000ece:	2208      	movs	r2, #8
 8000ed0:	4909      	ldr	r1, [pc, #36]	@ (8000ef8 <Listener_Init+0x38>)
 8000ed2:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <Listener_Init+0x40>)
 8000ed4:	f000 f9a6 	bl	8001224 <Button_Init>
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 8000ed8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000edc:	4909      	ldr	r1, [pc, #36]	@ (8000f04 <Listener_Init+0x44>)
 8000ede:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <Listener_Init+0x48>)
 8000ee0:	f000 f9a0 	bl	8001224 <Button_Init>

	Que_Init(&uartRxQue);
 8000ee4:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <Listener_Init+0x4c>)
 8000ee6:	f000 f8bf 	bl	8001068 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 8000eea:	2201      	movs	r2, #1
 8000eec:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <Listener_Init+0x50>)
 8000eee:	4809      	ldr	r0, [pc, #36]	@ (8000f14 <Listener_Init+0x54>)
 8000ef0:	f003 fabc 	bl	800446c <HAL_UART_Receive_IT>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	2000022c 	.word	0x2000022c
 8000f00:	20000238 	.word	0x20000238
 8000f04:	40020000 	.word	0x40020000
 8000f08:	20000244 	.word	0x20000244
 8000f0c:	20000210 	.word	0x20000210
 8000f10:	2000020c 	.word	0x2000020c
 8000f14:	200001c4 	.word	0x200001c4

08000f18 <Listener_UartCallBack>:
		Controller_SetInputData(inputData);
	}
}

void Listener_UartCallBack()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <Listener_UartCallBack+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <Listener_UartCallBack+0x24>)
 8000f24:	f000 f8cb 	bl	80010be <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4903      	ldr	r1, [pc, #12]	@ (8000f38 <Listener_UartCallBack+0x20>)
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <Listener_UartCallBack+0x28>)
 8000f2e:	f003 fa9d 	bl	800446c <HAL_UART_Receive_IT>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000020c 	.word	0x2000020c
 8000f3c:	20000210 	.word	0x20000210
 8000f40:	200001c4 	.word	0x200001c4

08000f44 <MotorRun_Init>:
#include "MotorRun.h"

void MotorRun_Init()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	Motor_Init(&htim1, TIM_CHANNEL_1);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <MotorRun_Init+0x10>)
 8000f4c:	f000 fc5c 	bl	8001808 <Motor_Init>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000ec 	.word	0x200000ec

08000f58 <MotorRUN_PowerOn>:

void MotorRUN_PowerOn()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	Motor_SetFreq(100); //do
 8000f5c:	2064      	movs	r0, #100	@ 0x64
 8000f5e:	f000 fc69 	bl	8001834 <Motor_SetFreq>
	Motor_Start();
 8000f62:	f000 fc9d 	bl	80018a0 <Motor_Start>
	HAL_Delay(10000);
 8000f66:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000f6a:	f000 fd2b 	bl	80019c4 <HAL_Delay>
	Motor_Stop();
 8000f6e:	f000 fca7 	bl	80018c0 <Motor_Stop>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <Presenter_Init>:


static watch_t dispData = {TIME_WATCH, 12, 0, 0, 0};

void Presenter_Init()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <Presenter_Init+0x10>)
 8000f7e:	f000 fb65 	bl	800164c <LCD_Init>
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000098 	.word	0x20000098

08000f8c <Sound_Init>:
#include "Sound.h"

void Sound_Init()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	Buzzer_Init(&htim3, TIM_CHANNEL_1);
 8000f90:	2100      	movs	r1, #0
 8000f92:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <Sound_Init+0x10>)
 8000f94:	f000 f95c 	bl	8001250 <Buzzer_Init>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000017c 	.word	0x2000017c

08000fa0 <Sound_PowerOn>:

void Sound_PowerOn()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	Buzzer_SetFreq(1047); //do
 8000fa4:	f240 4017 	movw	r0, #1047	@ 0x417
 8000fa8:	f000 f968 	bl	800127c <Buzzer_SetFreq>
	Buzzer_Start();
 8000fac:	f000 f99c 	bl	80012e8 <Buzzer_Start>
	HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	@ 0x64
 8000fb2:	f000 fd07 	bl	80019c4 <HAL_Delay>
	Buzzer_SetFreq(1319); //mi
 8000fb6:	f240 5027 	movw	r0, #1319	@ 0x527
 8000fba:	f000 f95f 	bl	800127c <Buzzer_SetFreq>
	HAL_Delay(100);
 8000fbe:	2064      	movs	r0, #100	@ 0x64
 8000fc0:	f000 fd00 	bl	80019c4 <HAL_Delay>
	Buzzer_SetFreq(1568); //sol
 8000fc4:	f44f 60c4 	mov.w	r0, #1568	@ 0x620
 8000fc8:	f000 f958 	bl	800127c <Buzzer_SetFreq>
	HAL_Delay(100);
 8000fcc:	2064      	movs	r0, #100	@ 0x64
 8000fce:	f000 fcf9 	bl	80019c4 <HAL_Delay>
	Buzzer_SetFreq(2039); //do
 8000fd2:	f240 70f7 	movw	r0, #2039	@ 0x7f7
 8000fd6:	f000 f951 	bl	800127c <Buzzer_SetFreq>
	HAL_Delay(100);
 8000fda:	2064      	movs	r0, #100	@ 0x64
 8000fdc:	f000 fcf2 	bl	80019c4 <HAL_Delay>
	Buzzer_Stop();
 8000fe0:	f000 f992 	bl	8001308 <Buzzer_Stop>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_TIM_PeriodElapsedCallback>:
#include "ap_main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff8:	d105      	bne.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x1e>
		FND_DispDataCallBack();
 8000ffa:	f000 f995 	bl	8001328 <FND_DispDataCallBack>

		TimeWatch_IncTimeCallBack();
 8000ffe:	f000 f8cf 	bl	80011a0 <TimeWatch_IncTimeCallBack>
		StopWatch_IncTimeCallBack();
 8001002:	f000 f87f 	bl	8001104 <StopWatch_IncTimeCallBack>
	}
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_UART_RxCpltCallback+0x20>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 8001022:	f7ff ff79 	bl	8000f18 <Listener_UartCallBack>
	}
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40004400 	.word	0x40004400

08001034 <ap_main>:


int ap_main()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <ap_main+0x10>)
 800103a:	f002 f9af 	bl	800339c <HAL_TIM_Base_Start_IT>
	while(1)
 800103e:	bf00      	nop
 8001040:	e7fd      	b.n	800103e <ap_main+0xa>
 8001042:	bf00      	nop
 8001044:	20000134 	.word	0x20000134

08001048 <ap_init>:

	return 0;
}

void ap_init()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	Listener_Init();
 800104c:	f7ff ff38 	bl	8000ec0 <Listener_Init>
	Presenter_Init();
 8001050:	f7ff ff92 	bl	8000f78 <Presenter_Init>
	Sound_Init();
 8001054:	f7ff ff9a 	bl	8000f8c <Sound_Init>
	Sound_PowerOn();
 8001058:	f7ff ffa2 	bl	8000fa0 <Sound_PowerOn>
	MotorRun_Init();
 800105c:	f7ff ff72 	bl	8000f44 <MotorRun_Init>
	MotorRUN_PowerOn();
 8001060:	f7ff ff7a 	bl	8000f58 <MotorRUN_PowerOn>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	q->front = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	3301      	adds	r3, #1
 800109a:	4259      	negs	r1, r3
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	f001 0103 	and.w	r1, r1, #3
 80010a4:	bf58      	it	pl
 80010a6:	424b      	negpl	r3, r1
 80010a8:	429a      	cmp	r2, r3
 80010aa:	bf0c      	ite	eq
 80010ac:	2301      	moveq	r3, #1
 80010ae:	2300      	movne	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <enQue>:
{
	return q->front == q->rear;
}

void enQue(Que_TypeDef *q, int data)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffdd 	bl	8001088 <isQueFull>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d113      	bne.n	80010fc <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3202      	adds	r2, #2
 80010dc:	6839      	ldr	r1, [r7, #0]
 80010de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	3301      	adds	r3, #1
 80010e8:	425a      	negs	r2, r3
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	bf58      	it	pl
 80010f4:	4253      	negpl	r3, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6053      	str	r3, [r2, #4]
 80010fa:	e000      	b.n	80010fe <enQue+0x40>
		return;
 80010fc:	bf00      	nop
}
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <StopWatch_IncTimeCallBack>:
extern inputData_TypeDef controlData;
static stopWatchState_t stopWatchState = STOP;
static watch_t stopWatch = {STOP_WATCH, 12, 0, 0, 0};

void StopWatch_IncTimeCallBack()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	if (stopWatchState == RUN) {
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <StopWatch_IncTimeCallBack+0x14>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <StopWatch_IncTimeCallBack+0x10>
		StopWatch_IncTime();
 8001110:	f000 f804 	bl	800111c <StopWatch_IncTime>
	}
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000228 	.word	0x20000228

0800111c <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	if (stopWatch.msec < 1000-1) {
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <StopWatch_IncTime+0x80>)
 8001122:	889b      	ldrh	r3, [r3, #4]
 8001124:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001128:	4293      	cmp	r3, r2
 800112a:	d806      	bhi.n	800113a <StopWatch_IncTime+0x1e>
		stopWatch.msec++;
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <StopWatch_IncTime+0x80>)
 800112e:	889b      	ldrh	r3, [r3, #4]
 8001130:	3301      	adds	r3, #1
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b19      	ldr	r3, [pc, #100]	@ (800119c <StopWatch_IncTime+0x80>)
 8001136:	809a      	strh	r2, [r3, #4]
		return;
 8001138:	e02c      	b.n	8001194 <StopWatch_IncTime+0x78>
	}
	stopWatch.msec = 0;
 800113a:	4b18      	ldr	r3, [pc, #96]	@ (800119c <StopWatch_IncTime+0x80>)
 800113c:	2200      	movs	r2, #0
 800113e:	809a      	strh	r2, [r3, #4]

	if (stopWatch.sec < 60-1) {
 8001140:	4b16      	ldr	r3, [pc, #88]	@ (800119c <StopWatch_IncTime+0x80>)
 8001142:	78db      	ldrb	r3, [r3, #3]
 8001144:	2b3a      	cmp	r3, #58	@ 0x3a
 8001146:	d806      	bhi.n	8001156 <StopWatch_IncTime+0x3a>
		stopWatch.sec++;
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <StopWatch_IncTime+0x80>)
 800114a:	78db      	ldrb	r3, [r3, #3]
 800114c:	3301      	adds	r3, #1
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <StopWatch_IncTime+0x80>)
 8001152:	70da      	strb	r2, [r3, #3]
		return;
 8001154:	e01e      	b.n	8001194 <StopWatch_IncTime+0x78>
	}
	stopWatch.sec = 0;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <StopWatch_IncTime+0x80>)
 8001158:	2200      	movs	r2, #0
 800115a:	70da      	strb	r2, [r3, #3]

	if (stopWatch.min < 60-1) {
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <StopWatch_IncTime+0x80>)
 800115e:	789b      	ldrb	r3, [r3, #2]
 8001160:	2b3a      	cmp	r3, #58	@ 0x3a
 8001162:	d806      	bhi.n	8001172 <StopWatch_IncTime+0x56>
		stopWatch.min++;
 8001164:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <StopWatch_IncTime+0x80>)
 8001166:	789b      	ldrb	r3, [r3, #2]
 8001168:	3301      	adds	r3, #1
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <StopWatch_IncTime+0x80>)
 800116e:	709a      	strb	r2, [r3, #2]
		return;
 8001170:	e010      	b.n	8001194 <StopWatch_IncTime+0x78>
	}
	stopWatch.min = 0;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <StopWatch_IncTime+0x80>)
 8001174:	2200      	movs	r2, #0
 8001176:	709a      	strb	r2, [r3, #2]

	if (stopWatch.hour < 24-1) {
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <StopWatch_IncTime+0x80>)
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	2b16      	cmp	r3, #22
 800117e:	d806      	bhi.n	800118e <StopWatch_IncTime+0x72>
		stopWatch.hour++;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <StopWatch_IncTime+0x80>)
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	3301      	adds	r3, #1
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <StopWatch_IncTime+0x80>)
 800118a:	705a      	strb	r2, [r3, #1]
		return;
 800118c:	e002      	b.n	8001194 <StopWatch_IncTime+0x78>
	}
	stopWatch.hour = 0;
 800118e:	4b03      	ldr	r3, [pc, #12]	@ (800119c <StopWatch_IncTime+0x80>)
 8001190:	2200      	movs	r2, #0
 8001192:	705a      	strb	r2, [r3, #1]
}
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	20000004 	.word	0x20000004

080011a0 <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	if (timeWatch.msec < 1000-1) {
 80011a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d806      	bhi.n	80011be <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011b2:	889b      	ldrh	r3, [r3, #4]
 80011b4:	3301      	adds	r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011ba:	809a      	strh	r2, [r3, #4]
		return;
 80011bc:	e02c      	b.n	8001218 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.msec = 0;
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	809a      	strh	r2, [r3, #4]

	if (timeWatch.sec < 60-1) {
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011c6:	78db      	ldrb	r3, [r3, #3]
 80011c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80011ca:	d806      	bhi.n	80011da <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011ce:	78db      	ldrb	r3, [r3, #3]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011d6:	70da      	strb	r2, [r3, #3]
		return;
 80011d8:	e01e      	b.n	8001218 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.sec = 0;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011dc:	2200      	movs	r2, #0
 80011de:	70da      	strb	r2, [r3, #3]

	if (timeWatch.min < 60-1) {
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011e2:	789b      	ldrb	r3, [r3, #2]
 80011e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80011e6:	d806      	bhi.n	80011f6 <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011ea:	789b      	ldrb	r3, [r3, #2]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011f2:	709a      	strb	r2, [r3, #2]
		return;
 80011f4:	e010      	b.n	8001218 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	709a      	strb	r2, [r3, #2]

	if (timeWatch.hour < 24-1) {
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	2b16      	cmp	r3, #22
 8001202:	d806      	bhi.n	8001212 <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	3301      	adds	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 800120e:	705a      	strb	r2, [r3, #1]
		return;
 8001210:	e002      	b.n	8001218 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 8001212:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <TimeWatch_IncTimeCallBack+0x80>)
 8001214:	2200      	movs	r2, #0
 8001216:	705a      	strb	r2, [r3, #1]
}
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	2000000c 	.word	0x2000000c

08001224 <Button_Init>:
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	4613      	mov	r3, r2
 8001230:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	609a      	str	r2, [r3, #8]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t buzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	hbuzzerTim = htim;
 800125a:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <Buzzer_Init+0x24>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6013      	str	r3, [r2, #0]
	buzzerTimChannel = channel;
 8001260:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <Buzzer_Init+0x28>)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	6013      	str	r3, [r2, #0]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000250 	.word	0x20000250
 8001278:	20000254 	.word	0x20000254

0800127c <Buzzer_SetFreq>:

void Buzzer_SetFreq(uint32_t freq)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	if(freq - 1 < 100) freq = 100;    // 100 < freq <10kHz
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	2b63      	cmp	r3, #99	@ 0x63
 800128a:	d802      	bhi.n	8001292 <Buzzer_SetFreq+0x16>
 800128c:	2364      	movs	r3, #100	@ 0x64
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	e007      	b.n	80012a2 <Buzzer_SetFreq+0x26>
	else if (freq > 10000) freq = 10000;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001298:	4293      	cmp	r3, r2
 800129a:	d902      	bls.n	80012a2 <Buzzer_SetFreq+0x26>
 800129c:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012a0:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_AUTORELOAD(&htim3, 1000000 /freq -1);     // Set Counter
 80012a2:	4a0e      	ldr	r2, [pc, #56]	@ (80012dc <Buzzer_SetFreq+0x60>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80012aa:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <Buzzer_SetFreq+0x64>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3a01      	subs	r2, #1
 80012b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <Buzzer_SetFreq+0x60>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	3b01      	subs	r3, #1
 80012bc:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <Buzzer_SetFreq+0x64>)
 80012be:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000000/freq/2-1);  //duty_ratio
 80012c0:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <Buzzer_SetFreq+0x68>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <Buzzer_SetFreq+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3a01      	subs	r2, #1
 80012ce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	000f4240 	.word	0x000f4240
 80012e0:	2000017c 	.word	0x2000017c
 80012e4:	0007a120 	.word	0x0007a120

080012e8 <Buzzer_Start>:

void Buzzer_Start()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, buzzerTimChannel);
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <Buzzer_Start+0x18>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <Buzzer_Start+0x1c>)
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 f90c 	bl	8003514 <HAL_TIM_PWM_Start>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000250 	.word	0x20000250
 8001304:	20000254 	.word	0x20000254

08001308 <Buzzer_Stop>:

void Buzzer_Stop()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, buzzerTimChannel);
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <Buzzer_Stop+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <Buzzer_Stop+0x1c>)
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f002 f9ac 	bl	8003674 <HAL_TIM_PWM_Stop>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000250 	.word	0x20000250
 8001324:	20000254 	.word	0x20000254

08001328 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 800132c:	4b80      	ldr	r3, [pc, #512]	@ (8001530 <FND_DispDataCallBack+0x208>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	425a      	negs	r2, r3
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	f002 0207 	and.w	r2, r2, #7
 800133c:	bf58      	it	pl
 800133e:	4253      	negpl	r3, r2
 8001340:	4a7b      	ldr	r2, [pc, #492]	@ (8001530 <FND_DispDataCallBack+0x208>)
 8001342:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 8001344:	4b7a      	ldr	r3, [pc, #488]	@ (8001530 <FND_DispDataCallBack+0x208>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b07      	cmp	r3, #7
 800134a:	f200 80ee 	bhi.w	800152a <FND_DispDataCallBack+0x202>
 800134e:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <FND_DispDataCallBack+0x2c>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001375 	.word	0x08001375
 8001358:	080013a3 	.word	0x080013a3
 800135c:	080013db 	.word	0x080013db
 8001360:	08001413 	.word	0x08001413
 8001364:	0800144b 	.word	0x0800144b
 8001368:	08001483 	.word	0x08001483
 800136c:	080014bb 	.word	0x080014bb
 8001370:	080014f3 	.word	0x080014f3
	{
	case DIGIT_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001374:	f000 f900 	bl	8001578 <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 8001378:	4b6e      	ldr	r3, [pc, #440]	@ (8001534 <FND_DispDataCallBack+0x20c>)
 800137a:	881a      	ldrh	r2, [r3, #0]
 800137c:	4b6e      	ldr	r3, [pc, #440]	@ (8001538 <FND_DispDataCallBack+0x210>)
 800137e:	fba3 1302 	umull	r1, r3, r3, r2
 8001382:	08d9      	lsrs	r1, r3, #3
 8001384:	460b      	mov	r3, r1
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f913 	bl	80015bc <FND_DispDigit>
		FND_DispOn(digitPos);
 8001396:	4b66      	ldr	r3, [pc, #408]	@ (8001530 <FND_DispDataCallBack+0x208>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f8d4 	bl	8001548 <FND_DispOn>
		break;
 80013a0:	e0c3      	b.n	800152a <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80013a2:	f000 f8e9 	bl	8001578 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10%10);
 80013a6:	4b63      	ldr	r3, [pc, #396]	@ (8001534 <FND_DispDataCallBack+0x20c>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	4a63      	ldr	r2, [pc, #396]	@ (8001538 <FND_DispDataCallBack+0x210>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b60      	ldr	r3, [pc, #384]	@ (8001538 <FND_DispDataCallBack+0x210>)
 80013b6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ba:	08d9      	lsrs	r1, r3, #3
 80013bc:	460b      	mov	r3, r1
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f8f7 	bl	80015bc <FND_DispDigit>
		FND_DispOn(digitPos);
 80013ce:	4b58      	ldr	r3, [pc, #352]	@ (8001530 <FND_DispDataCallBack+0x208>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f8b8 	bl	8001548 <FND_DispOn>
		break;
 80013d8:	e0a7      	b.n	800152a <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80013da:	f000 f8cd 	bl	8001578 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 80013de:	4b55      	ldr	r3, [pc, #340]	@ (8001534 <FND_DispDataCallBack+0x20c>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	4a56      	ldr	r2, [pc, #344]	@ (800153c <FND_DispDataCallBack+0x214>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b52      	ldr	r3, [pc, #328]	@ (8001538 <FND_DispDataCallBack+0x210>)
 80013ee:	fba3 1302 	umull	r1, r3, r3, r2
 80013f2:	08d9      	lsrs	r1, r3, #3
 80013f4:	460b      	mov	r3, r1
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f8db 	bl	80015bc <FND_DispDigit>
		FND_DispOn(digitPos);
 8001406:	4b4a      	ldr	r3, [pc, #296]	@ (8001530 <FND_DispDataCallBack+0x208>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f89c 	bl	8001548 <FND_DispOn>
		break;
 8001410:	e08b      	b.n	800152a <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001412:	f000 f8b1 	bl	8001578 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 8001416:	4b47      	ldr	r3, [pc, #284]	@ (8001534 <FND_DispDataCallBack+0x20c>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	4a49      	ldr	r2, [pc, #292]	@ (8001540 <FND_DispDataCallBack+0x218>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	099b      	lsrs	r3, r3, #6
 8001422:	b29a      	uxth	r2, r3
 8001424:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <FND_DispDataCallBack+0x210>)
 8001426:	fba3 1302 	umull	r1, r3, r3, r2
 800142a:	08d9      	lsrs	r1, r3, #3
 800142c:	460b      	mov	r3, r1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f8bf 	bl	80015bc <FND_DispDigit>
		FND_DispOn(digitPos);
 800143e:	4b3c      	ldr	r3, [pc, #240]	@ (8001530 <FND_DispDataCallBack+0x208>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f880 	bl	8001548 <FND_DispOn>
		break;
 8001448:	e06f      	b.n	800152a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800144a:	f000 f895 	bl	8001578 <FND_DispOffAll>
		if (fndDispDp & (1<<0)){
 800144e:	4b3d      	ldr	r3, [pc, #244]	@ (8001544 <FND_DispDataCallBack+0x21c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 800145a:	200a      	movs	r0, #10
 800145c:	f000 f8ae 	bl	80015bc <FND_DispDigit>
 8001460:	e002      	b.n	8001468 <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001462:	200b      	movs	r0, #11
 8001464:	f000 f8aa 	bl	80015bc <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001468:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <FND_DispDataCallBack+0x208>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	425a      	negs	r2, r3
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	bf58      	it	pl
 8001478:	4253      	negpl	r3, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f864 	bl	8001548 <FND_DispOn>
		break;
 8001480:	e053      	b.n	800152a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001482:	f000 f879 	bl	8001578 <FND_DispOffAll>
		if (fndDispDp & (1<<1)){
 8001486:	4b2f      	ldr	r3, [pc, #188]	@ (8001544 <FND_DispDataCallBack+0x21c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 8001492:	200a      	movs	r0, #10
 8001494:	f000 f892 	bl	80015bc <FND_DispDigit>
 8001498:	e002      	b.n	80014a0 <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 800149a:	200b      	movs	r0, #11
 800149c:	f000 f88e 	bl	80015bc <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <FND_DispDataCallBack+0x208>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	425a      	negs	r2, r3
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	f002 0203 	and.w	r2, r2, #3
 80014ae:	bf58      	it	pl
 80014b0:	4253      	negpl	r3, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f848 	bl	8001548 <FND_DispOn>
		break;
 80014b8:	e037      	b.n	800152a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80014ba:	f000 f85d 	bl	8001578 <FND_DispOffAll>
		if (fndDispDp & (1<<2)){
 80014be:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <FND_DispDataCallBack+0x21c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 80014ca:	200a      	movs	r0, #10
 80014cc:	f000 f876 	bl	80015bc <FND_DispDigit>
 80014d0:	e002      	b.n	80014d8 <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 80014d2:	200b      	movs	r0, #11
 80014d4:	f000 f872 	bl	80015bc <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <FND_DispDataCallBack+0x208>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	425a      	negs	r2, r3
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	f002 0203 	and.w	r2, r2, #3
 80014e6:	bf58      	it	pl
 80014e8:	4253      	negpl	r3, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f82c 	bl	8001548 <FND_DispOn>
		break;
 80014f0:	e01b      	b.n	800152a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80014f2:	f000 f841 	bl	8001578 <FND_DispOffAll>
		if (fndDispDp & (1<<3)){
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <FND_DispDataCallBack+0x21c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 8001502:	200a      	movs	r0, #10
 8001504:	f000 f85a 	bl	80015bc <FND_DispDigit>
 8001508:	e002      	b.n	8001510 <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 800150a:	200b      	movs	r0, #11
 800150c:	f000 f856 	bl	80015bc <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001510:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <FND_DispDataCallBack+0x208>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	425a      	negs	r2, r3
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	bf58      	it	pl
 8001520:	4253      	negpl	r3, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f810 	bl	8001548 <FND_DispOn>
		break;
 8001528:	bf00      	nop
	}
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000025c 	.word	0x2000025c
 8001534:	20000258 	.word	0x20000258
 8001538:	cccccccd 	.word	0xcccccccd
 800153c:	51eb851f 	.word	0x51eb851f
 8001540:	10624dd3 	.word	0x10624dd3
 8001544:	2000025a 	.word	0x2000025a

08001548 <FND_DispOn>:
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}
*/

void FND_DispOn(int fndPos)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8001550:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <FND_DispOn+0x2c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001558:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <FND_DispOn+0x2c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	b29b      	uxth	r3, r3
 8001564:	2200      	movs	r2, #0
 8001566:	4619      	mov	r1, r3
 8001568:	f000 fd78 	bl	800205c <HAL_GPIO_WritePin>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000014 	.word	0x20000014

08001578 <FND_DispOffAll>:

void FND_DispOffAll()
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	e010      	b.n	80015a6 <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 8001584:	4a0c      	ldr	r2, [pc, #48]	@ (80015b8 <FND_DispOffAll+0x40>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800158c:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <FND_DispOffAll+0x40>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	b29b      	uxth	r3, r3
 8001598:	2201      	movs	r2, #1
 800159a:	4619      	mov	r1, r3
 800159c:	f000 fd5e 	bl	800205c <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3301      	adds	r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	ddeb      	ble.n	8001584 <FND_DispOffAll+0xc>
	}
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000014 	.word	0x20000014

080015bc <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 80015c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001644 <FND_DispDigit+0x88>)
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80015ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    0x6F,  // 9 => 01101111
	    0x80,  // 10(dp) => 10000000
	    0x00,  // 11(off)=> 00000000
	};

	for (int i=0; i<8; i++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e02c      	b.n	8001632 <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	3318      	adds	r3, #24
 80015dc:	443b      	add	r3, r7
 80015de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015e2:	461a      	mov	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa42 f303 	asr.w	r3, r2, r3
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10e      	bne.n	8001610 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 80015f2:	4a15      	ldr	r2, [pc, #84]	@ (8001648 <FND_DispDigit+0x8c>)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80015fa:	4a13      	ldr	r2, [pc, #76]	@ (8001648 <FND_DispDigit+0x8c>)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	b29b      	uxth	r3, r3
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	f000 fd27 	bl	800205c <HAL_GPIO_WritePin>
 800160e:	e00d      	b.n	800162c <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <FND_DispDigit+0x8c>)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001618:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <FND_DispDigit+0x8c>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	b29b      	uxth	r3, r3
 8001624:	2201      	movs	r2, #1
 8001626:	4619      	mov	r1, r3
 8001628:	f000 fd18 	bl	800205c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2b07      	cmp	r3, #7
 8001636:	ddcf      	ble.n	80015d8 <FND_DispDigit+0x1c>
		}
	}
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	0800534c 	.word	0x0800534c
 8001648:	20000034 	.word	0x20000034

0800164c <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8001654:	4a18      	ldr	r2, [pc, #96]	@ (80016b8 <LCD_Init+0x6c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 800165a:	2032      	movs	r0, #50	@ 0x32
 800165c:	f000 f9b2 	bl	80019c4 <HAL_Delay>
	LCD_cmdMode();
 8001660:	f000 f852 	bl	8001708 <LCD_cmdMode>
	LCD_writeMode();
 8001664:	f000 f862 	bl	800172c <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8001668:	2030      	movs	r0, #48	@ 0x30
 800166a:	f000 f895 	bl	8001798 <LCD_sendNibbleData>
	HAL_Delay(5);
 800166e:	2005      	movs	r0, #5
 8001670:	f000 f9a8 	bl	80019c4 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001674:	2030      	movs	r0, #48	@ 0x30
 8001676:	f000 f88f 	bl	8001798 <LCD_sendNibbleData>
	HAL_Delay(1);
 800167a:	2001      	movs	r0, #1
 800167c:	f000 f9a2 	bl	80019c4 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001680:	2030      	movs	r0, #48	@ 0x30
 8001682:	f000 f889 	bl	8001798 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8001686:	2020      	movs	r0, #32
 8001688:	f000 f886 	bl	8001798 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 800168c:	2028      	movs	r0, #40	@ 0x28
 800168e:	f000 f8a7 	bl	80017e0 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8001692:	2008      	movs	r0, #8
 8001694:	f000 f8a4 	bl	80017e0 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8001698:	2001      	movs	r0, #1
 800169a:	f000 f8a1 	bl	80017e0 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 800169e:	2006      	movs	r0, #6
 80016a0:	f000 f89e 	bl	80017e0 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 80016a4:	200c      	movs	r0, #12
 80016a6:	f000 f89b 	bl	80017e0 <LCD_sendData>
	LCD_backLightOn();
 80016aa:	f000 f81d 	bl	80016e8 <LCD_backLightOn>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000264 	.word	0x20000264

080016bc <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 80016c6:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <LCD_sendI2C+0x28>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	1dfa      	adds	r2, r7, #7
 80016cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2301      	movs	r3, #1
 80016d4:	214e      	movs	r1, #78	@ 0x4e
 80016d6:	f000 fe1f 	bl	8002318 <HAL_I2C_Master_Transmit>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000264 	.word	0x20000264

080016e8 <LCD_backLightOn>:

void LCD_backLightOn()
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <LCD_backLightOn+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <LCD_backLightOn+0x1c>)
 80016f8:	701a      	strb	r2, [r3, #0]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	20000260 	.word	0x20000260

08001708 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <LCD_cmdMode+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <LCD_cmdMode+0x20>)
 8001718:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800171a:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <LCD_cmdMode+0x20>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ffcc 	bl	80016bc <LCD_sendI2C>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000260 	.word	0x20000260

0800172c <LCD_writeMode>:
	lcdData |= (1<<LCD_RS);
	LCD_sendI2C(lcdData);
}

void LCD_writeMode()
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <LCD_writeMode+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	f023 0302 	bic.w	r3, r3, #2
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b04      	ldr	r3, [pc, #16]	@ (800174c <LCD_writeMode+0x20>)
 800173c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800173e:	4b03      	ldr	r3, [pc, #12]	@ (800174c <LCD_writeMode+0x20>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ffba 	bl	80016bc <LCD_sendI2C>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000260 	.word	0x20000260

08001750 <LCD_E_High>:

void LCD_E_High()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <LCD_E_High+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <LCD_E_High+0x20>)
 8001760:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001762:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <LCD_E_High+0x20>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffa8 	bl	80016bc <LCD_sendI2C>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000260 	.word	0x20000260

08001774 <LCD_E_Low>:

void LCD_E_Low()
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <LCD_E_Low+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <LCD_E_Low+0x20>)
 8001784:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001786:	4b03      	ldr	r3, [pc, #12]	@ (8001794 <LCD_E_Low+0x20>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff96 	bl	80016bc <LCD_sendI2C>
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000260 	.word	0x20000260

08001798 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 80017a2:	f7ff ffd5 	bl	8001750 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	f023 030f 	bic.w	r3, r3, #15
 80017ae:	b25a      	sxtb	r2, r3
 80017b0:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <LCD_sendNibbleData+0x44>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <LCD_sendNibbleData+0x44>)
 80017c4:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <LCD_sendNibbleData+0x44>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff76 	bl	80016bc <LCD_sendI2C>
	LCD_E_Low();
 80017d0:	f7ff ffd0 	bl	8001774 <LCD_E_Low>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000260 	.word	0x20000260

080017e0 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ffd3 	bl	8001798 <LCD_sendNibbleData>

	data = data << 4;
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ffcc 	bl	8001798 <LCD_sendNibbleData>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <Motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t motorTimChannel;

void Motor_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	hmotorTim = htim;
 8001812:	4a06      	ldr	r2, [pc, #24]	@ (800182c <Motor_Init+0x24>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6013      	str	r3, [r2, #0]
	motorTimChannel = channel;
 8001818:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <Motor_Init+0x28>)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6013      	str	r3, [r2, #0]

}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000268 	.word	0x20000268
 8001830:	2000026c 	.word	0x2000026c

08001834 <Motor_SetFreq>:

void Motor_SetFreq(uint32_t freq)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	if(freq - 1 < 100) freq = 100;    // 100 < freq <10kHz
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	2b63      	cmp	r3, #99	@ 0x63
 8001842:	d802      	bhi.n	800184a <Motor_SetFreq+0x16>
 8001844:	2364      	movs	r3, #100	@ 0x64
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	e007      	b.n	800185a <Motor_SetFreq+0x26>
	else if (freq > 10000) freq = 10000;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001850:	4293      	cmp	r3, r2
 8001852:	d902      	bls.n	800185a <Motor_SetFreq+0x26>
 8001854:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001858:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_AUTORELOAD(&htim1, 1000000 /freq -1);     // Set Counter
 800185a:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <Motor_SetFreq+0x60>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <Motor_SetFreq+0x64>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3a01      	subs	r2, #1
 8001868:	62da      	str	r2, [r3, #44]	@ 0x2c
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <Motor_SetFreq+0x60>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <Motor_SetFreq+0x64>)
 8001876:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000000/freq/2-1);  //duty_ratio
 8001878:	4a08      	ldr	r2, [pc, #32]	@ (800189c <Motor_SetFreq+0x68>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <Motor_SetFreq+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3a01      	subs	r2, #1
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	000f4240 	.word	0x000f4240
 8001898:	200000ec 	.word	0x200000ec
 800189c:	0007a120 	.word	0x0007a120

080018a0 <Motor_Start>:

void Motor_Start()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, motorTimChannel);
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <Motor_Start+0x18>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <Motor_Start+0x1c>)
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fe30 	bl	8003514 <HAL_TIM_PWM_Start>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000268 	.word	0x20000268
 80018bc:	2000026c 	.word	0x2000026c

080018c0 <Motor_Stop>:

void Motor_Stop()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hmotorTim, motorTimChannel);
 80018c4:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <Motor_Stop+0x18>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <Motor_Stop+0x1c>)
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fed0 	bl	8003674 <HAL_TIM_PWM_Stop>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000268 	.word	0x20000268
 80018dc:	2000026c 	.word	0x2000026c

080018e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <HAL_Init+0x40>)
 80018ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <HAL_Init+0x40>)
 80018f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <HAL_Init+0x40>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 f94f 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190e:	200f      	movs	r0, #15
 8001910:	f000 f808 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001914:	f7fe ff9a 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f967 	bl	8001c16 <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f000 f92f 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	@ (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000000 	.word	0x20000000
 800197c:	20000078 	.word	0x20000078
 8001980:	20000074 	.word	0x20000074

08001984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000078 	.word	0x20000078
 80019a8:	20000270 	.word	0x20000270

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000270 	.word	0x20000270

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff ffee 	bl	80019ac <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_Delay+0x44>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ea:	bf00      	nop
 80019ec:	f7ff ffde 	bl	80019ac <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000078 	.word	0x20000078

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4907      	ldr	r1, [pc, #28]	@ (8001aa8 <__NVIC_EnableIRQ+0x38>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	@ (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	@ 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
         );
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	@ 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff8e 	bl	8001aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff29 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff3e 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ff8e 	bl	8001b00 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff5d 	bl	8001aac <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff31 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffa2 	bl	8001b68 <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff feb6 	bl	80019ac <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d008      	beq.n	8001c60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2280      	movs	r2, #128	@ 0x80
 8001c52:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e052      	b.n	8001d06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0216 	bic.w	r2, r2, #22
 8001c6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d103      	bne.n	8001c90 <HAL_DMA_Abort+0x62>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0208 	bic.w	r2, r2, #8
 8001c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb0:	e013      	b.n	8001cda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb2:	f7ff fe7b 	bl	80019ac <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d90c      	bls.n	8001cda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2203      	movs	r2, #3
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e015      	b.n	8001d06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e4      	bne.n	8001cb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cec:	223f      	movs	r2, #63	@ 0x3f
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d004      	beq.n	8001d2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2280      	movs	r2, #128	@ 0x80
 8001d26:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e00c      	b.n	8001d46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2205      	movs	r2, #5
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e159      	b.n	8002024 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 8148 	bne.w	800201e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d005      	beq.n	8001da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d017      	beq.n	8001e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a2 	beq.w	800201e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b57      	ldr	r3, [pc, #348]	@ (800203c <HAL_GPIO_Init+0x2e8>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	4a56      	ldr	r2, [pc, #344]	@ (800203c <HAL_GPIO_Init+0x2e8>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eea:	4b54      	ldr	r3, [pc, #336]	@ (800203c <HAL_GPIO_Init+0x2e8>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef6:	4a52      	ldr	r2, [pc, #328]	@ (8002040 <HAL_GPIO_Init+0x2ec>)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a49      	ldr	r2, [pc, #292]	@ (8002044 <HAL_GPIO_Init+0x2f0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d019      	beq.n	8001f56 <HAL_GPIO_Init+0x202>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a48      	ldr	r2, [pc, #288]	@ (8002048 <HAL_GPIO_Init+0x2f4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x1fe>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a47      	ldr	r2, [pc, #284]	@ (800204c <HAL_GPIO_Init+0x2f8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x1fa>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a46      	ldr	r2, [pc, #280]	@ (8002050 <HAL_GPIO_Init+0x2fc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x1f6>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a45      	ldr	r2, [pc, #276]	@ (8002054 <HAL_GPIO_Init+0x300>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x1f2>
 8001f42:	2304      	movs	r3, #4
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x204>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x204>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x204>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x204>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x204>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	@ (8002040 <HAL_GPIO_Init+0x2ec>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f76:	4b38      	ldr	r3, [pc, #224]	@ (8002058 <HAL_GPIO_Init+0x304>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002058 <HAL_GPIO_Init+0x304>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8002058 <HAL_GPIO_Init+0x304>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc4:	4a24      	ldr	r2, [pc, #144]	@ (8002058 <HAL_GPIO_Init+0x304>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fca:	4b23      	ldr	r3, [pc, #140]	@ (8002058 <HAL_GPIO_Init+0x304>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fee:	4a1a      	ldr	r2, [pc, #104]	@ (8002058 <HAL_GPIO_Init+0x304>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff4:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <HAL_GPIO_Init+0x304>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002018:	4a0f      	ldr	r2, [pc, #60]	@ (8002058 <HAL_GPIO_Init+0x304>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f aea2 	bls.w	8001d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40013c00 	.word	0x40013c00

0800205c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
 8002068:	4613      	mov	r3, r2
 800206a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800206c:	787b      	ldrb	r3, [r7, #1]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002078:	e003      	b.n	8002082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	041a      	lsls	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	619a      	str	r2, [r3, #24]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e12b      	b.n	80022fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fafa 	bl	80006b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	@ 0x24
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020f4:	f001 f8da 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 80020f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a81      	ldr	r2, [pc, #516]	@ (8002304 <HAL_I2C_Init+0x274>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d807      	bhi.n	8002114 <HAL_I2C_Init+0x84>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4a80      	ldr	r2, [pc, #512]	@ (8002308 <HAL_I2C_Init+0x278>)
 8002108:	4293      	cmp	r3, r2
 800210a:	bf94      	ite	ls
 800210c:	2301      	movls	r3, #1
 800210e:	2300      	movhi	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e006      	b.n	8002122 <HAL_I2C_Init+0x92>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4a7d      	ldr	r2, [pc, #500]	@ (800230c <HAL_I2C_Init+0x27c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	bf94      	ite	ls
 800211c:	2301      	movls	r3, #1
 800211e:	2300      	movhi	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0e7      	b.n	80022fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4a78      	ldr	r2, [pc, #480]	@ (8002310 <HAL_I2C_Init+0x280>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0c9b      	lsrs	r3, r3, #18
 8002134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a6a      	ldr	r2, [pc, #424]	@ (8002304 <HAL_I2C_Init+0x274>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d802      	bhi.n	8002164 <HAL_I2C_Init+0xd4>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3301      	adds	r3, #1
 8002162:	e009      	b.n	8002178 <HAL_I2C_Init+0xe8>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	4a69      	ldr	r2, [pc, #420]	@ (8002314 <HAL_I2C_Init+0x284>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	099b      	lsrs	r3, r3, #6
 8002176:	3301      	adds	r3, #1
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	430b      	orrs	r3, r1
 800217e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800218a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	495c      	ldr	r1, [pc, #368]	@ (8002304 <HAL_I2C_Init+0x274>)
 8002194:	428b      	cmp	r3, r1
 8002196:	d819      	bhi.n	80021cc <HAL_I2C_Init+0x13c>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e59      	subs	r1, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a6:	1c59      	adds	r1, r3, #1
 80021a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021ac:	400b      	ands	r3, r1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_I2C_Init+0x138>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1e59      	subs	r1, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c6:	e051      	b.n	800226c <HAL_I2C_Init+0x1dc>
 80021c8:	2304      	movs	r3, #4
 80021ca:	e04f      	b.n	800226c <HAL_I2C_Init+0x1dc>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d111      	bne.n	80021f8 <HAL_I2C_Init+0x168>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e58      	subs	r0, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e012      	b.n	800221e <HAL_I2C_Init+0x18e>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1e58      	subs	r0, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	0099      	lsls	r1, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	fbb0 f3f3 	udiv	r3, r0, r3
 800220e:	3301      	adds	r3, #1
 8002210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Init+0x196>
 8002222:	2301      	movs	r3, #1
 8002224:	e022      	b.n	800226c <HAL_I2C_Init+0x1dc>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10e      	bne.n	800224c <HAL_I2C_Init+0x1bc>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1e58      	subs	r0, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6859      	ldr	r1, [r3, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	440b      	add	r3, r1
 800223c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002240:	3301      	adds	r3, #1
 8002242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800224a:	e00f      	b.n	800226c <HAL_I2C_Init+0x1dc>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1e58      	subs	r0, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	0099      	lsls	r1, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	3301      	adds	r3, #1
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	6809      	ldr	r1, [r1, #0]
 8002270:	4313      	orrs	r3, r2
 8002272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800229a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6911      	ldr	r1, [r2, #16]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68d2      	ldr	r2, [r2, #12]
 80022a6:	4311      	orrs	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	000186a0 	.word	0x000186a0
 8002308:	001e847f 	.word	0x001e847f
 800230c:	003d08ff 	.word	0x003d08ff
 8002310:	431bde83 	.word	0x431bde83
 8002314:	10624dd3 	.word	0x10624dd3

08002318 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	461a      	mov	r2, r3
 8002324:	460b      	mov	r3, r1
 8002326:	817b      	strh	r3, [r7, #10]
 8002328:	4613      	mov	r3, r2
 800232a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fb3e 	bl	80019ac <HAL_GetTick>
 8002330:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	f040 80e0 	bne.w	8002500 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2319      	movs	r3, #25
 8002346:	2201      	movs	r2, #1
 8002348:	4970      	ldr	r1, [pc, #448]	@ (800250c <HAL_I2C_Master_Transmit+0x1f4>)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f964 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
 8002358:	e0d3      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_I2C_Master_Transmit+0x50>
 8002364:	2302      	movs	r3, #2
 8002366:	e0cc      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d007      	beq.n	800238e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800239c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2221      	movs	r2, #33	@ 0x21
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2210      	movs	r2, #16
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	893a      	ldrh	r2, [r7, #8]
 80023be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a50      	ldr	r2, [pc, #320]	@ (8002510 <HAL_I2C_Master_Transmit+0x1f8>)
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023d0:	8979      	ldrh	r1, [r7, #10]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	6a3a      	ldr	r2, [r7, #32]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f89c 	bl	8002514 <I2C_MasterRequestWrite>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e08d      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023fc:	e066      	b.n	80024cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	6a39      	ldr	r1, [r7, #32]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fa22 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	2b04      	cmp	r3, #4
 8002414:	d107      	bne.n	8002426 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06b      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d11b      	bne.n	80024a0 <HAL_I2C_Master_Transmit+0x188>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d017      	beq.n	80024a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	6a39      	ldr	r1, [r7, #32]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fa19 	bl	80028dc <I2C_WaitOnBTFFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d107      	bne.n	80024c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e01a      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d194      	bne.n	80023fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e000      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	00100002 	.word	0x00100002
 8002510:	ffff0000 	.word	0xffff0000

08002514 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	460b      	mov	r3, r1
 8002522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d006      	beq.n	800253e <I2C_MasterRequestWrite+0x2a>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d003      	beq.n	800253e <I2C_MasterRequestWrite+0x2a>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800253c:	d108      	bne.n	8002550 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00b      	b.n	8002568 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	2b12      	cmp	r3, #18
 8002556:	d107      	bne.n	8002568 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002566:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f84f 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800258e:	d103      	bne.n	8002598 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e035      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025a4:	d108      	bne.n	80025b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025a6:	897b      	ldrh	r3, [r7, #10]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025b4:	611a      	str	r2, [r3, #16]
 80025b6:	e01b      	b.n	80025f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025b8:	897b      	ldrh	r3, [r7, #10]
 80025ba:	11db      	asrs	r3, r3, #7
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f003 0306 	and.w	r3, r3, #6
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f063 030f 	orn	r3, r3, #15
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	490e      	ldr	r1, [pc, #56]	@ (8002610 <I2C_MasterRequestWrite+0xfc>)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f898 	bl	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e010      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4907      	ldr	r1, [pc, #28]	@ (8002614 <I2C_MasterRequestWrite+0x100>)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f888 	bl	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	00010008 	.word	0x00010008
 8002614:	00010002 	.word	0x00010002

08002618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002628:	e048      	b.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d044      	beq.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7ff f9bb 	bl	80019ac <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d139      	bne.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d10d      	bne.n	800266e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	43da      	mvns	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4013      	ands	r3, r2
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	e00c      	b.n	8002688 <I2C_WaitOnFlagUntilTimeout+0x70>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	43da      	mvns	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	4013      	ands	r3, r2
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	429a      	cmp	r2, r3
 800268c:	d116      	bne.n	80026bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e023      	b.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d10d      	bne.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	43da      	mvns	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4013      	ands	r3, r2
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	e00c      	b.n	80026fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d093      	beq.n	800262a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800271a:	e071      	b.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800272a:	d123      	bne.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f043 0204 	orr.w	r2, r3, #4
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e067      	b.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d041      	beq.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277c:	f7ff f916 	bl	80019ac <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d136      	bne.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10c      	bne.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e00b      	b.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	43da      	mvns	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e021      	b.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	0c1b      	lsrs	r3, r3, #16
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10c      	bne.n	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	43da      	mvns	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4013      	ands	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e00b      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f af6d 	bne.w	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002858:	e034      	b.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f886 	bl	800296c <I2C_IsAcknowledgeFailed>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e034      	b.n	80028d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d028      	beq.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7ff f89b 	bl	80019ac <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d11d      	bne.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002892:	2b80      	cmp	r3, #128	@ 0x80
 8002894:	d016      	beq.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e007      	b.n	80028d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ce:	2b80      	cmp	r3, #128	@ 0x80
 80028d0:	d1c3      	bne.n	800285a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e8:	e034      	b.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f83e 	bl	800296c <I2C_IsAcknowledgeFailed>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e034      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d028      	beq.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002902:	f7ff f853 	bl	80019ac <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11d      	bne.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d016      	beq.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e007      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b04      	cmp	r3, #4
 8002960:	d1c3      	bne.n	80028ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002982:	d11b      	bne.n	80029bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800298c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f043 0204 	orr.w	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e267      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d075      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029ea:	4b88      	ldr	r3, [pc, #544]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d00c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f6:	4b85      	ldr	r3, [pc, #532]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d112      	bne.n	8002a28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a02:	4b82      	ldr	r3, [pc, #520]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a0e:	d10b      	bne.n	8002a28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	4b7e      	ldr	r3, [pc, #504]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d05b      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x108>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d157      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e242      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a30:	d106      	bne.n	8002a40 <HAL_RCC_OscConfig+0x74>
 8002a32:	4b76      	ldr	r3, [pc, #472]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a75      	ldr	r2, [pc, #468]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e01d      	b.n	8002a7c <HAL_RCC_OscConfig+0xb0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x98>
 8002a4a:	4b70      	ldr	r3, [pc, #448]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a6f      	ldr	r2, [pc, #444]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b6d      	ldr	r3, [pc, #436]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a6c      	ldr	r2, [pc, #432]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0xb0>
 8002a64:	4b69      	ldr	r3, [pc, #420]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a68      	ldr	r2, [pc, #416]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b66      	ldr	r3, [pc, #408]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a65      	ldr	r2, [pc, #404]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe ff92 	bl	80019ac <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe ff8e 	bl	80019ac <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	@ 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e207      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0xc0>
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe ff7e 	bl	80019ac <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe ff7a 	bl	80019ac <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	@ 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1f3      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	4b51      	ldr	r3, [pc, #324]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xe8>
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d063      	beq.n	8002baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aee:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d11c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afa:	4b44      	ldr	r3, [pc, #272]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	4b41      	ldr	r3, [pc, #260]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x152>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1c7      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4937      	ldr	r1, [pc, #220]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	e03a      	b.n	8002baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	4b34      	ldr	r3, [pc, #208]	@ (8002c10 <HAL_RCC_OscConfig+0x244>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe ff33 	bl	80019ac <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fe ff2f 	bl	80019ac <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1a8      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4925      	ldr	r1, [pc, #148]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <HAL_RCC_OscConfig+0x244>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe ff12 	bl	80019ac <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7fe ff0e 	bl	80019ac <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e187      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d036      	beq.n	8002c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_RCC_OscConfig+0x248>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fef2 	bl	80019ac <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fe feee 	bl	80019ac <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e167      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_RCC_OscConfig+0x240>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x200>
 8002bea:	e01b      	b.n	8002c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_OscConfig+0x248>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fedb 	bl	80019ac <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	e00e      	b.n	8002c18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fed7 	bl	80019ac <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d907      	bls.n	8002c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e150      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	42470000 	.word	0x42470000
 8002c14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c18:	4b88      	ldr	r3, [pc, #544]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ea      	bne.n	8002bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8097 	beq.w	8002d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c36:	4b81      	ldr	r3, [pc, #516]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	4b7d      	ldr	r3, [pc, #500]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c52:	4b7a      	ldr	r3, [pc, #488]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b77      	ldr	r3, [pc, #476]	@ (8002e40 <HAL_RCC_OscConfig+0x474>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d118      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6e:	4b74      	ldr	r3, [pc, #464]	@ (8002e40 <HAL_RCC_OscConfig+0x474>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a73      	ldr	r2, [pc, #460]	@ (8002e40 <HAL_RCC_OscConfig+0x474>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fe97 	bl	80019ac <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c82:	f7fe fe93 	bl	80019ac <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e10c      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	4b6a      	ldr	r3, [pc, #424]	@ (8002e40 <HAL_RCC_OscConfig+0x474>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2ea>
 8002ca8:	4b64      	ldr	r3, [pc, #400]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	4a63      	ldr	r2, [pc, #396]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb4:	e01c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x324>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x30c>
 8002cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cca:	4b5c      	ldr	r3, [pc, #368]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	4a5b      	ldr	r2, [pc, #364]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x324>
 8002cd8:	4b58      	ldr	r3, [pc, #352]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	4a57      	ldr	r2, [pc, #348]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce4:	4b55      	ldr	r3, [pc, #340]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	4a54      	ldr	r2, [pc, #336]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002cea:	f023 0304 	bic.w	r3, r3, #4
 8002cee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fe58 	bl	80019ac <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe fe54 	bl	80019ac <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0cb      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d16:	4b49      	ldr	r3, [pc, #292]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ee      	beq.n	8002d00 <HAL_RCC_OscConfig+0x334>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d24:	f7fe fe42 	bl	80019ac <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fe3e 	bl	80019ac <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0b5      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d42:	4b3e      	ldr	r3, [pc, #248]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ee      	bne.n	8002d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	4a38      	ldr	r2, [pc, #224]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80a1 	beq.w	8002eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6a:	4b34      	ldr	r3, [pc, #208]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d05c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d141      	bne.n	8002e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7e:	4b31      	ldr	r3, [pc, #196]	@ (8002e44 <HAL_RCC_OscConfig+0x478>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe fe12 	bl	80019ac <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe fe0e 	bl	80019ac <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e087      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	019b      	lsls	r3, r3, #6
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	491b      	ldr	r1, [pc, #108]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e44 <HAL_RCC_OscConfig+0x478>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fde7 	bl	80019ac <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fe fde3 	bl	80019ac <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e05c      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df4:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x416>
 8002e00:	e054      	b.n	8002eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <HAL_RCC_OscConfig+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fdd0 	bl	80019ac <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fdcc 	bl	80019ac <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e045      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_RCC_OscConfig+0x470>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x444>
 8002e2e:	e03d      	b.n	8002eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e038      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40007000 	.word	0x40007000
 8002e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <HAL_RCC_OscConfig+0x4ec>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d028      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d121      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d11a      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d111      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	3b01      	subs	r3, #1
 8002e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800

08002ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0cc      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b68      	ldr	r3, [pc, #416]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d90c      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b65      	ldr	r3, [pc, #404]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b63      	ldr	r3, [pc, #396]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b8      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f10:	4b59      	ldr	r3, [pc, #356]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a58      	ldr	r2, [pc, #352]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f28:	4b53      	ldr	r3, [pc, #332]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a52      	ldr	r2, [pc, #328]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b50      	ldr	r3, [pc, #320]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	494d      	ldr	r1, [pc, #308]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d044      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d119      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e06f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e067      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9a:	4b37      	ldr	r3, [pc, #220]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f023 0203 	bic.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4934      	ldr	r1, [pc, #208]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fac:	f7fe fcfe 	bl	80019ac <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb4:	f7fe fcfa 	bl	80019ac <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e04f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	4b2b      	ldr	r3, [pc, #172]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 020c 	and.w	r2, r3, #12
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d1eb      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d20c      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b22      	ldr	r3, [pc, #136]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e032      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003010:	4b19      	ldr	r3, [pc, #100]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4916      	ldr	r1, [pc, #88]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800302e:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	490e      	ldr	r1, [pc, #56]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003042:	f000 f821 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	490a      	ldr	r1, [pc, #40]	@ (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	5ccb      	ldrb	r3, [r1, r3]
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	4a09      	ldr	r2, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fc5e 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023c00 	.word	0x40023c00
 8003078:	40023800 	.word	0x40023800
 800307c:	08005358 	.word	0x08005358
 8003080:	20000000 	.word	0x20000000
 8003084:	20000074 	.word	0x20000074

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800308c:	b094      	sub	sp, #80	@ 0x50
 800308e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a0:	4b79      	ldr	r3, [pc, #484]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d00d      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x40>
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	f200 80e1 	bhi.w	8003274 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x34>
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ba:	e0db      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b73      	ldr	r3, [pc, #460]	@ (800328c <HAL_RCC_GetSysClockFreq+0x204>)
 80030be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030c0:	e0db      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c2:	4b73      	ldr	r3, [pc, #460]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x208>)
 80030c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030c6:	e0d8      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030de:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	099b      	lsrs	r3, r3, #6
 80030e4:	2200      	movs	r2, #0
 80030e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80030f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	0159      	lsls	r1, r3, #5
 8003108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310c:	0150      	lsls	r0, r2, #5
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4621      	mov	r1, r4
 8003114:	1a51      	subs	r1, r2, r1
 8003116:	6139      	str	r1, [r7, #16]
 8003118:	4629      	mov	r1, r5
 800311a:	eb63 0301 	sbc.w	r3, r3, r1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800312c:	4659      	mov	r1, fp
 800312e:	018b      	lsls	r3, r1, #6
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003136:	4651      	mov	r1, sl
 8003138:	018a      	lsls	r2, r1, #6
 800313a:	4651      	mov	r1, sl
 800313c:	ebb2 0801 	subs.w	r8, r2, r1
 8003140:	4659      	mov	r1, fp
 8003142:	eb63 0901 	sbc.w	r9, r3, r1
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315a:	4690      	mov	r8, r2
 800315c:	4699      	mov	r9, r3
 800315e:	4623      	mov	r3, r4
 8003160:	eb18 0303 	adds.w	r3, r8, r3
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	462b      	mov	r3, r5
 8003168:	eb49 0303 	adc.w	r3, r9, r3
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800317a:	4629      	mov	r1, r5
 800317c:	024b      	lsls	r3, r1, #9
 800317e:	4621      	mov	r1, r4
 8003180:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003184:	4621      	mov	r1, r4
 8003186:	024a      	lsls	r2, r1, #9
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800318e:	2200      	movs	r2, #0
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003198:	f7fd f81e 	bl	80001d8 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4613      	mov	r3, r2
 80031a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a4:	e058      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b38      	ldr	r3, [pc, #224]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	4611      	mov	r1, r2
 80031b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80031bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	f04f 0000 	mov.w	r0, #0
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	0159      	lsls	r1, r3, #5
 80031ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d2:	0150      	lsls	r0, r2, #5
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4641      	mov	r1, r8
 80031da:	ebb2 0a01 	subs.w	sl, r2, r1
 80031de:	4649      	mov	r1, r9
 80031e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031f8:	ebb2 040a 	subs.w	r4, r2, sl
 80031fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	00eb      	lsls	r3, r5, #3
 800320a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800320e:	00e2      	lsls	r2, r4, #3
 8003210:	4614      	mov	r4, r2
 8003212:	461d      	mov	r5, r3
 8003214:	4643      	mov	r3, r8
 8003216:	18e3      	adds	r3, r4, r3
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	464b      	mov	r3, r9
 800321c:	eb45 0303 	adc.w	r3, r5, r3
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800322e:	4629      	mov	r1, r5
 8003230:	028b      	lsls	r3, r1, #10
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003238:	4621      	mov	r1, r4
 800323a:	028a      	lsls	r2, r1, #10
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003242:	2200      	movs	r2, #0
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	61fa      	str	r2, [r7, #28]
 8003248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324c:	f7fc ffc4 	bl	80001d8 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4613      	mov	r3, r2
 8003256:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003268:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800326a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_RCC_GetSysClockFreq+0x204>)
 8003276:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800327c:	4618      	mov	r0, r3
 800327e:	3750      	adds	r7, #80	@ 0x50
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	00f42400 	.word	0x00f42400
 8003290:	007a1200 	.word	0x007a1200

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a9b      	lsrs	r3, r3, #10
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08005368 	.word	0x08005368

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032d8:	f7ff ffdc 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0b5b      	lsrs	r3, r3, #13
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08005368 	.word	0x08005368

080032fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e041      	b.n	8003392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fd fc74 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 fca0 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d001      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e044      	b.n	800343e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <HAL_TIM_Base_Start_IT+0xb0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d018      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x6c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033de:	d013      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x6c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003450 <HAL_TIM_Base_Start_IT+0xb4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x6c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a19      	ldr	r2, [pc, #100]	@ (8003454 <HAL_TIM_Base_Start_IT+0xb8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d009      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x6c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a17      	ldr	r2, [pc, #92]	@ (8003458 <HAL_TIM_Base_Start_IT+0xbc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x6c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a16      	ldr	r2, [pc, #88]	@ (800345c <HAL_TIM_Base_Start_IT+0xc0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d111      	bne.n	800342c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b06      	cmp	r3, #6
 8003418:	d010      	beq.n	800343c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342a:	e007      	b.n	800343c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40010000 	.word	0x40010000
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800
 8003458:	40000c00 	.word	0x40000c00
 800345c:	40014000 	.word	0x40014000

08003460 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e041      	b.n	80034f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f839 	bl	80034fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f000 fbee 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_TIM_PWM_Start+0x24>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e022      	b.n	800357e <HAL_TIM_PWM_Start+0x6a>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b04      	cmp	r3, #4
 800353c:	d109      	bne.n	8003552 <HAL_TIM_PWM_Start+0x3e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e015      	b.n	800357e <HAL_TIM_PWM_Start+0x6a>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d109      	bne.n	800356c <HAL_TIM_PWM_Start+0x58>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e008      	b.n	800357e <HAL_TIM_PWM_Start+0x6a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e068      	b.n	8003658 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <HAL_TIM_PWM_Start+0x82>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003594:	e013      	b.n	80035be <HAL_TIM_PWM_Start+0xaa>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b04      	cmp	r3, #4
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_PWM_Start+0x92>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a4:	e00b      	b.n	80035be <HAL_TIM_PWM_Start+0xaa>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_PWM_Start+0xa2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035b4:	e003      	b.n	80035be <HAL_TIM_PWM_Start+0xaa>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2201      	movs	r2, #1
 80035c4:	6839      	ldr	r1, [r7, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fe06 	bl	80041d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a23      	ldr	r2, [pc, #140]	@ (8003660 <HAL_TIM_PWM_Start+0x14c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d107      	bne.n	80035e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003660 <HAL_TIM_PWM_Start+0x14c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d018      	beq.n	8003622 <HAL_TIM_PWM_Start+0x10e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f8:	d013      	beq.n	8003622 <HAL_TIM_PWM_Start+0x10e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a19      	ldr	r2, [pc, #100]	@ (8003664 <HAL_TIM_PWM_Start+0x150>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00e      	beq.n	8003622 <HAL_TIM_PWM_Start+0x10e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a17      	ldr	r2, [pc, #92]	@ (8003668 <HAL_TIM_PWM_Start+0x154>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_TIM_PWM_Start+0x10e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a16      	ldr	r2, [pc, #88]	@ (800366c <HAL_TIM_PWM_Start+0x158>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_TIM_PWM_Start+0x10e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a14      	ldr	r2, [pc, #80]	@ (8003670 <HAL_TIM_PWM_Start+0x15c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d111      	bne.n	8003646 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b06      	cmp	r3, #6
 8003632:	d010      	beq.n	8003656 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003644:	e007      	b.n	8003656 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40010000 	.word	0x40010000
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40014000 	.word	0x40014000

08003674 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2200      	movs	r2, #0
 8003684:	6839      	ldr	r1, [r7, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fda6 	bl	80041d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a29      	ldr	r2, [pc, #164]	@ (8003738 <HAL_TIM_PWM_Stop+0xc4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d117      	bne.n	80036c6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <HAL_TIM_PWM_Stop+0x52>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6a1a      	ldr	r2, [r3, #32]
 80036ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_TIM_PWM_Stop+0x52>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <HAL_TIM_PWM_Stop+0x82>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a1a      	ldr	r2, [r3, #32]
 80036dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d107      	bne.n	80036f6 <HAL_TIM_PWM_Stop+0x82>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Stop+0x92>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003704:	e013      	b.n	800372e <HAL_TIM_PWM_Stop+0xba>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Stop+0xa2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003714:	e00b      	b.n	800372e <HAL_TIM_PWM_Stop+0xba>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d104      	bne.n	8003726 <HAL_TIM_PWM_Stop+0xb2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003724:	e003      	b.n	800372e <HAL_TIM_PWM_Stop+0xba>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40010000 	.word	0x40010000

0800373c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d020      	beq.n	80037a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01b      	beq.n	80037a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0202 	mvn.w	r2, #2
 8003770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa5b 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fa4d 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fa5e 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d020      	beq.n	80037ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01b      	beq.n	80037ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0204 	mvn.w	r2, #4
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa35 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa27 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fa38 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d020      	beq.n	8003838 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01b      	beq.n	8003838 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0208 	mvn.w	r2, #8
 8003808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2204      	movs	r2, #4
 800380e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa0f 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fa01 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fa12 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	d020      	beq.n	8003884 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01b      	beq.n	8003884 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0210 	mvn.w	r2, #16
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2208      	movs	r2, #8
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f9e9 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9db 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f9ec 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0201 	mvn.w	r2, #1
 80038a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fba0 	bl	8000fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fd76 	bl	80043b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9bd 	bl	8003c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00c      	beq.n	8003914 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0220 	mvn.w	r2, #32
 800390c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fd48 	bl	80043a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003936:	2302      	movs	r3, #2
 8003938:	e0ae      	b.n	8003a98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	f200 809f 	bhi.w	8003a88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800394a:	a201      	add	r2, pc, #4	@ (adr r2, 8003950 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003985 	.word	0x08003985
 8003954:	08003a89 	.word	0x08003a89
 8003958:	08003a89 	.word	0x08003a89
 800395c:	08003a89 	.word	0x08003a89
 8003960:	080039c5 	.word	0x080039c5
 8003964:	08003a89 	.word	0x08003a89
 8003968:	08003a89 	.word	0x08003a89
 800396c:	08003a89 	.word	0x08003a89
 8003970:	08003a07 	.word	0x08003a07
 8003974:	08003a89 	.word	0x08003a89
 8003978:	08003a89 	.word	0x08003a89
 800397c:	08003a89 	.word	0x08003a89
 8003980:	08003a47 	.word	0x08003a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f9fe 	bl	8003d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0208 	orr.w	r2, r2, #8
 800399e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0204 	bic.w	r2, r2, #4
 80039ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	619a      	str	r2, [r3, #24]
      break;
 80039c2:	e064      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fa44 	bl	8003e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6999      	ldr	r1, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	619a      	str	r2, [r3, #24]
      break;
 8003a04:	e043      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fa8f 	bl	8003f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0208 	orr.w	r2, r2, #8
 8003a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0204 	bic.w	r2, r2, #4
 8003a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	61da      	str	r2, [r3, #28]
      break;
 8003a44:	e023      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fad9 	bl	8004004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69d9      	ldr	r1, [r3, #28]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	61da      	str	r2, [r3, #28]
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIM_ConfigClockSource+0x1c>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0b4      	b.n	8003c26 <HAL_TIM_ConfigClockSource+0x186>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af4:	d03e      	beq.n	8003b74 <HAL_TIM_ConfigClockSource+0xd4>
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afa:	f200 8087 	bhi.w	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b02:	f000 8086 	beq.w	8003c12 <HAL_TIM_ConfigClockSource+0x172>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b0a:	d87f      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b70      	cmp	r3, #112	@ 0x70
 8003b0e:	d01a      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0xa6>
 8003b10:	2b70      	cmp	r3, #112	@ 0x70
 8003b12:	d87b      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b60      	cmp	r3, #96	@ 0x60
 8003b16:	d050      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x11a>
 8003b18:	2b60      	cmp	r3, #96	@ 0x60
 8003b1a:	d877      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b50      	cmp	r3, #80	@ 0x50
 8003b1e:	d03c      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0xfa>
 8003b20:	2b50      	cmp	r3, #80	@ 0x50
 8003b22:	d873      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d058      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x13a>
 8003b28:	2b40      	cmp	r3, #64	@ 0x40
 8003b2a:	d86f      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b30      	cmp	r3, #48	@ 0x30
 8003b2e:	d064      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b30      	cmp	r3, #48	@ 0x30
 8003b32:	d86b      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d060      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d867      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d05c      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d05a      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b44:	e062      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b56:	f000 fb1f 	bl	8004198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	609a      	str	r2, [r3, #8]
      break;
 8003b72:	e04f      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b84:	f000 fb08 	bl	8004198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b96:	609a      	str	r2, [r3, #8]
      break;
 8003b98:	e03c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f000 fa7c 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2150      	movs	r1, #80	@ 0x50
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fad5 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003bb8:	e02c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f000 fa9b 	bl	8004102 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2160      	movs	r1, #96	@ 0x60
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fac5 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003bd8:	e01c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be6:	461a      	mov	r2, r3
 8003be8:	f000 fa5c 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2140      	movs	r1, #64	@ 0x40
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fab5 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003bf8:	e00c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f000 faac 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e003      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c10:	e000      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a37      	ldr	r2, [pc, #220]	@ (8003d70 <TIM_Base_SetConfig+0xf0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00f      	beq.n	8003cb8 <TIM_Base_SetConfig+0x38>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_Base_SetConfig+0x38>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a34      	ldr	r2, [pc, #208]	@ (8003d74 <TIM_Base_SetConfig+0xf4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_Base_SetConfig+0x38>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a33      	ldr	r2, [pc, #204]	@ (8003d78 <TIM_Base_SetConfig+0xf8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_Base_SetConfig+0x38>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a32      	ldr	r2, [pc, #200]	@ (8003d7c <TIM_Base_SetConfig+0xfc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d108      	bne.n	8003cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a28      	ldr	r2, [pc, #160]	@ (8003d70 <TIM_Base_SetConfig+0xf0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01b      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd8:	d017      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a25      	ldr	r2, [pc, #148]	@ (8003d74 <TIM_Base_SetConfig+0xf4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a24      	ldr	r2, [pc, #144]	@ (8003d78 <TIM_Base_SetConfig+0xf8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a23      	ldr	r2, [pc, #140]	@ (8003d7c <TIM_Base_SetConfig+0xfc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a22      	ldr	r2, [pc, #136]	@ (8003d80 <TIM_Base_SetConfig+0x100>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a21      	ldr	r2, [pc, #132]	@ (8003d84 <TIM_Base_SetConfig+0x104>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a20      	ldr	r2, [pc, #128]	@ (8003d88 <TIM_Base_SetConfig+0x108>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d70 <TIM_Base_SetConfig+0xf0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d103      	bne.n	8003d4a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f043 0204 	orr.w	r2, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800

08003d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f023 0201 	bic.w	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 0302 	bic.w	r3, r3, #2
 8003dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e54 <TIM_OC1_SetConfig+0xc8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d10c      	bne.n	8003e02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0308 	bic.w	r3, r3, #8
 8003dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <TIM_OC1_SetConfig+0xc8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d111      	bne.n	8003e2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40010000 	.word	0x40010000

08003e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f023 0210 	bic.w	r2, r3, #16
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0320 	bic.w	r3, r3, #32
 8003ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <TIM_OC2_SetConfig+0xd4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d10d      	bne.n	8003ed4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <TIM_OC2_SetConfig+0xd4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d113      	bne.n	8003f04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000

08003f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1d      	ldr	r2, [pc, #116]	@ (8004000 <TIM_OC3_SetConfig+0xd0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10d      	bne.n	8003faa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a14      	ldr	r2, [pc, #80]	@ (8004000 <TIM_OC3_SetConfig+0xd0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d113      	bne.n	8003fda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40010000 	.word	0x40010000

08004004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800404e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	031b      	lsls	r3, r3, #12
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a10      	ldr	r2, [pc, #64]	@ (80040a0 <TIM_OC4_SetConfig+0x9c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d109      	bne.n	8004078 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800406a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000

080040a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 030a 	bic.w	r3, r3, #10
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004102:	b480      	push	{r7}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 0210 	bic.w	r2, r3, #16
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800412c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	031b      	lsls	r3, r3, #12
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800413e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	f043 0307 	orr.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	021a      	lsls	r2, r3, #8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4313      	orrs	r3, r2
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2201      	movs	r2, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1a      	ldr	r2, [r3, #32]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	401a      	ands	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1a      	ldr	r2, [r3, #32]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004238:	2302      	movs	r3, #2
 800423a:	e050      	b.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d018      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004288:	d013      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a15      	ldr	r2, [pc, #84]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a13      	ldr	r2, [pc, #76]	@ (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d10c      	bne.n	80042cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40014000 	.word	0x40014000

08004300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004318:	2302      	movs	r3, #2
 800431a:	e03d      	b.n	8004398 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e042      	b.n	8004464 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc fcea 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	@ 0x24
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800440e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fcef 	bl	8004df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	d112      	bne.n	80044ac <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_UART_Receive_IT+0x26>
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e00b      	b.n	80044ae <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	461a      	mov	r2, r3
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fad2 	bl	8004a4c <UART_Start_Receive_IT>
 80044a8:	4603      	mov	r3, r0
 80044aa:	e000      	b.n	80044ae <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b0ba      	sub	sp, #232	@ 0xe8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80044f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <HAL_UART_IRQHandler+0x66>
 800450a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fbae 	bl	8004c78 <UART_Receive_IT>
      return;
 800451c:	e273      	b.n	8004a06 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800451e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80de 	beq.w	80046e4 <HAL_UART_IRQHandler+0x22c>
 8004528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004538:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80d1 	beq.w	80046e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_UART_IRQHandler+0xae>
 800454e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455e:	f043 0201 	orr.w	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_UART_IRQHandler+0xd2>
 8004572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004582:	f043 0202 	orr.w	r2, r3, #2
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_UART_IRQHandler+0xf6>
 8004596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	f043 0204 	orr.w	r2, r3, #4
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d011      	beq.n	80045de <HAL_UART_IRQHandler+0x126>
 80045ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d105      	bne.n	80045d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d6:	f043 0208 	orr.w	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 820a 	beq.w	80049fc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_UART_IRQHandler+0x14e>
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fb39 	bl	8004c78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004610:	2b40      	cmp	r3, #64	@ 0x40
 8004612:	bf0c      	ite	eq
 8004614:	2301      	moveq	r3, #1
 8004616:	2300      	movne	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d103      	bne.n	8004632 <HAL_UART_IRQHandler+0x17a>
 800462a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04f      	beq.n	80046d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fa44 	bl	8004ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004642:	2b40      	cmp	r3, #64	@ 0x40
 8004644:	d141      	bne.n	80046ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3314      	adds	r3, #20
 800464c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800465c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3314      	adds	r3, #20
 800466e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004672:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800467e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800468a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1d9      	bne.n	8004646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d013      	beq.n	80046c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	4a8a      	ldr	r2, [pc, #552]	@ (80048c8 <HAL_UART_IRQHandler+0x410>)
 80046a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd fb31 	bl	8001d0e <HAL_DMA_Abort_IT>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046bc:	4610      	mov	r0, r2
 80046be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c0:	e00e      	b.n	80046e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f9ac 	bl	8004a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c8:	e00a      	b.n	80046e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f9a8 	bl	8004a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d0:	e006      	b.n	80046e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f9a4 	bl	8004a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80046de:	e18d      	b.n	80049fc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	bf00      	nop
    return;
 80046e2:	e18b      	b.n	80049fc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	f040 8167 	bne.w	80049bc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8160 	beq.w	80049bc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80046fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8159 	beq.w	80049bc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472a:	2b40      	cmp	r3, #64	@ 0x40
 800472c:	f040 80ce 	bne.w	80048cc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800473c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a9 	beq.w	8004898 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800474a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800474e:	429a      	cmp	r2, r3
 8004750:	f080 80a2 	bcs.w	8004898 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800475a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004766:	f000 8088 	beq.w	800487a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	330c      	adds	r3, #12
 8004792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800479a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1d9      	bne.n	800476a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3314      	adds	r3, #20
 80047d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e1      	bne.n	80047b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3314      	adds	r3, #20
 80047f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3314      	adds	r3, #20
 8004812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800481c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e3      	bne.n	80047f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800484a:	f023 0310 	bic.w	r3, r3, #16
 800484e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800485c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800485e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004862:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800486a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e3      	bne.n	8004838 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004874:	4618      	mov	r0, r3
 8004876:	f7fd f9da 	bl	8001c2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2202      	movs	r2, #2
 800487e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004888:	b29b      	uxth	r3, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	b29b      	uxth	r3, r3
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f8cf 	bl	8004a34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004896:	e0b3      	b.n	8004a00 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800489c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048a0:	429a      	cmp	r2, r3
 80048a2:	f040 80ad 	bne.w	8004a00 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b0:	f040 80a6 	bne.w	8004a00 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048be:	4619      	mov	r1, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8b7 	bl	8004a34 <HAL_UARTEx_RxEventCallback>
      return;
 80048c6:	e09b      	b.n	8004a00 <HAL_UART_IRQHandler+0x548>
 80048c8:	08004b87 	.word	0x08004b87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 808e 	beq.w	8004a04 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80048e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8089 	beq.w	8004a04 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004908:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004916:	647a      	str	r2, [r7, #68]	@ 0x44
 8004918:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800491c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e3      	bne.n	80048f2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3314      	adds	r3, #20
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	623b      	str	r3, [r7, #32]
   return(result);
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3314      	adds	r3, #20
 800494a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800494e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004950:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e3      	bne.n	800492a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0310 	bic.w	r3, r3, #16
 8004986:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004994:	61fa      	str	r2, [r7, #28]
 8004996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	69b9      	ldr	r1, [r7, #24]
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	617b      	str	r3, [r7, #20]
   return(result);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e3      	bne.n	8004970 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f83d 	bl	8004a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ba:	e023      	b.n	8004a04 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <HAL_UART_IRQHandler+0x524>
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f8e7 	bl	8004ba8 <UART_Transmit_IT>
    return;
 80049da:	e014      	b.n	8004a06 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00e      	beq.n	8004a06 <HAL_UART_IRQHandler+0x54e>
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f927 	bl	8004c48 <UART_EndTransmit_IT>
    return;
 80049fa:	e004      	b.n	8004a06 <HAL_UART_IRQHandler+0x54e>
    return;
 80049fc:	bf00      	nop
 80049fe:	e002      	b.n	8004a06 <HAL_UART_IRQHandler+0x54e>
      return;
 8004a00:	bf00      	nop
 8004a02:	e000      	b.n	8004a06 <HAL_UART_IRQHandler+0x54e>
      return;
 8004a04:	bf00      	nop
  }
}
 8004a06:	37e8      	adds	r7, #232	@ 0xe8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2222      	movs	r2, #34	@ 0x22
 8004a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a90:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0220 	orr.w	r2, r2, #32
 8004ab0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b095      	sub	sp, #84	@ 0x54
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ae8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3314      	adds	r3, #20
 8004b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e5      	bne.n	8004afc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d119      	bne.n	8004b6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 0310 	bic.w	r3, r3, #16
 8004b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b58:	61ba      	str	r2, [r7, #24]
 8004b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	613b      	str	r3, [r7, #16]
   return(result);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e5      	bne.n	8004b38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b7a:	bf00      	nop
 8004b7c:	3754      	adds	r7, #84	@ 0x54
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff ff40 	bl	8004a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b21      	cmp	r3, #33	@ 0x21
 8004bba:	d13e      	bne.n	8004c3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc4:	d114      	bne.n	8004bf0 <UART_Transmit_IT+0x48>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d110      	bne.n	8004bf0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	1c9a      	adds	r2, r3, #2
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	621a      	str	r2, [r3, #32]
 8004bee:	e008      	b.n	8004c02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	1c59      	adds	r1, r3, #1
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6211      	str	r1, [r2, #32]
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff fecf 	bl	8004a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	@ 0x30
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b22      	cmp	r3, #34	@ 0x22
 8004c92:	f040 80aa 	bne.w	8004dea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9e:	d115      	bne.n	8004ccc <UART_Receive_IT+0x54>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d111      	bne.n	8004ccc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	1c9a      	adds	r2, r3, #2
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cca:	e024      	b.n	8004d16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cda:	d007      	beq.n	8004cec <UART_Receive_IT+0x74>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <UART_Receive_IT+0x82>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	e008      	b.n	8004d0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4619      	mov	r1, r3
 8004d24:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d15d      	bne.n	8004de6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0220 	bic.w	r2, r2, #32
 8004d38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d135      	bne.n	8004ddc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	613b      	str	r3, [r7, #16]
   return(result);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f023 0310 	bic.w	r3, r3, #16
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	330c      	adds	r3, #12
 8004d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d96:	623a      	str	r2, [r7, #32]
 8004d98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	69f9      	ldr	r1, [r7, #28]
 8004d9c:	6a3a      	ldr	r2, [r7, #32]
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e5      	bne.n	8004d76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d10a      	bne.n	8004dce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff fe2d 	bl	8004a34 <HAL_UARTEx_RxEventCallback>
 8004dda:	e002      	b.n	8004de2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7fc f917 	bl	8001010 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e002      	b.n	8004dec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
  }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3730      	adds	r7, #48	@ 0x30
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df8:	b0c0      	sub	sp, #256	@ 0x100
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e10:	68d9      	ldr	r1, [r3, #12]
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	ea40 0301 	orr.w	r3, r0, r1
 8004e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e4c:	f021 010c 	bic.w	r1, r1, #12
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6e:	6999      	ldr	r1, [r3, #24]
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	ea40 0301 	orr.w	r3, r0, r1
 8004e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b8f      	ldr	r3, [pc, #572]	@ (80050c0 <UART_SetConfig+0x2cc>)
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d005      	beq.n	8004e94 <UART_SetConfig+0xa0>
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b8d      	ldr	r3, [pc, #564]	@ (80050c4 <UART_SetConfig+0x2d0>)
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d104      	bne.n	8004e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e94:	f7fe fa1e 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8004e98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e9c:	e003      	b.n	8004ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e9e:	f7fe fa05 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb0:	f040 810c 	bne.w	80050cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	462b      	mov	r3, r5
 8004eca:	1891      	adds	r1, r2, r2
 8004ecc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ece:	415b      	adcs	r3, r3
 8004ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	eb12 0801 	adds.w	r8, r2, r1
 8004edc:	4629      	mov	r1, r5
 8004ede:	eb43 0901 	adc.w	r9, r3, r1
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ef6:	4690      	mov	r8, r2
 8004ef8:	4699      	mov	r9, r3
 8004efa:	4623      	mov	r3, r4
 8004efc:	eb18 0303 	adds.w	r3, r8, r3
 8004f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f04:	462b      	mov	r3, r5
 8004f06:	eb49 0303 	adc.w	r3, r9, r3
 8004f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f22:	460b      	mov	r3, r1
 8004f24:	18db      	adds	r3, r3, r3
 8004f26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f28:	4613      	mov	r3, r2
 8004f2a:	eb42 0303 	adc.w	r3, r2, r3
 8004f2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f38:	f7fb f94e 	bl	80001d8 <__aeabi_uldivmod>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4b61      	ldr	r3, [pc, #388]	@ (80050c8 <UART_SetConfig+0x2d4>)
 8004f42:	fba3 2302 	umull	r2, r3, r3, r2
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	011c      	lsls	r4, r3, #4
 8004f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	464b      	mov	r3, r9
 8004f60:	1891      	adds	r1, r2, r2
 8004f62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f64:	415b      	adcs	r3, r3
 8004f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f72:	4649      	mov	r1, r9
 8004f74:	eb43 0b01 	adc.w	fp, r3, r1
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8c:	4692      	mov	sl, r2
 8004f8e:	469b      	mov	fp, r3
 8004f90:	4643      	mov	r3, r8
 8004f92:	eb1a 0303 	adds.w	r3, sl, r3
 8004f96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8004fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	18db      	adds	r3, r3, r3
 8004fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	eb42 0303 	adc.w	r3, r2, r3
 8004fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fce:	f7fb f903 	bl	80001d8 <__aeabi_uldivmod>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80050c8 <UART_SetConfig+0x2d4>)
 8004fda:	fba3 2301 	umull	r2, r3, r3, r1
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	2264      	movs	r2, #100	@ 0x64
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	1acb      	subs	r3, r1, r3
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fee:	4b36      	ldr	r3, [pc, #216]	@ (80050c8 <UART_SetConfig+0x2d4>)
 8004ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ffc:	441c      	add	r4, r3
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005008:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800500c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	1891      	adds	r1, r2, r2
 8005016:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005018:	415b      	adcs	r3, r3
 800501a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800501c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005020:	4641      	mov	r1, r8
 8005022:	1851      	adds	r1, r2, r1
 8005024:	6339      	str	r1, [r7, #48]	@ 0x30
 8005026:	4649      	mov	r1, r9
 8005028:	414b      	adcs	r3, r1
 800502a:	637b      	str	r3, [r7, #52]	@ 0x34
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005038:	4659      	mov	r1, fp
 800503a:	00cb      	lsls	r3, r1, #3
 800503c:	4651      	mov	r1, sl
 800503e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005042:	4651      	mov	r1, sl
 8005044:	00ca      	lsls	r2, r1, #3
 8005046:	4610      	mov	r0, r2
 8005048:	4619      	mov	r1, r3
 800504a:	4603      	mov	r3, r0
 800504c:	4642      	mov	r2, r8
 800504e:	189b      	adds	r3, r3, r2
 8005050:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005054:	464b      	mov	r3, r9
 8005056:	460a      	mov	r2, r1
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800506c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005074:	460b      	mov	r3, r1
 8005076:	18db      	adds	r3, r3, r3
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800507a:	4613      	mov	r3, r2
 800507c:	eb42 0303 	adc.w	r3, r2, r3
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800508a:	f7fb f8a5 	bl	80001d8 <__aeabi_uldivmod>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4b0d      	ldr	r3, [pc, #52]	@ (80050c8 <UART_SetConfig+0x2d4>)
 8005094:	fba3 1302 	umull	r1, r3, r3, r2
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	2164      	movs	r1, #100	@ 0x64
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	3332      	adds	r3, #50	@ 0x32
 80050a6:	4a08      	ldr	r2, [pc, #32]	@ (80050c8 <UART_SetConfig+0x2d4>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	f003 0207 	and.w	r2, r3, #7
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4422      	add	r2, r4
 80050ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050bc:	e106      	b.n	80052cc <UART_SetConfig+0x4d8>
 80050be:	bf00      	nop
 80050c0:	40011000 	.word	0x40011000
 80050c4:	40011400 	.word	0x40011400
 80050c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050de:	4642      	mov	r2, r8
 80050e0:	464b      	mov	r3, r9
 80050e2:	1891      	adds	r1, r2, r2
 80050e4:	6239      	str	r1, [r7, #32]
 80050e6:	415b      	adcs	r3, r3
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ee:	4641      	mov	r1, r8
 80050f0:	1854      	adds	r4, r2, r1
 80050f2:	4649      	mov	r1, r9
 80050f4:	eb43 0501 	adc.w	r5, r3, r1
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	00eb      	lsls	r3, r5, #3
 8005102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005106:	00e2      	lsls	r2, r4, #3
 8005108:	4614      	mov	r4, r2
 800510a:	461d      	mov	r5, r3
 800510c:	4643      	mov	r3, r8
 800510e:	18e3      	adds	r3, r4, r3
 8005110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005114:	464b      	mov	r3, r9
 8005116:	eb45 0303 	adc.w	r3, r5, r3
 800511a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800512a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800513a:	4629      	mov	r1, r5
 800513c:	008b      	lsls	r3, r1, #2
 800513e:	4621      	mov	r1, r4
 8005140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005144:	4621      	mov	r1, r4
 8005146:	008a      	lsls	r2, r1, #2
 8005148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800514c:	f7fb f844 	bl	80001d8 <__aeabi_uldivmod>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4b60      	ldr	r3, [pc, #384]	@ (80052d8 <UART_SetConfig+0x4e4>)
 8005156:	fba3 2302 	umull	r2, r3, r3, r2
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	011c      	lsls	r4, r3, #4
 800515e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005168:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800516c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005170:	4642      	mov	r2, r8
 8005172:	464b      	mov	r3, r9
 8005174:	1891      	adds	r1, r2, r2
 8005176:	61b9      	str	r1, [r7, #24]
 8005178:	415b      	adcs	r3, r3
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005180:	4641      	mov	r1, r8
 8005182:	1851      	adds	r1, r2, r1
 8005184:	6139      	str	r1, [r7, #16]
 8005186:	4649      	mov	r1, r9
 8005188:	414b      	adcs	r3, r1
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005198:	4659      	mov	r1, fp
 800519a:	00cb      	lsls	r3, r1, #3
 800519c:	4651      	mov	r1, sl
 800519e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a2:	4651      	mov	r1, sl
 80051a4:	00ca      	lsls	r2, r1, #3
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	4642      	mov	r2, r8
 80051ae:	189b      	adds	r3, r3, r2
 80051b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051b4:	464b      	mov	r3, r9
 80051b6:	460a      	mov	r2, r1
 80051b8:	eb42 0303 	adc.w	r3, r2, r3
 80051bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051d8:	4649      	mov	r1, r9
 80051da:	008b      	lsls	r3, r1, #2
 80051dc:	4641      	mov	r1, r8
 80051de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e2:	4641      	mov	r1, r8
 80051e4:	008a      	lsls	r2, r1, #2
 80051e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051ea:	f7fa fff5 	bl	80001d8 <__aeabi_uldivmod>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4611      	mov	r1, r2
 80051f4:	4b38      	ldr	r3, [pc, #224]	@ (80052d8 <UART_SetConfig+0x4e4>)
 80051f6:	fba3 2301 	umull	r2, r3, r3, r1
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	2264      	movs	r2, #100	@ 0x64
 80051fe:	fb02 f303 	mul.w	r3, r2, r3
 8005202:	1acb      	subs	r3, r1, r3
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	3332      	adds	r3, #50	@ 0x32
 8005208:	4a33      	ldr	r2, [pc, #204]	@ (80052d8 <UART_SetConfig+0x4e4>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005214:	441c      	add	r4, r3
 8005216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800521a:	2200      	movs	r2, #0
 800521c:	673b      	str	r3, [r7, #112]	@ 0x70
 800521e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005220:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005224:	4642      	mov	r2, r8
 8005226:	464b      	mov	r3, r9
 8005228:	1891      	adds	r1, r2, r2
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	415b      	adcs	r3, r3
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005234:	4641      	mov	r1, r8
 8005236:	1851      	adds	r1, r2, r1
 8005238:	6039      	str	r1, [r7, #0]
 800523a:	4649      	mov	r1, r9
 800523c:	414b      	adcs	r3, r1
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800524c:	4659      	mov	r1, fp
 800524e:	00cb      	lsls	r3, r1, #3
 8005250:	4651      	mov	r1, sl
 8005252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005256:	4651      	mov	r1, sl
 8005258:	00ca      	lsls	r2, r1, #3
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	4603      	mov	r3, r0
 8005260:	4642      	mov	r2, r8
 8005262:	189b      	adds	r3, r3, r2
 8005264:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005266:	464b      	mov	r3, r9
 8005268:	460a      	mov	r2, r1
 800526a:	eb42 0303 	adc.w	r3, r2, r3
 800526e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	663b      	str	r3, [r7, #96]	@ 0x60
 800527a:	667a      	str	r2, [r7, #100]	@ 0x64
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005288:	4649      	mov	r1, r9
 800528a:	008b      	lsls	r3, r1, #2
 800528c:	4641      	mov	r1, r8
 800528e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005292:	4641      	mov	r1, r8
 8005294:	008a      	lsls	r2, r1, #2
 8005296:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800529a:	f7fa ff9d 	bl	80001d8 <__aeabi_uldivmod>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4b0d      	ldr	r3, [pc, #52]	@ (80052d8 <UART_SetConfig+0x4e4>)
 80052a4:	fba3 1302 	umull	r1, r3, r3, r2
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	2164      	movs	r1, #100	@ 0x64
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	3332      	adds	r3, #50	@ 0x32
 80052b6:	4a08      	ldr	r2, [pc, #32]	@ (80052d8 <UART_SetConfig+0x4e4>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	f003 020f 	and.w	r2, r3, #15
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4422      	add	r2, r4
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052d2:	46bd      	mov	sp, r7
 80052d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d8:	51eb851f 	.word	0x51eb851f

080052dc <memset>:
 80052dc:	4402      	add	r2, r0
 80052de:	4603      	mov	r3, r0
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d100      	bne.n	80052e6 <memset+0xa>
 80052e4:	4770      	bx	lr
 80052e6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ea:	e7f9      	b.n	80052e0 <memset+0x4>

080052ec <__libc_init_array>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005324 <__libc_init_array+0x38>)
 80052f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005328 <__libc_init_array+0x3c>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	2600      	movs	r6, #0
 80052f8:	42a6      	cmp	r6, r4
 80052fa:	d109      	bne.n	8005310 <__libc_init_array+0x24>
 80052fc:	4d0b      	ldr	r5, [pc, #44]	@ (800532c <__libc_init_array+0x40>)
 80052fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005330 <__libc_init_array+0x44>)
 8005300:	f000 f818 	bl	8005334 <_init>
 8005304:	1b64      	subs	r4, r4, r5
 8005306:	10a4      	asrs	r4, r4, #2
 8005308:	2600      	movs	r6, #0
 800530a:	42a6      	cmp	r6, r4
 800530c:	d105      	bne.n	800531a <__libc_init_array+0x2e>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	f855 3b04 	ldr.w	r3, [r5], #4
 8005314:	4798      	blx	r3
 8005316:	3601      	adds	r6, #1
 8005318:	e7ee      	b.n	80052f8 <__libc_init_array+0xc>
 800531a:	f855 3b04 	ldr.w	r3, [r5], #4
 800531e:	4798      	blx	r3
 8005320:	3601      	adds	r6, #1
 8005322:	e7f2      	b.n	800530a <__libc_init_array+0x1e>
 8005324:	08005378 	.word	0x08005378
 8005328:	08005378 	.word	0x08005378
 800532c:	08005378 	.word	0x08005378
 8005330:	0800537c 	.word	0x0800537c

08005334 <_init>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr

08005340 <_fini>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr
