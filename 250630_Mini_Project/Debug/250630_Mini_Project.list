
250630_Mini_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006680  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b8  080069b8  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080069b8  080069b8  000079b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069c0  080069c0  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c0  080069c0  000079c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069c4  080069c4  000079c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080069c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  2000006c  08006a34  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08006a34  00008410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166cf  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004273  00000000  00000000  0001e76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  000229e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f87  00000000  00000000  00023e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196f1  00000000  00000000  00024db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e32a  00000000  00000000  0003e4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d19  00000000  00000000  0005c7d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee4eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054ac  00000000  00000000  000ee530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000f39dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006808 	.word	0x08006808

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006808 	.word	0x08006808

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b49      	ldr	r3, [pc, #292]	@ (800071c <MX_GPIO_Init+0x140>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a48      	ldr	r2, [pc, #288]	@ (800071c <MX_GPIO_Init+0x140>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b46      	ldr	r3, [pc, #280]	@ (800071c <MX_GPIO_Init+0x140>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b42      	ldr	r3, [pc, #264]	@ (800071c <MX_GPIO_Init+0x140>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a41      	ldr	r2, [pc, #260]	@ (800071c <MX_GPIO_Init+0x140>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b3f      	ldr	r3, [pc, #252]	@ (800071c <MX_GPIO_Init+0x140>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b3b      	ldr	r3, [pc, #236]	@ (800071c <MX_GPIO_Init+0x140>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a3a      	ldr	r2, [pc, #232]	@ (800071c <MX_GPIO_Init+0x140>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b38      	ldr	r3, [pc, #224]	@ (800071c <MX_GPIO_Init+0x140>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b34      	ldr	r3, [pc, #208]	@ (800071c <MX_GPIO_Init+0x140>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a33      	ldr	r2, [pc, #204]	@ (800071c <MX_GPIO_Init+0x140>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b31      	ldr	r3, [pc, #196]	@ (800071c <MX_GPIO_Init+0x140>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 51d1 	mov.w	r1, #6688	@ 0x1a20
 8000668:	482d      	ldr	r0, [pc, #180]	@ (8000720 <MX_GPIO_Init+0x144>)
 800066a:	f002 f987 	bl	800297c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8000674:	482b      	ldr	r0, [pc, #172]	@ (8000724 <MX_GPIO_Init+0x148>)
 8000676:	f002 f981 	bl	800297c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800067a:	2200      	movs	r2, #0
 800067c:	f24f 0146 	movw	r1, #61510	@ 0xf046
 8000680:	4829      	ldr	r0, [pc, #164]	@ (8000728 <MX_GPIO_Init+0x14c>)
 8000682:	f002 f97b 	bl	800297c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000686:	f44f 53d1 	mov.w	r3, #6688	@ 0x1a20
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4820      	ldr	r0, [pc, #128]	@ (8000720 <MX_GPIO_Init+0x144>)
 80006a0:	f001 ffd0 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80006a4:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4819      	ldr	r0, [pc, #100]	@ (8000720 <MX_GPIO_Init+0x144>)
 80006ba:	f001 ffc3 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80006be:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 80006c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	4813      	ldr	r0, [pc, #76]	@ (8000724 <MX_GPIO_Init+0x148>)
 80006d8:	f001 ffb4 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80006dc:	f24f 0346 	movw	r3, #61510	@ 0xf046
 80006e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <MX_GPIO_Init+0x14c>)
 80006f6:	f001 ffa5 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006fa:	2328      	movs	r3, #40	@ 0x28
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	4806      	ldr	r0, [pc, #24]	@ (8000728 <MX_GPIO_Init+0x14c>)
 800070e:	f001 ff99 	bl	8002644 <HAL_GPIO_Init>

}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	@ 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800
 8000728:	40020400 	.word	0x40020400

0800072c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_I2C1_Init+0x50>)
 800076a:	f002 f921 	bl	80029b0 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f8d0 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000088 	.word	0x20000088
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a19      	ldr	r2, [pc, #100]	@ (800080c <HAL_I2C_MspInit+0x84>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d12c      	bne.n	8000804 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <HAL_I2C_MspInit+0x88>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a17      	ldr	r2, [pc, #92]	@ (8000810 <HAL_I2C_MspInit+0x88>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <HAL_I2C_MspInit+0x88>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007cc:	2312      	movs	r3, #18
 80007ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d8:	2304      	movs	r3, #4
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	480c      	ldr	r0, [pc, #48]	@ (8000814 <HAL_I2C_MspInit+0x8c>)
 80007e4:	f001 ff2e 	bl	8002644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <HAL_I2C_MspInit+0x88>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f0:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <HAL_I2C_MspInit+0x88>)
 80007f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <HAL_I2C_MspInit+0x88>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	@ 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40005400 	.word	0x40005400
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f001 fcd8 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f812 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f7ff feda 	bl	80005dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000828:	f000 f9d0 	bl	8000bcc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800082c:	f000 fb46 	bl	8000ebc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000830:	f7ff ff7c 	bl	800072c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000834:	f000 fa16 	bl	8000c64 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000838:	f000 f928 	bl	8000a8c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 800083c:	f001 f85c 	bl	80018f8 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000840:	f001 f84a 	bl	80018d8 <ap_main>
 8000844:	e7fc      	b.n	8000840 <main+0x28>
	...

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	@ 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	@ 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fb58 	bl	8005f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <SystemClock_Config+0xc8>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	4a26      	ldr	r2, [pc, #152]	@ (8000910 <SystemClock_Config+0xc8>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	@ 0x40
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <SystemClock_Config+0xc8>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <SystemClock_Config+0xcc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a20      	ldr	r2, [pc, #128]	@ (8000914 <SystemClock_Config+0xcc>)
 8000892:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <SystemClock_Config+0xcc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008bc:	2364      	movs	r3, #100	@ 0x64
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fd0d 	bl	80032ec <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d8:	f000 f81e 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2103      	movs	r1, #3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 ff6f 	bl	80037dc <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000904:	f000 f808 	bl	8000918 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3750      	adds	r7, #80	@ 0x50
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	@ (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000938:	6453      	str	r3, [r2, #68]	@ 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <NMI_Handler+0x4>

0800097c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <MemManage_Handler+0x4>

0800098c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <UsageFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f001 fc53 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <TIM2_IRQHandler+0x10>)
 80009da:	f003 fbc1 	bl	8004160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000128 	.word	0x20000128

080009e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <USART2_IRQHandler+0x10>)
 80009ee:	f004 faff 	bl	8004ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001b8 	.word	0x200001b8

080009fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	4a14      	ldr	r2, [pc, #80]	@ (8000a58 <_sbrk+0x5c>)
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <_sbrk+0x60>)
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a10:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <_sbrk+0x64>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <_sbrk+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d207      	bcs.n	8000a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a2c:	f005 fa76 	bl	8005f1c <__errno>
 8000a30:	4603      	mov	r3, r0
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	e009      	b.n	8000a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a42:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <_sbrk+0x64>)
 8000a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20020000 	.word	0x20020000
 8000a5c:	00000400 	.word	0x00000400
 8000a60:	200000dc 	.word	0x200000dc
 8000a64:	20000410 	.word	0x20000410

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b096      	sub	sp, #88	@ 0x58
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2220      	movs	r2, #32
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fa21 	bl	8005f0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aca:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000acc:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc8 <MX_TIM1_Init+0x13c>)
 8000ace:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000ad0:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000ad2:	2263      	movs	r2, #99	@ 0x63
 8000ad4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000adc:	4b39      	ldr	r3, [pc, #228]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000ade:	2263      	movs	r2, #99	@ 0x63
 8000ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	4b38      	ldr	r3, [pc, #224]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae8:	4b36      	ldr	r3, [pc, #216]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aee:	4b35      	ldr	r3, [pc, #212]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af4:	4833      	ldr	r0, [pc, #204]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000af6:	f003 f891 	bl	8003c1c <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b00:	f7ff ff0a 	bl	8000918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b08:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482c      	ldr	r0, [pc, #176]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000b12:	f003 fcd7 	bl	80044c4 <HAL_TIM_ConfigClockSource>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b1c:	f7ff fefc 	bl	8000918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b20:	4828      	ldr	r0, [pc, #160]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000b22:	f003 f9af 	bl	8003e84 <HAL_TIM_PWM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b2c:	f7ff fef4 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4821      	ldr	r0, [pc, #132]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000b40:	f004 f882 	bl	8004c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b4a:	f7ff fee5 	bl	8000918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4e:	2360      	movs	r3, #96	@ 0x60
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50-1;
 8000b52:	2331      	movs	r3, #49	@ 0x31
 8000b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4619      	mov	r1, r3
 8000b72:	4814      	ldr	r0, [pc, #80]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000b74:	f003 fbe4 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b7e:	f7ff fecb 	bl	8000918 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4807      	ldr	r0, [pc, #28]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000ba6:	f004 f8bd 	bl	8004d24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000bb0:	f7ff feb2 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <MX_TIM1_Init+0x138>)
 8000bb6:	f000 f91f 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 8000bba:	bf00      	nop
 8000bbc:	3758      	adds	r7, #88	@ 0x58
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000e0 	.word	0x200000e0
 8000bc8:	40010000 	.word	0x40010000

08000bcc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <MX_TIM2_Init+0x94>)
 8000bea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <MX_TIM2_Init+0x94>)
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_TIM2_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <MX_TIM2_Init+0x94>)
 8000bfe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <MX_TIM2_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <MX_TIM2_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c10:	4813      	ldr	r0, [pc, #76]	@ (8000c60 <MX_TIM2_Init+0x94>)
 8000c12:	f003 f803 	bl	8003c1c <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c1c:	f7ff fe7c 	bl	8000918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <MX_TIM2_Init+0x94>)
 8000c2e:	f003 fc49 	bl	80044c4 <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c38:	f7ff fe6e 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_TIM2_Init+0x94>)
 8000c4a:	f003 fffd 	bl	8004c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f7ff fe60 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000128 	.word	0x20000128

08000c64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	@ 0x38
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c94:	4b2d      	ldr	r3, [pc, #180]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000c96:	4a2e      	ldr	r2, [pc, #184]	@ (8000d50 <MX_TIM3_Init+0xec>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000c9c:	2263      	movs	r2, #99	@ 0x63
 8000c9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ca6:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000ca8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cba:	4824      	ldr	r0, [pc, #144]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000cbc:	f002 ffae 	bl	8003c1c <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000cc6:	f7ff fe27 	bl	8000918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481d      	ldr	r0, [pc, #116]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000cd8:	f003 fbf4 	bl	80044c4 <HAL_TIM_ConfigClockSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ce2:	f7ff fe19 	bl	8000918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ce6:	4819      	ldr	r0, [pc, #100]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000ce8:	f003 f8cc 	bl	8003e84 <HAL_TIM_PWM_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cf2:	f7ff fe11 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	4619      	mov	r1, r3
 8000d04:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000d06:	f003 ff9f 	bl	8004c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d10:	f7ff fe02 	bl	8000918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d14:	2360      	movs	r3, #96	@ 0x60
 8000d16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000d18:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000d1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000d2e:	f003 fb07 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d38:	f7ff fdee 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <MX_TIM3_Init+0xe8>)
 8000d3e:	f000 f85b 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 8000d42:	bf00      	nop
 8000d44:	3738      	adds	r7, #56	@ 0x38
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000170 	.word	0x20000170
 8000d50:	40000400 	.word	0x40000400

08000d54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a22      	ldr	r2, [pc, #136]	@ (8000dec <HAL_TIM_Base_MspInit+0x98>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d10e      	bne.n	8000d84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	4a20      	ldr	r2, [pc, #128]	@ (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d76:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d82:	e02e      	b.n	8000de2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d8c:	d116      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a16      	ldr	r2, [pc, #88]	@ (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	201c      	movs	r0, #28
 8000db0:	f001 fb7f 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db4:	201c      	movs	r0, #28
 8000db6:	f001 fb98 	bl	80024ea <HAL_NVIC_EnableIRQ>
}
 8000dba:	e012      	b.n	8000de2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000df4 <HAL_TIM_Base_MspInit+0xa0>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10d      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	@ (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_TIM_Base_MspInit+0x9c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40010000 	.word	0x40010000
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40000400 	.word	0x40000400

08000df8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a24      	ldr	r2, [pc, #144]	@ (8000ea8 <HAL_TIM_MspPostInit+0xb0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d11f      	bne.n	8000e5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <HAL_TIM_MspPostInit+0xb4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a22      	ldr	r2, [pc, #136]	@ (8000eac <HAL_TIM_MspPostInit+0xb4>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <HAL_TIM_MspPostInit+0xb4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4817      	ldr	r0, [pc, #92]	@ (8000eb0 <HAL_TIM_MspPostInit+0xb8>)
 8000e54:	f001 fbf6 	bl	8002644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e58:	e022      	b.n	8000ea0 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a15      	ldr	r2, [pc, #84]	@ (8000eb4 <HAL_TIM_MspPostInit+0xbc>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d11d      	bne.n	8000ea0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <HAL_TIM_MspPostInit+0xb4>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_TIM_MspPostInit+0xb4>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_TIM_MspPostInit+0xb4>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e80:	2310      	movs	r3, #16
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e90:	2302      	movs	r3, #2
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4807      	ldr	r0, [pc, #28]	@ (8000eb8 <HAL_TIM_MspPostInit+0xc0>)
 8000e9c:	f001 fbd2 	bl	8002644 <HAL_GPIO_Init>
}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	@ 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40010000 	.word	0x40010000
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40000400 	.word	0x40000400
 8000eb8:	40020400 	.word	0x40020400

08000ebc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <MX_USART2_UART_Init+0x50>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	f003 ff7c 	bl	8004df0 <HAL_UART_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000efe:	f7ff fd0b 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200001b8 	.word	0x200001b8
 8000f0c:	40004400 	.word	0x40004400

08000f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa4 <HAL_UART_MspInit+0x94>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d133      	bne.n	8000f9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <HAL_UART_MspInit+0x98>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <HAL_UART_MspInit+0x98>)
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <HAL_UART_MspInit+0x98>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_UART_MspInit+0x98>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a14      	ldr	r2, [pc, #80]	@ (8000fa8 <HAL_UART_MspInit+0x98>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_UART_MspInit+0x98>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4809      	ldr	r0, [pc, #36]	@ (8000fac <HAL_UART_MspInit+0x9c>)
 8000f86:	f001 fb5d 	bl	8002644 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2026      	movs	r0, #38	@ 0x26
 8000f90:	f001 fa8f 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f94:	2026      	movs	r0, #38	@ 0x26
 8000f96:	f001 faa8 	bl	80024ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	@ 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40004400 	.word	0x40004400
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb4:	f7ff fd58 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f004 ffa3 	bl	8005f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fc19 	bl	8000818 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ff4:	080069c8 	.word	0x080069c8
  ldr r2, =_sbss
 8000ff8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ffc:	20000410 	.word	0x20000410

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>

08001002 <Controller_Excute>:
inputData_TypeDef controlData = {};
static safeModeState_t modeState = S_LOG_IN;


void Controller_Excute()
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
	Controller_Mode();
 8001006:	f000 f81b 	bl	8001040 <Controller_Mode>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <Controller_SetInputData>:

void Controller_SetInputData(inputData_TypeDef inputData)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	463b      	mov	r3, r7
 8001018:	e883 0003 	stmia.w	r3, {r0, r1}
	if (inputData.id == MODE) {
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d105      	bne.n	800102e <Controller_SetInputData+0x1e>
		controlData.id = MODE;
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <Controller_SetInputData+0x2c>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
		controlData.data = MODE_ACT;
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <Controller_SetInputData+0x2c>)
 800102a:	2201      	movs	r2, #1
 800102c:	605a      	str	r2, [r3, #4]
	}
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000204 	.word	0x20000204

08001040 <Controller_Mode>:


void Controller_Mode()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	switch(modeState)
 8001044:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <Controller_Mode+0x68>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <Controller_Mode+0x12>
 800104c:	2b01      	cmp	r3, #1
 800104e:	d014      	beq.n	800107a <Controller_Mode+0x3a>
		}
		Security_Excute();
		break;

	}
}
 8001050:	e027      	b.n	80010a2 <Controller_Mode+0x62>
		if (controlData.id == MODE) {
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <Controller_Mode+0x6c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d10c      	bne.n	8001074 <Controller_Mode+0x34>
			controlData.id = NO_CONTROL;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <Controller_Mode+0x6c>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
			modeState = S_SECURITY;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <Controller_Mode+0x68>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
			stateData.state = P_LOG;
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <Controller_Mode+0x70>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
			 Presenter_UL_StateData(stateData);
 800106c:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <Controller_Mode+0x70>)
 800106e:	7818      	ldrb	r0, [r3, #0]
 8001070:	f000 f952 	bl	8001318 <Presenter_UL_StateData>
		Login_Execute();
 8001074:	f000 fc48 	bl	8001908 <Login_Execute>
		break;
 8001078:	e013      	b.n	80010a2 <Controller_Mode+0x62>
		if (controlData.id == MODE) {
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <Controller_Mode+0x6c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10c      	bne.n	800109c <Controller_Mode+0x5c>
			controlData.id = NO_CONTROL;
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <Controller_Mode+0x6c>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
			modeState = S_LOG_IN;
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <Controller_Mode+0x68>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
			stateData.state = P_SEC;
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <Controller_Mode+0x70>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
			Presenter_UL_StateData(stateData);
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <Controller_Mode+0x70>)
 8001096:	7818      	ldrb	r0, [r3, #0]
 8001098:	f000 f93e 	bl	8001318 <Presenter_UL_StateData>
		Security_Excute();
 800109c:	f000 fb0c 	bl	80016b8 <Security_Excute>
		break;
 80010a0:	bf00      	nop
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000020c 	.word	0x2000020c
 80010ac:	20000204 	.word	0x20000204
 80010b0:	20000200 	.word	0x20000200

080010b4 <Listener_Init>:
static const char     correctPassword[PASS_LEN + 1] = "1234";
char           uartBuffer[PASS_LEN + 1];


void Listener_Init()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
   Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 80010b8:	2220      	movs	r2, #32
 80010ba:	4907      	ldr	r1, [pc, #28]	@ (80010d8 <Listener_Init+0x24>)
 80010bc:	4807      	ldr	r0, [pc, #28]	@ (80010dc <Listener_Init+0x28>)
 80010be:	f000 fe01 	bl	8001cc4 <Button_Init>
   Que_Init(&uartRxQue);
 80010c2:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <Listener_Init+0x2c>)
 80010c4:	f000 fce8 	bl	8001a98 <Que_Init>
   HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 80010c8:	2201      	movs	r2, #1
 80010ca:	4906      	ldr	r1, [pc, #24]	@ (80010e4 <Listener_Init+0x30>)
 80010cc:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <Listener_Init+0x34>)
 80010ce:	f003 ff6a 	bl	8004fa6 <HAL_UART_Receive_IT>
   //additional
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40020400 	.word	0x40020400
 80010dc:	2000029c 	.word	0x2000029c
 80010e0:	20000210 	.word	0x20000210
 80010e4:	2000020d 	.word	0x2000020d
 80010e8:	200001b8 	.word	0x200001b8

080010ec <Listener_Excute>:

void Listener_Excute()
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
   Listener_CheckButton();
 80010f0:	f000 f804 	bl	80010fc <Listener_CheckButton>
   Listener_CheckUart();
 80010f4:	f000 f82e 	bl	8001154 <Listener_CheckUart>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <Listener_CheckButton>:

void Listener_CheckButton()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
   static uint32_t prevChkBtnTime = 0;
   uint32_t curTick = HAL_GetTick();
 8001102:	f001 f8cb 	bl	800229c <HAL_GetTick>
 8001106:	6078      	str	r0, [r7, #4]
   if (curTick - prevChkBtnTime < 100) {
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <Listener_CheckButton+0x4c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b63      	cmp	r3, #99	@ 0x63
 8001112:	d914      	bls.n	800113e <Listener_CheckButton+0x42>
      return;
   }
   prevChkBtnTime = curTick;
 8001114:	4a0c      	ldr	r2, [pc, #48]	@ (8001148 <Listener_CheckButton+0x4c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]



   if (Button_GetState(&hBtnMode) == ACT_RELEASED) {
 800111a:	480c      	ldr	r0, [pc, #48]	@ (800114c <Listener_CheckButton+0x50>)
 800111c:	f000 fde8 	bl	8001cf0 <Button_GetState>
 8001120:	4603      	mov	r3, r0
 8001122:	2b02      	cmp	r3, #2
 8001124:	d10c      	bne.n	8001140 <Listener_CheckButton+0x44>
      inputData.id = MODE;
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <Listener_CheckButton+0x54>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
      inputData.data = MODE_ACT;
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <Listener_CheckButton+0x54>)
 800112e:	2201      	movs	r2, #1
 8001130:	605a      	str	r2, [r3, #4]
      Controller_SetInputData(inputData);
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <Listener_CheckButton+0x54>)
 8001134:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001138:	f7ff ff6a 	bl	8001010 <Controller_SetInputData>
 800113c:	e000      	b.n	8001140 <Listener_CheckButton+0x44>
      return;
 800113e:	bf00      	nop
   }

}
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000023c 	.word	0x2000023c
 800114c:	2000029c 	.word	0x2000029c
 8001150:	20000228 	.word	0x20000228

08001154 <Listener_CheckUart>:


void Listener_CheckUart() {
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	@ 0x38
 8001158:	af00      	add	r7, sp, #0
    int byte;

    while (!isQueEmpty(&uartRxQue)) {
 800115a:	e063      	b.n	8001224 <Listener_CheckUart+0xd0>
        byte = deQue(&uartRxQue);
 800115c:	4837      	ldr	r0, [pc, #220]	@ (800123c <Listener_CheckUart+0xe8>)
 800115e:	f000 fcfc 	bl	8001b5a <deQue>
 8001162:	6378      	str	r0, [r7, #52]	@ 0x34

        if (byte == 'm') {
 8001164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001166:	2b6d      	cmp	r3, #109	@ 0x6d
 8001168:	d10b      	bne.n	8001182 <Listener_CheckUart+0x2e>
            inputData.id = MODE;
 800116a:	4b35      	ldr	r3, [pc, #212]	@ (8001240 <Listener_CheckUart+0xec>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]
            inputData.data = MODE_ACT;
 8001170:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <Listener_CheckUart+0xec>)
 8001172:	2201      	movs	r2, #1
 8001174:	605a      	str	r2, [r3, #4]
            Controller_SetInputData(inputData);
 8001176:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <Listener_CheckUart+0xec>)
 8001178:	e893 0003 	ldmia.w	r3, {r0, r1}
 800117c:	f7ff ff48 	bl	8001010 <Controller_SetInputData>
            continue;
 8001180:	e050      	b.n	8001224 <Listener_CheckUart+0xd0>
        }

        if (byte == 'i') {
 8001182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001184:	2b69      	cmp	r3, #105	@ 0x69
 8001186:	d119      	bne.n	80011bc <Listener_CheckUart+0x68>
            login_controldata.data_pw_input = 1;
 8001188:	4b2e      	ldr	r3, [pc, #184]	@ (8001244 <Listener_CheckUart+0xf0>)
 800118a:	2201      	movs	r2, #1
 800118c:	605a      	str	r2, [r3, #4]
            bufPos = 0;
 800118e:	4b2e      	ldr	r3, [pc, #184]	@ (8001248 <Listener_CheckUart+0xf4>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
            char msg[50];
            sprintf(msg, "input success: %d\n", login_controldata.data_pw_input);
 8001194:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <Listener_CheckUart+0xf0>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	463b      	mov	r3, r7
 800119a:	492c      	ldr	r1, [pc, #176]	@ (800124c <Listener_CheckUart+0xf8>)
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fe93 	bl	8005ec8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 80011a2:	463b      	mov	r3, r7
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f825 	bl	80001f4 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4639      	mov	r1, r7
 80011b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b4:	4826      	ldr	r0, [pc, #152]	@ (8001250 <Listener_CheckUart+0xfc>)
 80011b6:	f003 fe6b 	bl	8004e90 <HAL_UART_Transmit>
            continue;  // <- 중요! 'i'가 숫자로도 처리되지 않게 방지
 80011ba:	e033      	b.n	8001224 <Listener_CheckUart+0xd0>
        }

        // 숫자 처리
        if (login_controldata.data_pw_input) {
 80011bc:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <Listener_CheckUart+0xf0>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d02f      	beq.n	8001224 <Listener_CheckUart+0xd0>
            if (byte >= '0' && byte <= '9' && bufPos < PASS_LEN) {
 80011c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80011c8:	dd23      	ble.n	8001212 <Listener_CheckUart+0xbe>
 80011ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011cc:	2b39      	cmp	r3, #57	@ 0x39
 80011ce:	dc20      	bgt.n	8001212 <Listener_CheckUart+0xbe>
 80011d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <Listener_CheckUart+0xf4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	dc1c      	bgt.n	8001212 <Listener_CheckUart+0xbe>
                uartBuffer[bufPos++] = byte;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <Listener_CheckUart+0xf4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	491a      	ldr	r1, [pc, #104]	@ (8001248 <Listener_CheckUart+0xf4>)
 80011e0:	600a      	str	r2, [r1, #0]
 80011e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011e4:	b2d1      	uxtb	r1, r2
 80011e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001254 <Listener_CheckUart+0x100>)
 80011e8:	54d1      	strb	r1, [r2, r3]
                char msg4[50];
                sprintf(msg4, "Password Input: %d\n", byte-48);
 80011ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ec:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80011f0:	463b      	mov	r3, r7
 80011f2:	4919      	ldr	r1, [pc, #100]	@ (8001258 <Listener_CheckUart+0x104>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 fe67 	bl	8005ec8 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t*)msg4, strlen(msg4), 1000);
 80011fa:	463b      	mov	r3, r7
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7fe fff9 	bl	80001f4 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	4639      	mov	r1, r7
 8001208:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120c:	4810      	ldr	r0, [pc, #64]	@ (8001250 <Listener_CheckUart+0xfc>)
 800120e:	f003 fe3f 	bl	8004e90 <HAL_UART_Transmit>
            }
            if (bufPos == PASS_LEN) {
 8001212:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <Listener_CheckUart+0xf4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d104      	bne.n	8001224 <Listener_CheckUart+0xd0>
                ComparePassword();
 800121a:	f000 f835 	bl	8001288 <ComparePassword>
                //login_controldata.data_pw_input = 0;
                bufPos = 0;
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <Listener_CheckUart+0xf4>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
    while (!isQueEmpty(&uartRxQue)) {
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <Listener_CheckUart+0xe8>)
 8001226:	f000 fc62 	bl	8001aee <isQueEmpty>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d095      	beq.n	800115c <Listener_CheckUart+0x8>
            }
        }
    }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3738      	adds	r7, #56	@ 0x38
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000210 	.word	0x20000210
 8001240:	20000228 	.word	0x20000228
 8001244:	20000284 	.word	0x20000284
 8001248:	20000230 	.word	0x20000230
 800124c:	08006820 	.word	0x08006820
 8001250:	200001b8 	.word	0x200001b8
 8001254:	20000234 	.word	0x20000234
 8001258:	08006834 	.word	0x08006834

0800125c <Listener_UartCallBack>:



void Listener_UartCallBack()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
   enQue(&uartRxQue, rcvData);
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <Listener_UartCallBack+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	@ (8001280 <Listener_UartCallBack+0x24>)
 8001268:	f000 fc54 	bl	8001b14 <enQue>
   HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 800126c:	2201      	movs	r2, #1
 800126e:	4903      	ldr	r1, [pc, #12]	@ (800127c <Listener_UartCallBack+0x20>)
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <Listener_UartCallBack+0x28>)
 8001272:	f003 fe98 	bl	8004fa6 <HAL_UART_Receive_IT>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000020d 	.word	0x2000020d
 8001280:	20000210 	.word	0x20000210
 8001284:	200001b8 	.word	0x200001b8

08001288 <ComparePassword>:


void ComparePassword() {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
   uartBuffer[PASS_LEN] = '\0';
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <ComparePassword+0x2c>)
 800128e:	2200      	movs	r2, #0
 8001290:	711a      	strb	r2, [r3, #4]
   if (strcmp(uartBuffer, correctPassword) == 0) {
 8001292:	4909      	ldr	r1, [pc, #36]	@ (80012b8 <ComparePassword+0x30>)
 8001294:	4807      	ldr	r0, [pc, #28]	@ (80012b4 <ComparePassword+0x2c>)
 8001296:	f7fe ffa3 	bl	80001e0 <strcmp>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <ComparePassword+0x20>
      login_controldata.data_pw_correct = 1;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <ComparePassword+0x34>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	609a      	str	r2, [r3, #8]
        //char msg2[50];
        //sprintf(msg2,"FAIL Opening\n");
        //HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2),1000);
        ////
   }
}
 80012a6:	e002      	b.n	80012ae <ComparePassword+0x26>
      login_controldata.data_pw_correct = 2;
 80012a8:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <ComparePassword+0x34>)
 80012aa:	2202      	movs	r2, #2
 80012ac:	609a      	str	r2, [r3, #8]
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000234 	.word	0x20000234
 80012b8:	08006980 	.word	0x08006980
 80012bc:	20000284 	.word	0x20000284

080012c0 <MotorRun_Init>:
#include "MotorRun.h"

void MotorRun_Init()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	Motor_Init(&htim1, TIM_CHANNEL_1);
 80012c4:	2100      	movs	r1, #0
 80012c6:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <MotorRun_Init+0x10>)
 80012c8:	f000 fe8e 	bl	8001fe8 <Motor_Init>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000e0 	.word	0x200000e0

080012d4 <MotorRUN_PowerOn>:

void MotorRUN_PowerOn()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	Motor_SetFreq(100); //do
 80012d8:	2064      	movs	r0, #100	@ 0x64
 80012da:	f000 fe9b 	bl	8002014 <Motor_SetFreq>
	Motor_Start();
 80012de:	f000 fecf 	bl	8002080 <Motor_Start>
	HAL_Delay(1000); //1sec
 80012e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012e6:	f000 ffe5 	bl	80022b4 <HAL_Delay>
	Motor_Stop();
 80012ea:	f000 fed9 	bl	80020a0 <Motor_Stop>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <Presenter_Init>:
static shown_open = false;
static shown_fail = false;


void Presenter_Init()
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
   LCD_Init(&hi2c1);
 80012f8:	4805      	ldr	r0, [pc, #20]	@ (8001310 <Presenter_Init+0x1c>)
 80012fa:	f000 fd97 	bl	8001e2c <LCD_Init>
   Buzzer_Init(&htim3, TIM_CHANNEL_1);
 80012fe:	2100      	movs	r1, #0
 8001300:	4804      	ldr	r0, [pc, #16]	@ (8001314 <Presenter_Init+0x20>)
 8001302:	f000 fd27 	bl	8001d54 <Buzzer_Init>
   MotorRun_Init();
 8001306:	f7ff ffdb 	bl	80012c0 <MotorRun_Init>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000088 	.word	0x20000088
 8001314:	20000170 	.word	0x20000170

08001318 <Presenter_UL_StateData>:


///additional //////////////////////////////////

void Presenter_UL_StateData()
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
   memcpy(&ultraState1, &stateData, sizeof(stateControl_t));
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <Presenter_UL_StateData+0x18>)
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <Presenter_UL_StateData+0x1c>)
 8001322:	701a      	strb	r2, [r3, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000200 	.word	0x20000200
 8001334:	20000240 	.word	0x20000240

08001338 <Presenter_UL_OutData>:


void Presenter_UL_OutData(ultra_t ultraDst)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	463b      	mov	r3, r7
 8001340:	e883 0003 	stmia.w	r3, {r0, r1}
   memcpy(&ultraData, &ultraDst, sizeof(ultra_t));
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <Presenter_UL_OutData+0x28>)
 8001346:	461a      	mov	r2, r3
 8001348:	463b      	mov	r3, r7
 800134a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800134e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000244 	.word	0x20000244

08001364 <Presenter_UL_Detected>:

//UL
void Presenter_UL_Detected() //ultra_t ultraDst
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	@ 0x38
 8001368:	af00      	add	r7, sp, #0

      char str[50];
      sprintf(str,"!!Safe is not Safe!! \n");
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4909      	ldr	r1, [pc, #36]	@ (8001394 <Presenter_UL_Detected+0x30>)
 800136e:	4618      	mov	r0, r3
 8001370:	f004 fdaa 	bl	8005ec8 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ff3c 	bl	80001f4 <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	b29a      	uxth	r2, r3
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001386:	4804      	ldr	r0, [pc, #16]	@ (8001398 <Presenter_UL_Detected+0x34>)
 8001388:	f003 fd82 	bl	8004e90 <HAL_UART_Transmit>

}
 800138c:	bf00      	nop
 800138e:	3738      	adds	r7, #56	@ 0x38
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	08006848 	.word	0x08006848
 8001398:	200001b8 	.word	0x200001b8

0800139c <Presenter_UL_NotDetected>:

void Presenter_UL_NotDetected() //ultra_t ultraDst
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	@ 0x38
 80013a0:	af00      	add	r7, sp, #0
      char str[50];
      sprintf(str,"Distance : %03d cm\n", ultraData.ultra_data);
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <Presenter_UL_NotDetected+0x34>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	490a      	ldr	r1, [pc, #40]	@ (80013d4 <Presenter_UL_NotDetected+0x38>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 fd8c 	bl	8005ec8 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe ff1e 	bl	80001f4 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	1d39      	adds	r1, r7, #4
 80013be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <Presenter_UL_NotDetected+0x3c>)
 80013c4:	f003 fd64 	bl	8004e90 <HAL_UART_Transmit>
}
 80013c8:	bf00      	nop
 80013ca:	3738      	adds	r7, #56	@ 0x38
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000244 	.word	0x20000244
 80013d4:	08006860 	.word	0x08006860
 80013d8:	200001b8 	.word	0x200001b8

080013dc <Presenter_UL_WarningLED_ON>:


void Presenter_UL_WarningLED_ON()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013e6:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <Presenter_UL_WarningLED_ON+0x1c>)
 80013e8:	f001 fac8 	bl	800297c <HAL_GPIO_WritePin>
   HAL_Delay(1);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f000 ff61 	bl	80022b4 <HAL_Delay>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020000 	.word	0x40020000

080013fc <Presenter_UL_WarningLED_OFF>:

void Presenter_UL_WarningLED_OFF()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001406:	4804      	ldr	r0, [pc, #16]	@ (8001418 <Presenter_UL_WarningLED_OFF+0x1c>)
 8001408:	f001 fab8 	bl	800297c <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800140c:	2001      	movs	r0, #1
 800140e:	f000 ff51 	bl	80022b4 <HAL_Delay>
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020000 	.word	0x40020000

0800141c <Presenter_UL_LoginLED_OFF>:
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
   HAL_Delay(1);
}

void Presenter_UL_LoginLED_OFF()
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2180      	movs	r1, #128	@ 0x80
 8001424:	4803      	ldr	r0, [pc, #12]	@ (8001434 <Presenter_UL_LoginLED_OFF+0x18>)
 8001426:	f001 faa9 	bl	800297c <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f000 ff42 	bl	80022b4 <HAL_Delay>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40020800 	.word	0x40020800

08001438 <Presenter_UL_ModeWarning>:

void Presenter_UL_ModeWarning()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2140      	movs	r1, #64	@ 0x40
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <Presenter_UL_ModeWarning+0x14>)
 8001442:	f001 fa9b 	bl	800297c <HAL_GPIO_WritePin>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40020400 	.word	0x40020400

08001450 <Presenter_UL_ModeLOGIN>:

void Presenter_UL_ModeLOGIN()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2140      	movs	r1, #64	@ 0x40
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <Presenter_UL_ModeLOGIN+0x14>)
 800145a:	f001 fa8f 	bl	800297c <HAL_GPIO_WritePin>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40020400 	.word	0x40020400

08001468 <Presenter_UL_Excute>:

void Presenter_UL_Excute()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
   if(ultraState1.state == P_SEC){
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <Presenter_UL_Excute+0x40>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d113      	bne.n	800149c <Presenter_UL_Excute+0x34>
      Presenter_UL_LoginLED_OFF();
 8001474:	f7ff ffd2 	bl	800141c <Presenter_UL_LoginLED_OFF>
      Presenter_UL_ModeWarning();
 8001478:	f7ff ffde 	bl	8001438 <Presenter_UL_ModeWarning>
      if(ultraData.ultra_data < 4){
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <Presenter_UL_Excute+0x44>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d808      	bhi.n	8001496 <Presenter_UL_Excute+0x2e>
         Presenter_UL_WarningLED_ON();
 8001484:	f7ff ffaa 	bl	80013dc <Presenter_UL_WarningLED_ON>
         Presenter_UL_WarningLED_OFF();
 8001488:	f7ff ffb8 	bl	80013fc <Presenter_UL_WarningLED_OFF>
         Sound_Warning();
 800148c:	f000 f96c 	bl	8001768 <Sound_Warning>
         Presenter_UL_Detected();
 8001490:	f7ff ff68 	bl	8001364 <Presenter_UL_Detected>
 8001494:	e004      	b.n	80014a0 <Presenter_UL_Excute+0x38>
      }
      else {
         Presenter_UL_NotDetected();
 8001496:	f7ff ff81 	bl	800139c <Presenter_UL_NotDetected>
 800149a:	e001      	b.n	80014a0 <Presenter_UL_Excute+0x38>
      }
   }
   else
      Presenter_LOG_Excute();
 800149c:	f000 f808 	bl	80014b0 <Presenter_LOG_Excute>
   	  Presenter_UL_ModeLOGIN();
 80014a0:	f7ff ffd6 	bl	8001450 <Presenter_UL_ModeLOGIN>

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000240 	.word	0x20000240
 80014ac:	20000244 	.word	0x20000244

080014b0 <Presenter_LOG_Excute>:
////////////////////////////////////////
////////////////////////////////////////


void Presenter_LOG_Excute()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	if(login_stateData.login_state == WAIT_INPUT)
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <Presenter_LOG_Excute+0x18>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <Presenter_LOG_Excute+0x10>
		{
		Present_Disp_UART_InsertPwMESSAGE();
 80014bc:	f000 f806 	bl	80014cc <Present_Disp_UART_InsertPwMESSAGE>
		}

   Present_Disp_UART_state_messege();
 80014c0:	f000 f848 	bl	8001554 <Present_Disp_UART_state_messege>

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000280 	.word	0x20000280

080014cc <Present_Disp_UART_InsertPwMESSAGE>:


}

void Present_Disp_UART_InsertPwMESSAGE()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

   static int  uart_count    = 0;
   static bool prompt_shown  = false;

   uart_count++;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <Present_Disp_UART_InsertPwMESSAGE+0x74>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <Present_Disp_UART_InsertPwMESSAGE+0x74>)
 80014da:	6013      	str	r3, [r2, #0]
   if (uart_count < 10000) return;
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <Present_Disp_UART_InsertPwMESSAGE+0x74>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014e4:	4293      	cmp	r3, r2
 80014e6:	dd26      	ble.n	8001536 <Present_Disp_UART_InsertPwMESSAGE+0x6a>
   uart_count = 0;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <Present_Disp_UART_InsertPwMESSAGE+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

   if (!login_controldata.data_pw_input && !prompt_shown) {
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <Present_Disp_UART_InsertPwMESSAGE+0x78>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d117      	bne.n	8001526 <Present_Disp_UART_InsertPwMESSAGE+0x5a>
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <Present_Disp_UART_InsertPwMESSAGE+0x7c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	f083 0301 	eor.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d010      	beq.n	8001526 <Present_Disp_UART_InsertPwMESSAGE+0x5a>
      const char *msg = "insert 'i' if you want insert password\n";
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <Present_Disp_UART_InsertPwMESSAGE+0x80>)
 8001506:	607b      	str	r3, [r7, #4]
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7fe fe73 	bl	80001f4 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	b29a      	uxth	r2, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	480d      	ldr	r0, [pc, #52]	@ (8001550 <Present_Disp_UART_InsertPwMESSAGE+0x84>)
 800151a:	f003 fcb9 	bl	8004e90 <HAL_UART_Transmit>
      prompt_shown = true;
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <Present_Disp_UART_InsertPwMESSAGE+0x7c>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
   if (!login_controldata.data_pw_input && !prompt_shown) {
 8001524:	e008      	b.n	8001538 <Present_Disp_UART_InsertPwMESSAGE+0x6c>
   }
   else if (login_controldata.data_pw_input) {
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <Present_Disp_UART_InsertPwMESSAGE+0x78>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d004      	beq.n	8001538 <Present_Disp_UART_InsertPwMESSAGE+0x6c>
      // 'i' 모드 진입하면 다음에 또 보여줄 수 있도록 리셋
      prompt_shown = false;
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <Present_Disp_UART_InsertPwMESSAGE+0x7c>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e000      	b.n	8001538 <Present_Disp_UART_InsertPwMESSAGE+0x6c>
   if (uart_count < 10000) return;
 8001536:	bf00      	nop
   }
}
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000258 	.word	0x20000258
 8001544:	20000284 	.word	0x20000284
 8001548:	2000025c 	.word	0x2000025c
 800154c:	08006884 	.word	0x08006884
 8001550:	200001b8 	.word	0x200001b8

08001554 <Present_Disp_UART_state_messege>:

// state 확인 메세지 출력용

void Present_Disp_UART_state_messege()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
     static int  uart_count    = 0;
       static bool shown_ing     = false;
       static bool shown_open    = false;
       static bool shown_fail    = false;

       uart_count++;
 800155a:	4b43      	ldr	r3, [pc, #268]	@ (8001668 <Present_Disp_UART_state_messege+0x114>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	4a41      	ldr	r2, [pc, #260]	@ (8001668 <Present_Disp_UART_state_messege+0x114>)
 8001562:	6013      	str	r3, [r2, #0]
       if (uart_count < 10000) return;
 8001564:	4b40      	ldr	r3, [pc, #256]	@ (8001668 <Present_Disp_UART_state_messege+0x114>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f242 720f 	movw	r2, #9999	@ 0x270f
 800156c:	4293      	cmp	r3, r2
 800156e:	dd70      	ble.n	8001652 <Present_Disp_UART_state_messege+0xfe>
       uart_count = 0;
 8001570:	4b3d      	ldr	r3, [pc, #244]	@ (8001668 <Present_Disp_UART_state_messege+0x114>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

       switch (login_stateData.login_state)
 8001576:	4b3d      	ldr	r3, [pc, #244]	@ (800166c <Present_Disp_UART_state_messege+0x118>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d048      	beq.n	8001610 <Present_Disp_UART_state_messege+0xbc>
 800157e:	2b03      	cmp	r3, #3
 8001580:	dc6e      	bgt.n	8001660 <Present_Disp_UART_state_messege+0x10c>
 8001582:	2b01      	cmp	r3, #1
 8001584:	d002      	beq.n	800158c <Present_Disp_UART_state_messege+0x38>
 8001586:	2b02      	cmp	r3, #2
 8001588:	d01f      	beq.n	80015ca <Present_Disp_UART_state_messege+0x76>
 800158a:	e069      	b.n	8001660 <Present_Disp_UART_state_messege+0x10c>
       {
       case ING_INPUT:
           if (!shown_ing) {
 800158c:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <Present_Disp_UART_state_messege+0x11c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f083 0301 	eor.w	r3, r3, #1
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d05d      	beq.n	8001656 <Present_Disp_UART_state_messege+0x102>
               const char *msg = "Please enter a 4-digit password\n";
 800159a:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <Present_Disp_UART_state_messege+0x120>)
 800159c:	607b      	str	r3, [r7, #4]
               HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7fe fe28 	bl	80001f4 <strlen>
 80015a4:	4603      	mov	r3, r0
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4832      	ldr	r0, [pc, #200]	@ (8001678 <Present_Disp_UART_state_messege+0x124>)
 80015b0:	f003 fc6e 	bl	8004e90 <HAL_UART_Transmit>
               shown_ing = true;
 80015b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001670 <Present_Disp_UART_state_messege+0x11c>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
               shown_open = shown_fail = false;
 80015ba:	4b30      	ldr	r3, [pc, #192]	@ (800167c <Present_Disp_UART_state_messege+0x128>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	4b2e      	ldr	r3, [pc, #184]	@ (800167c <Present_Disp_UART_state_messege+0x128>)
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <Present_Disp_UART_state_messege+0x12c>)
 80015c6:	701a      	strb	r2, [r3, #0]
           }
           break;
 80015c8:	e045      	b.n	8001656 <Present_Disp_UART_state_messege+0x102>

       case OPEN:
           if (!shown_open) {
 80015ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <Present_Disp_UART_state_messege+0x12c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	f083 0301 	eor.w	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d040      	beq.n	800165a <Present_Disp_UART_state_messege+0x106>
               const char *msg = "The password is correct. The safe has been unlocked.\n";
 80015d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <Present_Disp_UART_state_messege+0x130>)
 80015da:	60bb      	str	r3, [r7, #8]
               HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 80015dc:	68b8      	ldr	r0, [r7, #8]
 80015de:	f7fe fe09 	bl	80001f4 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	4822      	ldr	r0, [pc, #136]	@ (8001678 <Present_Disp_UART_state_messege+0x124>)
 80015ee:	f003 fc4f 	bl	8004e90 <HAL_UART_Transmit>
               Sound_PowerOn();
 80015f2:	f000 f8c8 	bl	8001786 <Sound_PowerOn>
               MotorRUN_PowerOn();
 80015f6:	f7ff fe6d 	bl	80012d4 <MotorRUN_PowerOn>
               shown_open = true;
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <Present_Disp_UART_state_messege+0x12c>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
               shown_ing = shown_fail = false;
 8001600:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <Present_Disp_UART_state_messege+0x128>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <Present_Disp_UART_state_messege+0x128>)
 8001608:	781a      	ldrb	r2, [r3, #0]
 800160a:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <Present_Disp_UART_state_messege+0x11c>)
 800160c:	701a      	strb	r2, [r3, #0]
           }
           break;
 800160e:	e024      	b.n	800165a <Present_Disp_UART_state_messege+0x106>

       case FAIL:
           if (!shown_fail) {
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <Present_Disp_UART_state_messege+0x128>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	f083 0301 	eor.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01f      	beq.n	800165e <Present_Disp_UART_state_messege+0x10a>
               const char *msg = "The password is wrong.\n";
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <Present_Disp_UART_state_messege+0x134>)
 8001620:	60fb      	str	r3, [r7, #12]
               HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7fe fde6 	bl	80001f4 <strlen>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	4811      	ldr	r0, [pc, #68]	@ (8001678 <Present_Disp_UART_state_messege+0x124>)
 8001634:	f003 fc2c 	bl	8004e90 <HAL_UART_Transmit>
               Sound_PowerOff();
 8001638:	f000 f8c9 	bl	80017ce <Sound_PowerOff>
               shown_fail = true;
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <Present_Disp_UART_state_messege+0x128>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
               shown_ing = shown_open = false;
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <Present_Disp_UART_state_messege+0x12c>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <Present_Disp_UART_state_messege+0x12c>)
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <Present_Disp_UART_state_messege+0x11c>)
 800164e:	701a      	strb	r2, [r3, #0]
           }
           break;
 8001650:	e005      	b.n	800165e <Present_Disp_UART_state_messege+0x10a>
       if (uart_count < 10000) return;
 8001652:	bf00      	nop
 8001654:	e004      	b.n	8001660 <Present_Disp_UART_state_messege+0x10c>
           break;
 8001656:	bf00      	nop
 8001658:	e002      	b.n	8001660 <Present_Disp_UART_state_messege+0x10c>
           break;
 800165a:	bf00      	nop
 800165c:	e000      	b.n	8001660 <Present_Disp_UART_state_messege+0x10c>
           break;
 800165e:	bf00      	nop

       }

}
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000260 	.word	0x20000260
 800166c:	20000280 	.word	0x20000280
 8001670:	20000264 	.word	0x20000264
 8001674:	080068ac 	.word	0x080068ac
 8001678:	200001b8 	.word	0x200001b8
 800167c:	20000265 	.word	0x20000265
 8001680:	20000266 	.word	0x20000266
 8001684:	080068d0 	.word	0x080068d0
 8001688:	08006908 	.word	0x08006908

0800168c <Presenter_ResetStateMessageFlags>:


void Presenter_ResetStateMessageFlags() {
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
    shown_ing  = false;
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <Presenter_ResetStateMessageFlags+0x20>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
    shown_open = false;
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <Presenter_ResetStateMessageFlags+0x24>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
    shown_fail = false;
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <Presenter_ResetStateMessageFlags+0x28>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	2000024c 	.word	0x2000024c
 80016b0:	20000250 	.word	0x20000250
 80016b4:	20000254 	.word	0x20000254

080016b8 <Security_Excute>:
		Ultra_RunCallBack();
	}
}

void Security_Excute()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	switch (securityState)
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <Security_Excute+0x2c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <Security_Excute+0x12>
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d003      	beq.n	80016d0 <Security_Excute+0x18>
 80016c8:	e005      	b.n	80016d6 <Security_Excute+0x1e>
	{
	case RUN:
		Security_Run();
 80016ca:	f000 f80f 	bl	80016ec <Security_Run>
		break;
 80016ce:	e002      	b.n	80016d6 <Security_Excute+0x1e>

	case WARNING:
		Security_Warning();
 80016d0:	f000 f822 	bl	8001718 <Security_Warning>
		break;
 80016d4:	bf00      	nop
	}
	Presenter_UL_OutData(ultra);
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <Security_Excute+0x30>)
 80016d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016dc:	f7ff fe2c 	bl	8001338 <Presenter_UL_OutData>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000267 	.word	0x20000267
 80016e8:	20000268 	.word	0x20000268

080016ec <Security_Run>:

void Security_Run()
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	ultra.flag = 0;
 80016f0:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <Security_Run+0x24>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	711a      	strb	r2, [r3, #4]
	if (ultra.ultra_data < 10) {
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <Security_Run+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b09      	cmp	r3, #9
 80016fc:	d802      	bhi.n	8001704 <Security_Run+0x18>
		securityState = WARNING;
 80016fe:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <Security_Run+0x28>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
	}
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000268 	.word	0x20000268
 8001714:	20000267 	.word	0x20000267

08001718 <Security_Warning>:

void Security_Warning()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
    uint8_t firstEntry = 1;
 800171e:	2301      	movs	r3, #1
 8001720:	70fb      	strb	r3, [r7, #3]
    uint32_t warningStartTick = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]

    if (firstEntry) {
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <Security_Warning+0x24>
        ultra.flag = 1;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <Security_Warning+0x48>)
 800172e:	2201      	movs	r2, #1
 8001730:	711a      	strb	r2, [r3, #4]
        warningStartTick = HAL_GetTick();
 8001732:	f000 fdb3 	bl	800229c <HAL_GetTick>
 8001736:	6078      	str	r0, [r7, #4]
        firstEntry = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	70fb      	strb	r3, [r7, #3]
    }

    if (HAL_GetTick() - warningStartTick >= 3000) {
 800173c:	f000 fdae 	bl	800229c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800174a:	4293      	cmp	r3, r2
 800174c:	d904      	bls.n	8001758 <Security_Warning+0x40>
        securityState = RUN;
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <Security_Warning+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
        firstEntry = 1;  // 초기화
 8001754:	2301      	movs	r3, #1
 8001756:	70fb      	strb	r3, [r7, #3]
    }
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000268 	.word	0x20000268
 8001764:	20000267 	.word	0x20000267

08001768 <Sound_Warning>:
	Buzzer_Init(&htim3, TIM_CHANNEL_1);
}


void Sound_Warning()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	Buzzer_SetFreq(1047); //mi
 800176c:	f240 4017 	movw	r0, #1047	@ 0x417
 8001770:	f000 fb06 	bl	8001d80 <Buzzer_SetFreq>
	Buzzer_Start();
 8001774:	f000 fb3a 	bl	8001dec <Buzzer_Start>
	HAL_Delay(100);
 8001778:	2064      	movs	r0, #100	@ 0x64
 800177a:	f000 fd9b 	bl	80022b4 <HAL_Delay>
	Buzzer_Stop();
 800177e:	f000 fb45 	bl	8001e0c <Buzzer_Stop>
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}

08001786 <Sound_PowerOn>:

void Sound_PowerOn()
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
	Buzzer_SetFreq(1047); //do
 800178a:	f240 4017 	movw	r0, #1047	@ 0x417
 800178e:	f000 faf7 	bl	8001d80 <Buzzer_SetFreq>
	Buzzer_Start();
 8001792:	f000 fb2b 	bl	8001dec <Buzzer_Start>
	HAL_Delay(100);
 8001796:	2064      	movs	r0, #100	@ 0x64
 8001798:	f000 fd8c 	bl	80022b4 <HAL_Delay>
	Buzzer_SetFreq(1319); //mi
 800179c:	f240 5027 	movw	r0, #1319	@ 0x527
 80017a0:	f000 faee 	bl	8001d80 <Buzzer_SetFreq>
	HAL_Delay(100);
 80017a4:	2064      	movs	r0, #100	@ 0x64
 80017a6:	f000 fd85 	bl	80022b4 <HAL_Delay>
	Buzzer_SetFreq(1568); //sol
 80017aa:	f44f 60c4 	mov.w	r0, #1568	@ 0x620
 80017ae:	f000 fae7 	bl	8001d80 <Buzzer_SetFreq>
	HAL_Delay(100);
 80017b2:	2064      	movs	r0, #100	@ 0x64
 80017b4:	f000 fd7e 	bl	80022b4 <HAL_Delay>
	Buzzer_SetFreq(2039); //do
 80017b8:	f240 70f7 	movw	r0, #2039	@ 0x7f7
 80017bc:	f000 fae0 	bl	8001d80 <Buzzer_SetFreq>
	HAL_Delay(100);
 80017c0:	2064      	movs	r0, #100	@ 0x64
 80017c2:	f000 fd77 	bl	80022b4 <HAL_Delay>
	Buzzer_Stop();
 80017c6:	f000 fb21 	bl	8001e0c <Buzzer_Stop>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}

080017ce <Sound_PowerOff>:

void Sound_PowerOff()
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
	Buzzer_SetFreq(2039); //do
 80017d2:	f240 70f7 	movw	r0, #2039	@ 0x7f7
 80017d6:	f000 fad3 	bl	8001d80 <Buzzer_SetFreq>
	Buzzer_Start();
 80017da:	f000 fb07 	bl	8001dec <Buzzer_Start>
	HAL_Delay(200);
 80017de:	20c8      	movs	r0, #200	@ 0xc8
 80017e0:	f000 fd68 	bl	80022b4 <HAL_Delay>
	Buzzer_SetFreq(1568); //mi
 80017e4:	f44f 60c4 	mov.w	r0, #1568	@ 0x620
 80017e8:	f000 faca 	bl	8001d80 <Buzzer_SetFreq>
	HAL_Delay(200);
 80017ec:	20c8      	movs	r0, #200	@ 0xc8
 80017ee:	f000 fd61 	bl	80022b4 <HAL_Delay>
	Buzzer_SetFreq(1319); //sol
 80017f2:	f240 5027 	movw	r0, #1319	@ 0x527
 80017f6:	f000 fac3 	bl	8001d80 <Buzzer_SetFreq>
	HAL_Delay(200);
 80017fa:	20c8      	movs	r0, #200	@ 0xc8
 80017fc:	f000 fd5a 	bl	80022b4 <HAL_Delay>
	Buzzer_SetFreq(1047); //do
 8001800:	f240 4017 	movw	r0, #1047	@ 0x417
 8001804:	f000 fabc 	bl	8001d80 <Buzzer_SetFreq>
	HAL_Delay(200);
 8001808:	20c8      	movs	r0, #200	@ 0xc8
 800180a:	f000 fd53 	bl	80022b4 <HAL_Delay>
	Buzzer_Stop();
 800180e:	f000 fafd 	bl	8001e0c <Buzzer_Stop>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <Ultra_RunCallBack>:
ultra_t ultra;

uint8_t Ultra_done = 0;

void Ultra_RunCallBack()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
	static uint32_t counter = 0;
	counter++;
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <Ultra_RunCallBack+0x68>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4a16      	ldr	r2, [pc, #88]	@ (8001880 <Ultra_RunCallBack+0x68>)
 8001826:	6013      	str	r3, [r2, #0]
	Ultra_done = 0;
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <Ultra_RunCallBack+0x6c>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
	if (counter > 1000) //1msec
 800182e:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <Ultra_RunCallBack+0x68>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001836:	d919      	bls.n	800186c <Ultra_RunCallBack+0x54>
	{
		counter = 0;
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <Ultra_RunCallBack+0x68>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
		Ultra_Trigger_Input();
 800183e:	f000 fc3f 	bl	80020c0 <Ultra_Trigger_Input>
		Ultra_done = 1;
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <Ultra_RunCallBack+0x6c>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
        uint32_t echoTime = Ultra_Echo();
 8001848:	f000 fc7a 	bl	8002140 <Ultra_Echo>
 800184c:	6038      	str	r0, [r7, #0]
        uint16_t distance = Ultra_Calculate(echoTime);
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	f000 fca0 	bl	8002194 <Ultra_Calculate>
 8001854:	4603      	mov	r3, r0
 8001856:	80fb      	strh	r3, [r7, #6]

        if(distance >= 400) { //for distance_out
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800185e:	d302      	bcc.n	8001866 <Ultra_RunCallBack+0x4e>
        	distance = 400;
 8001860:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001864:	80fb      	strh	r3, [r7, #6]
        }
        ultra.ultra_data = distance;
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	4a07      	ldr	r2, [pc, #28]	@ (8001888 <Ultra_RunCallBack+0x70>)
 800186a:	6013      	str	r3, [r2, #0]
	}
	Presenter_UL_OutData(ultra);
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <Ultra_RunCallBack+0x70>)
 800186e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001872:	f7ff fd61 	bl	8001338 <Presenter_UL_OutData>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000027c 	.word	0x2000027c
 8001884:	20000278 	.word	0x20000278
 8001888:	20000270 	.word	0x20000270

0800188c <HAL_TIM_PeriodElapsedCallback>:
#include "ap_main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800189c:	d105      	bne.n	80018aa <HAL_TIM_PeriodElapsedCallback+0x1e>
		TimeWatch_IncTimeCallBack();
 800189e:	f000 f9cf 	bl	8001c40 <TimeWatch_IncTimeCallBack>
		StopWatch_IncTimeCallBack();
 80018a2:	f000 f97f 	bl	8001ba4 <StopWatch_IncTimeCallBack>
		Ultra_RunCallBack();
 80018a6:	f7ff ffb7 	bl	8001818 <Ultra_RunCallBack>
	}
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <HAL_UART_RxCpltCallback+0x20>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 80018c6:	f7ff fcc9 	bl	800125c <Listener_UartCallBack>
	}
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40004400 	.word	0x40004400

080018d8 <ap_main>:


int ap_main()
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80018dc:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <ap_main+0x1c>)
 80018de:	f002 fa6f 	bl	8003dc0 <HAL_TIM_Base_Start_IT>
	while(1)
	{
		Listener_Excute();
 80018e2:	f7ff fc03 	bl	80010ec <Listener_Excute>
		Controller_Excute();
 80018e6:	f7ff fb8c 	bl	8001002 <Controller_Excute>
		Presenter_UL_Excute();
 80018ea:	f7ff fdbd 	bl	8001468 <Presenter_UL_Excute>
		Listener_Excute();
 80018ee:	bf00      	nop
 80018f0:	e7f7      	b.n	80018e2 <ap_main+0xa>
 80018f2:	bf00      	nop
 80018f4:	20000128 	.word	0x20000128

080018f8 <ap_init>:

	return 0;
}

void ap_init()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	Listener_Init();
 80018fc:	f7ff fbda 	bl	80010b4 <Listener_Init>
	Presenter_Init();
 8001900:	f7ff fcf8 	bl	80012f4 <Presenter_Init>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <Login_Execute>:
   }
   stopWatch.msec = 0;
}

void Login_Execute()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0

   switch (login_stateData.login_state) {
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <Login_Execute+0x4c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d81c      	bhi.n	800194e <Login_Execute+0x46>
 8001914:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <Login_Execute+0x14>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	08001931 	.word	0x08001931
 8001920:	08001937 	.word	0x08001937
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001943 	.word	0x08001943
 800192c:	08001949 	.word	0x08001949
   case WAIT_INPUT:   wait_input();   break;
 8001930:	f000 f812 	bl	8001958 <wait_input>
 8001934:	e00b      	b.n	800194e <Login_Execute+0x46>
   case ING_INPUT:   input_ING();   break;
 8001936:	f000 f821 	bl	800197c <input_ING>
 800193a:	e008      	b.n	800194e <Login_Execute+0x46>
   case OPEN:     Login_Open();    break;
 800193c:	f000 f838 	bl	80019b0 <Login_Open>
 8001940:	e005      	b.n	800194e <Login_Execute+0x46>
   case FAIL:     Login_Fail();    break;
 8001942:	f000 f859 	bl	80019f8 <Login_Fail>
 8001946:	e002      	b.n	800194e <Login_Execute+0x46>
   case W_CLEAR :  Login_Clear();  break;
 8001948:	f000 f87a 	bl	8001a40 <Login_Clear>
 800194c:	bf00      	nop
   }
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000280 	.word	0x20000280

08001958 <wait_input>:

void wait_input(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
    if(login_controldata.data_pw_input)
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <wait_input+0x1c>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <wait_input+0x12>
    {
        login_stateData.login_state = ING_INPUT;
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <wait_input+0x20>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
    }
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20000284 	.word	0x20000284
 8001978:	20000280 	.word	0x20000280

0800197c <input_ING>:


void input_ING(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
   if(login_controldata.data_pw_correct == 1)   login_stateData.login_state = OPEN;
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <input_ING+0x2c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d103      	bne.n	8001990 <input_ING+0x14>
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <input_ING+0x30>)
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
   else if (login_controldata.data_pw_correct == 2) login_stateData.login_state = FAIL;

}
 800198e:	e006      	b.n	800199e <input_ING+0x22>
   else if (login_controldata.data_pw_correct == 2) login_stateData.login_state = FAIL;
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <input_ING+0x2c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d102      	bne.n	800199e <input_ING+0x22>
 8001998:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <input_ING+0x30>)
 800199a:	2203      	movs	r2, #3
 800199c:	701a      	strb	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	20000284 	.word	0x20000284
 80019ac:	20000280 	.word	0x20000280

080019b0 <Login_Open>:

// login.c 에 선언


void Login_Open(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
    if (openStartTick == 0) {
 80019b4:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <Login_Open+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <Login_Open+0x18>
        openStartTick = HAL_GetTick();
 80019bc:	f000 fc6e 	bl	800229c <HAL_GetTick>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a0b      	ldr	r2, [pc, #44]	@ (80019f0 <Login_Open+0x40>)
 80019c4:	6013      	str	r3, [r2, #0]
        openStartTick = 0;
        Presenter_ResetStateMessageFlags();
        login_stateData.login_state = W_CLEAR;
    }
    // 그 외에는 아무것도 하지 않고, 계속 OPEN 상태 유지
}
 80019c6:	e011      	b.n	80019ec <Login_Open+0x3c>
    else if ((HAL_GetTick() - openStartTick) >= 60000U) {
 80019c8:	f000 fc68 	bl	800229c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <Login_Open+0x40>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80019d8:	4293      	cmp	r3, r2
 80019da:	d907      	bls.n	80019ec <Login_Open+0x3c>
        openStartTick = 0;
 80019dc:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <Login_Open+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
        Presenter_ResetStateMessageFlags();
 80019e2:	f7ff fe53 	bl	800168c <Presenter_ResetStateMessageFlags>
        login_stateData.login_state = W_CLEAR;
 80019e6:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <Login_Open+0x44>)
 80019e8:	2204      	movs	r2, #4
 80019ea:	701a      	strb	r2, [r3, #0]
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000290 	.word	0x20000290
 80019f4:	20000280 	.word	0x20000280

080019f8 <Login_Fail>:

void Login_Fail(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
    if (failStartTick == 0) {
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <Login_Fail+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <Login_Fail+0x18>
        failStartTick = HAL_GetTick();
 8001a04:	f000 fc4a 	bl	800229c <HAL_GetTick>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a38 <Login_Fail+0x40>)
 8001a0c:	6013      	str	r3, [r2, #0]
    else if ((HAL_GetTick() - failStartTick) >= 3000U) {
        failStartTick = 0;
        Presenter_ResetStateMessageFlags();
        login_stateData.login_state = W_CLEAR;
    }
}
 8001a0e:	e011      	b.n	8001a34 <Login_Fail+0x3c>
    else if ((HAL_GetTick() - failStartTick) >= 3000U) {
 8001a10:	f000 fc44 	bl	800229c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <Login_Fail+0x40>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d907      	bls.n	8001a34 <Login_Fail+0x3c>
        failStartTick = 0;
 8001a24:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <Login_Fail+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
        Presenter_ResetStateMessageFlags();
 8001a2a:	f7ff fe2f 	bl	800168c <Presenter_ResetStateMessageFlags>
        login_stateData.login_state = W_CLEAR;
 8001a2e:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <Login_Fail+0x44>)
 8001a30:	2204      	movs	r2, #4
 8001a32:	701a      	strb	r2, [r3, #0]
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000294 	.word	0x20000294
 8001a3c:	20000280 	.word	0x20000280

08001a40 <Login_Clear>:

void Login_Clear(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    if (failStartTick == 0) {
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <Login_Clear+0x4c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <Login_Clear+0x18>
        failStartTick = HAL_GetTick();
 8001a4c:	f000 fc26 	bl	800229c <HAL_GetTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a0e      	ldr	r2, [pc, #56]	@ (8001a8c <Login_Clear+0x4c>)
 8001a54:	6013      	str	r3, [r2, #0]
        login_controldata.data_pw_input = 0;

        Presenter_ResetStateMessageFlags();
        login_stateData.login_state = WAIT_INPUT;
    }
}
 8001a56:	e016      	b.n	8001a86 <Login_Clear+0x46>
    else if ((HAL_GetTick() - failStartTick) >= 1000U) {
 8001a58:	f000 fc20 	bl	800229c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <Login_Clear+0x4c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a68:	d30d      	bcc.n	8001a86 <Login_Clear+0x46>
        failStartTick = 0;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <Login_Clear+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
        login_controldata.data_pw_correct = 0;
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <Login_Clear+0x50>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
        login_controldata.data_pw_input = 0;
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <Login_Clear+0x50>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
        Presenter_ResetStateMessageFlags();
 8001a7c:	f7ff fe06 	bl	800168c <Presenter_ResetStateMessageFlags>
        login_stateData.login_state = WAIT_INPUT;
 8001a80:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <Login_Clear+0x54>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000294 	.word	0x20000294
 8001a90:	20000284 	.word	0x20000284
 8001a94:	20000280 	.word	0x20000280

08001a98 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	q->front = 0;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4259      	negs	r1, r3
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	f001 0103 	and.w	r1, r1, #3
 8001ad4:	bf58      	it	pl
 8001ad6:	424b      	negpl	r3, r1
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffca 	bl	8001ab8 <isQueFull>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d113      	bne.n	8001b52 <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3202      	adds	r2, #2
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	425a      	negs	r2, r3
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	f002 0203 	and.w	r2, r2, #3
 8001b48:	bf58      	it	pl
 8001b4a:	4253      	negpl	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6053      	str	r3, [r2, #4]
 8001b50:	e000      	b.n	8001b54 <enQue+0x40>
		return;
 8001b52:	bf00      	nop
}
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <deQue>:

int deQue(Que_TypeDef *q)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	if (isQueEmpty(q)) {
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffc3 	bl	8001aee <isQueEmpty>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d114      	bne.n	8001b98 <deQue+0x3e>
		return;
	}
	int data = q->queData[q->front];
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3202      	adds	r2, #2
 8001b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7a:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	425a      	negs	r2, r3
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	f002 0203 	and.w	r2, r2, #3
 8001b8c:	bf58      	it	pl
 8001b8e:	4253      	negpl	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6013      	str	r3, [r2, #0]
	return data;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	e001      	b.n	8001b9c <deQue+0x42>
		return;
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <StopWatch_IncTimeCallBack>:
extern inputData_TypeDef controlData;
static stopWatchState_t stopWatchState = STOP;
static watch_t stopWatch = {STOP_WATCH, 12, 0, 0, 0};

void StopWatch_IncTimeCallBack()
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	if (stopWatchState == RUN) {
 8001ba8:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <StopWatch_IncTimeCallBack+0x14>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <StopWatch_IncTimeCallBack+0x10>
		StopWatch_IncTime();
 8001bb0:	f000 f804 	bl	8001bbc <StopWatch_IncTime>
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000298 	.word	0x20000298

08001bbc <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
	if (stopWatch.msec < 1000-1) {
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001bc2:	889b      	ldrh	r3, [r3, #4]
 8001bc4:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d806      	bhi.n	8001bda <StopWatch_IncTime+0x1e>
		stopWatch.msec++;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001bce:	889b      	ldrh	r3, [r3, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001bd6:	809a      	strh	r2, [r3, #4]
		return;
 8001bd8:	e02c      	b.n	8001c34 <StopWatch_IncTime+0x78>
	}
	stopWatch.msec = 0;
 8001bda:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	809a      	strh	r2, [r3, #4]

	if (stopWatch.sec < 60-1) {
 8001be0:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001be2:	78db      	ldrb	r3, [r3, #3]
 8001be4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001be6:	d806      	bhi.n	8001bf6 <StopWatch_IncTime+0x3a>
		stopWatch.sec++;
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001bea:	78db      	ldrb	r3, [r3, #3]
 8001bec:	3301      	adds	r3, #1
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001bf2:	70da      	strb	r2, [r3, #3]
		return;
 8001bf4:	e01e      	b.n	8001c34 <StopWatch_IncTime+0x78>
	}
	stopWatch.sec = 0;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	70da      	strb	r2, [r3, #3]

	if (stopWatch.min < 60-1) {
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001bfe:	789b      	ldrb	r3, [r3, #2]
 8001c00:	2b3a      	cmp	r3, #58	@ 0x3a
 8001c02:	d806      	bhi.n	8001c12 <StopWatch_IncTime+0x56>
		stopWatch.min++;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001c06:	789b      	ldrb	r3, [r3, #2]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001c0e:	709a      	strb	r2, [r3, #2]
		return;
 8001c10:	e010      	b.n	8001c34 <StopWatch_IncTime+0x78>
	}
	stopWatch.min = 0;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	709a      	strb	r2, [r3, #2]

	if (stopWatch.hour < 24-1) {
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	2b16      	cmp	r3, #22
 8001c1e:	d806      	bhi.n	8001c2e <StopWatch_IncTime+0x72>
		stopWatch.hour++;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	3301      	adds	r3, #1
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001c2a:	705a      	strb	r2, [r3, #1]
		return;
 8001c2c:	e002      	b.n	8001c34 <StopWatch_IncTime+0x78>
	}
	stopWatch.hour = 0;
 8001c2e:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <StopWatch_IncTime+0x80>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	705a      	strb	r2, [r3, #1]
}
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	20000004 	.word	0x20000004

08001c40 <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
	if (timeWatch.msec < 1000-1) {
 8001c44:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c46:	889b      	ldrh	r3, [r3, #4]
 8001c48:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d806      	bhi.n	8001c5e <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c52:	889b      	ldrh	r3, [r3, #4]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c5a:	809a      	strh	r2, [r3, #4]
		return;
 8001c5c:	e02c      	b.n	8001cb8 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.msec = 0;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	809a      	strh	r2, [r3, #4]

	if (timeWatch.sec < 60-1) {
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c66:	78db      	ldrb	r3, [r3, #3]
 8001c68:	2b3a      	cmp	r3, #58	@ 0x3a
 8001c6a:	d806      	bhi.n	8001c7a <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c6e:	78db      	ldrb	r3, [r3, #3]
 8001c70:	3301      	adds	r3, #1
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c76:	70da      	strb	r2, [r3, #3]
		return;
 8001c78:	e01e      	b.n	8001cb8 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.sec = 0;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	70da      	strb	r2, [r3, #3]

	if (timeWatch.min < 60-1) {
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c82:	789b      	ldrb	r3, [r3, #2]
 8001c84:	2b3a      	cmp	r3, #58	@ 0x3a
 8001c86:	d806      	bhi.n	8001c96 <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c92:	709a      	strb	r2, [r3, #2]
		return;
 8001c94:	e010      	b.n	8001cb8 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	709a      	strb	r2, [r3, #2]

	if (timeWatch.hour < 24-1) {
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001c9e:	785b      	ldrb	r3, [r3, #1]
 8001ca0:	2b16      	cmp	r3, #22
 8001ca2:	d806      	bhi.n	8001cb2 <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001cae:	705a      	strb	r2, [r3, #1]
		return;
 8001cb0:	e002      	b.n	8001cb8 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 8001cb2:	4b03      	ldr	r3, [pc, #12]	@ (8001cc0 <TimeWatch_IncTimeCallBack+0x80>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	705a      	strb	r2, [r3, #1]
}
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	2000000c 	.word	0x2000000c

08001cc4 <Button_Init>:
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	88fa      	ldrh	r2, [r7, #6]
 8001cdc:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	609a      	str	r2, [r3, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	889b      	ldrh	r3, [r3, #4]
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f000 fe22 	bl	800294c <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10a      	bne.n	8001d2a <Button_GetState+0x3a>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d107      	bne.n	8001d2a <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f000 faca 	bl	80022b4 <HAL_Delay>
		hbtn->prevState = PUSHED;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00f      	b.n	8001d4a <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10a      	bne.n	8001d48 <Button_GetState+0x58>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f000 fabb 	bl	80022b4 <HAL_Delay>
		hbtn->prevState = RELEASED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8001d44:	2302      	movs	r3, #2
 8001d46:	e000      	b.n	8001d4a <Button_GetState+0x5a>
	}
	return NO_ACT;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t buzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
	hbuzzerTim = htim;
 8001d5e:	4a06      	ldr	r2, [pc, #24]	@ (8001d78 <Buzzer_Init+0x24>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6013      	str	r3, [r2, #0]
	buzzerTimChannel = channel;
 8001d64:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <Buzzer_Init+0x28>)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6013      	str	r3, [r2, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	200002a8 	.word	0x200002a8
 8001d7c:	200002ac 	.word	0x200002ac

08001d80 <Buzzer_SetFreq>:

void Buzzer_SetFreq(uint32_t freq)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	if(freq - 1 < 100) freq = 100;    // 100 < freq <10kHz
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	2b63      	cmp	r3, #99	@ 0x63
 8001d8e:	d802      	bhi.n	8001d96 <Buzzer_SetFreq+0x16>
 8001d90:	2364      	movs	r3, #100	@ 0x64
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	e007      	b.n	8001da6 <Buzzer_SetFreq+0x26>
	else if (freq > 10000) freq = 10000;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d902      	bls.n	8001da6 <Buzzer_SetFreq+0x26>
 8001da0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001da4:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_AUTORELOAD(&htim3, 1000000 /freq -1);     // Set Counter
 8001da6:	4a0e      	ldr	r2, [pc, #56]	@ (8001de0 <Buzzer_SetFreq+0x60>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <Buzzer_SetFreq+0x64>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3a01      	subs	r2, #1
 8001db4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <Buzzer_SetFreq+0x60>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	4a08      	ldr	r2, [pc, #32]	@ (8001de4 <Buzzer_SetFreq+0x64>)
 8001dc2:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000000/freq/2-1);  //duty_ratio
 8001dc4:	4a08      	ldr	r2, [pc, #32]	@ (8001de8 <Buzzer_SetFreq+0x68>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <Buzzer_SetFreq+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3a01      	subs	r2, #1
 8001dd2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	000f4240 	.word	0x000f4240
 8001de4:	20000170 	.word	0x20000170
 8001de8:	0007a120 	.word	0x0007a120

08001dec <Buzzer_Start>:

void Buzzer_Start()
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, buzzerTimChannel);
 8001df0:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <Buzzer_Start+0x18>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <Buzzer_Start+0x1c>)
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 f89c 	bl	8003f38 <HAL_TIM_PWM_Start>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200002a8 	.word	0x200002a8
 8001e08:	200002ac 	.word	0x200002ac

08001e0c <Buzzer_Stop>:

void Buzzer_Stop()
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, buzzerTimChannel);
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <Buzzer_Stop+0x18>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <Buzzer_Stop+0x1c>)
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 f93c 	bl	8004098 <HAL_TIM_PWM_Stop>
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200002a8 	.word	0x200002a8
 8001e28:	200002ac 	.word	0x200002ac

08001e2c <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8001e34:	4a18      	ldr	r2, [pc, #96]	@ (8001e98 <LCD_Init+0x6c>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8001e3a:	2032      	movs	r0, #50	@ 0x32
 8001e3c:	f000 fa3a 	bl	80022b4 <HAL_Delay>
	LCD_cmdMode();
 8001e40:	f000 f852 	bl	8001ee8 <LCD_cmdMode>
	LCD_writeMode();
 8001e44:	f000 f862 	bl	8001f0c <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8001e48:	2030      	movs	r0, #48	@ 0x30
 8001e4a:	f000 f895 	bl	8001f78 <LCD_sendNibbleData>
	HAL_Delay(5);
 8001e4e:	2005      	movs	r0, #5
 8001e50:	f000 fa30 	bl	80022b4 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001e54:	2030      	movs	r0, #48	@ 0x30
 8001e56:	f000 f88f 	bl	8001f78 <LCD_sendNibbleData>
	HAL_Delay(1);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f000 fa2a 	bl	80022b4 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001e60:	2030      	movs	r0, #48	@ 0x30
 8001e62:	f000 f889 	bl	8001f78 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8001e66:	2020      	movs	r0, #32
 8001e68:	f000 f886 	bl	8001f78 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8001e6c:	2028      	movs	r0, #40	@ 0x28
 8001e6e:	f000 f8a7 	bl	8001fc0 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8001e72:	2008      	movs	r0, #8
 8001e74:	f000 f8a4 	bl	8001fc0 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f000 f8a1 	bl	8001fc0 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8001e7e:	2006      	movs	r0, #6
 8001e80:	f000 f89e 	bl	8001fc0 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8001e84:	200c      	movs	r0, #12
 8001e86:	f000 f89b 	bl	8001fc0 <LCD_sendData>
	LCD_backLightOn();
 8001e8a:	f000 f81d 	bl	8001ec8 <LCD_backLightOn>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200002b4 	.word	0x200002b4

08001e9c <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <LCD_sendI2C+0x28>)
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	1dfa      	adds	r2, r7, #7
 8001eac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	214e      	movs	r1, #78	@ 0x4e
 8001eb6:	f000 febf 	bl	8002c38 <HAL_I2C_Master_Transmit>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200002b4 	.word	0x200002b4

08001ec8 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <LCD_backLightOn+0x1c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <LCD_backLightOn+0x1c>)
 8001ed8:	701a      	strb	r2, [r3, #0]
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	200002b0 	.word	0x200002b0

08001ee8 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <LCD_cmdMode+0x20>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <LCD_cmdMode+0x20>)
 8001ef8:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001efa:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <LCD_cmdMode+0x20>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ffcc 	bl	8001e9c <LCD_sendI2C>
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200002b0 	.word	0x200002b0

08001f0c <LCD_writeMode>:
	lcdData |= (1<<LCD_RS);
	LCD_sendI2C(lcdData);
}

void LCD_writeMode()
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <LCD_writeMode+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	f023 0302 	bic.w	r3, r3, #2
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <LCD_writeMode+0x20>)
 8001f1c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001f1e:	4b03      	ldr	r3, [pc, #12]	@ (8001f2c <LCD_writeMode+0x20>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ffba 	bl	8001e9c <LCD_sendI2C>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200002b0 	.word	0x200002b0

08001f30 <LCD_E_High>:

void LCD_E_High()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <LCD_E_High+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <LCD_E_High+0x20>)
 8001f40:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001f42:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <LCD_E_High+0x20>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ffa8 	bl	8001e9c <LCD_sendI2C>
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200002b0 	.word	0x200002b0

08001f54 <LCD_E_Low>:

void LCD_E_Low()
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <LCD_E_Low+0x20>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <LCD_E_Low+0x20>)
 8001f64:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001f66:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <LCD_E_Low+0x20>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff96 	bl	8001e9c <LCD_sendI2C>
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200002b0 	.word	0x200002b0

08001f78 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001f82:	f7ff ffd5 	bl	8001f30 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	f023 030f 	bic.w	r3, r3, #15
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <LCD_sendNibbleData+0x44>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b25b      	sxtb	r3, r3
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <LCD_sendNibbleData+0x44>)
 8001fa4:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001fa6:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <LCD_sendNibbleData+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff76 	bl	8001e9c <LCD_sendI2C>
	LCD_E_Low();
 8001fb0:	f7ff ffd0 	bl	8001f54 <LCD_E_Low>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200002b0 	.word	0x200002b0

08001fc0 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ffd3 	bl	8001f78 <LCD_sendNibbleData>

	data = data << 4;
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ffcc 	bl	8001f78 <LCD_sendNibbleData>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <Motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t motorTimChannel;

void Motor_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
	hmotorTim = htim;
 8001ff2:	4a06      	ldr	r2, [pc, #24]	@ (800200c <Motor_Init+0x24>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6013      	str	r3, [r2, #0]
	motorTimChannel = channel;
 8001ff8:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <Motor_Init+0x28>)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6013      	str	r3, [r2, #0]

}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	200002b8 	.word	0x200002b8
 8002010:	200002bc 	.word	0x200002bc

08002014 <Motor_SetFreq>:

void Motor_SetFreq(uint32_t freq)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	if(freq - 1 < 100) freq = 100;    // 100 < freq <10kHz
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	2b63      	cmp	r3, #99	@ 0x63
 8002022:	d802      	bhi.n	800202a <Motor_SetFreq+0x16>
 8002024:	2364      	movs	r3, #100	@ 0x64
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	e007      	b.n	800203a <Motor_SetFreq+0x26>
	else if (freq > 10000) freq = 10000;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002030:	4293      	cmp	r3, r2
 8002032:	d902      	bls.n	800203a <Motor_SetFreq+0x26>
 8002034:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002038:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_AUTORELOAD(&htim1, 1000000 /freq -1);     // Set Counter
 800203a:	4a0e      	ldr	r2, [pc, #56]	@ (8002074 <Motor_SetFreq+0x60>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <Motor_SetFreq+0x64>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3a01      	subs	r2, #1
 8002048:	62da      	str	r2, [r3, #44]	@ 0x2c
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <Motor_SetFreq+0x60>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <Motor_SetFreq+0x64>)
 8002056:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000000/freq/2-1);  //duty_ratio
 8002058:	4a08      	ldr	r2, [pc, #32]	@ (800207c <Motor_SetFreq+0x68>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002060:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <Motor_SetFreq+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3a01      	subs	r2, #1
 8002066:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	000f4240 	.word	0x000f4240
 8002078:	200000e0 	.word	0x200000e0
 800207c:	0007a120 	.word	0x0007a120

08002080 <Motor_Start>:

void Motor_Start()
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, motorTimChannel);
 8002084:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <Motor_Start+0x18>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a04      	ldr	r2, [pc, #16]	@ (800209c <Motor_Start+0x1c>)
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f001 ff52 	bl	8003f38 <HAL_TIM_PWM_Start>
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200002b8 	.word	0x200002b8
 800209c:	200002bc 	.word	0x200002bc

080020a0 <Motor_Stop>:

void Motor_Stop()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hmotorTim, motorTimChannel);
 80020a4:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <Motor_Stop+0x18>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <Motor_Stop+0x1c>)
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 fff2 	bl	8004098 <HAL_TIM_PWM_Stop>
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200002b8 	.word	0x200002b8
 80020bc:	200002bc 	.word	0x200002bc

080020c0 <Ultra_Trigger_Input>:
static void Ultra_High();
static void Ultra_Low();


void Ultra_Trigger_Input()
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	//Ultra_Low();
	//Delay_us(20);
	Ultra_High();
 80020c4:	f000 f824 	bl	8002110 <Ultra_High>
	Delay_us(10);
 80020c8:	200a      	movs	r0, #10
 80020ca:	f000 f805 	bl	80020d8 <Delay_us>
	Ultra_Low();
 80020ce:	f000 f82b 	bl	8002128 <Ultra_Low>
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <Delay_us>:

void Delay_us(uint32_t time)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <Delay_us+0x34>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim1);
 80020e8:	4808      	ldr	r0, [pc, #32]	@ (800210c <Delay_us+0x34>)
 80020ea:	f001 fde7 	bl	8003cbc <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim1) < time){}
 80020ee:	bf00      	nop
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <Delay_us+0x34>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d8f9      	bhi.n	80020f0 <Delay_us+0x18>
    HAL_TIM_Base_Stop(&htim1);
 80020fc:	4803      	ldr	r0, [pc, #12]	@ (800210c <Delay_us+0x34>)
 80020fe:	f001 fe37 	bl	8003d70 <HAL_TIM_Base_Stop>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200000e0 	.word	0x200000e0

08002110 <Ultra_High>:


void Ultra_High()
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, UL_TRIGGER, SET);
 8002114:	2201      	movs	r2, #1
 8002116:	2120      	movs	r1, #32
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <Ultra_High+0x14>)
 800211a:	f000 fc2f 	bl	800297c <HAL_GPIO_WritePin>
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40020000 	.word	0x40020000

08002128 <Ultra_Low>:

void Ultra_Low()
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, UL_TRIGGER, RESET);
 800212c:	2200      	movs	r2, #0
 800212e:	2120      	movs	r1, #32
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <Ultra_Low+0x14>)
 8002132:	f000 fc23 	bl	800297c <HAL_GPIO_WritePin>
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40020000 	.word	0x40020000

08002140 <Ultra_Echo>:


//Controller
uint32_t Ultra_Echo()
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(GPIOA, UL_ECHO) == 0);
 8002146:	bf00      	nop
 8002148:	2140      	movs	r1, #64	@ 0x40
 800214a:	4811      	ldr	r0, [pc, #68]	@ (8002190 <Ultra_Echo+0x50>)
 800214c:	f000 fbfe 	bl	800294c <HAL_GPIO_ReadPin>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f8      	beq.n	8002148 <Ultra_Echo+0x8>

    uint32_t count = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
    while (HAL_GPIO_ReadPin(GPIOA, UL_ECHO) == 1)
 800215a:	e00a      	b.n	8002172 <Ultra_Echo+0x32>
    {
        if (count > 30000) break;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002162:	4293      	cmp	r3, r2
 8002164:	d80d      	bhi.n	8002182 <Ultra_Echo+0x42>
        count++;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3301      	adds	r3, #1
 800216a:	607b      	str	r3, [r7, #4]
        Delay_us(1);
 800216c:	2001      	movs	r0, #1
 800216e:	f7ff ffb3 	bl	80020d8 <Delay_us>
    while (HAL_GPIO_ReadPin(GPIOA, UL_ECHO) == 1)
 8002172:	2140      	movs	r1, #64	@ 0x40
 8002174:	4806      	ldr	r0, [pc, #24]	@ (8002190 <Ultra_Echo+0x50>)
 8002176:	f000 fbe9 	bl	800294c <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	2b01      	cmp	r3, #1
 800217e:	d0ed      	beq.n	800215c <Ultra_Echo+0x1c>
 8002180:	e000      	b.n	8002184 <Ultra_Echo+0x44>
        if (count > 30000) break;
 8002182:	bf00      	nop
    }

    return count;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40020000 	.word	0x40020000

08002194 <Ultra_Calculate>:

uint16_t Ultra_Calculate(uint32_t count)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	if(count != 0){
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <Ultra_Calculate+0x24>
		distance = count /58;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a08      	ldr	r2, [pc, #32]	@ (80021c8 <Ultra_Calculate+0x34>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <Ultra_Calculate+0x38>)
 80021b0:	801a      	strh	r2, [r3, #0]
		return distance;
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <Ultra_Calculate+0x38>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	e000      	b.n	80021ba <Ultra_Calculate+0x26>
	}
	else return 0;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	8d3dcb09 	.word	0x8d3dcb09
 80021cc:	200002c0 	.word	0x200002c0

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002210 <HAL_Init+0x40>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <HAL_Init+0x40>)
 80021e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <HAL_Init+0x40>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 f94f 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	200f      	movs	r0, #15
 8002200:	f000 f808 	bl	8002214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002204:	f7fe fb8e 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_InitTick+0x54>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_InitTick+0x58>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f967 	bl	8002506 <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00e      	b.n	8002260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d80a      	bhi.n	800225e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f000 f92f 	bl	80024b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4a06      	ldr	r2, [pc, #24]	@ (8002270 <HAL_InitTick+0x5c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000000 	.word	0x20000000
 800226c:	20000018 	.word	0x20000018
 8002270:	20000014 	.word	0x20000014

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000018 	.word	0x20000018
 8002298:	200002c4 	.word	0x200002c4

0800229c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200002c4 	.word	0x200002c4

080022b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff ffee 	bl	800229c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d005      	beq.n	80022da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_Delay+0x44>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022da:	bf00      	nop
 80022dc:	f7ff ffde 	bl	800229c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8f7      	bhi.n	80022dc <HAL_Delay+0x28>
  {
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000018 	.word	0x20000018

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4907      	ldr	r1, [pc, #28]	@ (8002398 <__NVIC_EnableIRQ+0x38>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	@ (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	@ (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	@ 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	@ 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff8e 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff29 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff3e 	bl	8002344 <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff8e 	bl	80023f0 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5d 	bl	800239c <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff31 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffa2 	bl	8002458 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff feb6 	bl	800229c <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d008      	beq.n	8002550 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2280      	movs	r2, #128	@ 0x80
 8002542:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e052      	b.n	80025f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0216 	bic.w	r2, r2, #22
 800255e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800256e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <HAL_DMA_Abort+0x62>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0208 	bic.w	r2, r2, #8
 800258e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a0:	e013      	b.n	80025ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a2:	f7ff fe7b 	bl	800229c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d90c      	bls.n	80025ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e015      	b.n	80025f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e4      	bne.n	80025a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025dc:	223f      	movs	r2, #63	@ 0x3f
 80025de:	409a      	lsls	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d004      	beq.n	800261c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2280      	movs	r2, #128	@ 0x80
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e00c      	b.n	8002636 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2205      	movs	r2, #5
 8002620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e159      	b.n	8002914 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8148 	bne.w	800290e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d005      	beq.n	8002696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002692:	2b02      	cmp	r3, #2
 8002694:	d130      	bne.n	80026f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0201 	and.w	r2, r3, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d017      	beq.n	8002734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80a2 	beq.w	800290e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b57      	ldr	r3, [pc, #348]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a56      	ldr	r2, [pc, #344]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027da:	4b54      	ldr	r3, [pc, #336]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027e6:	4a52      	ldr	r2, [pc, #328]	@ (8002930 <HAL_GPIO_Init+0x2ec>)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a49      	ldr	r2, [pc, #292]	@ (8002934 <HAL_GPIO_Init+0x2f0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d019      	beq.n	8002846 <HAL_GPIO_Init+0x202>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <HAL_GPIO_Init+0x2f4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0x1fe>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a47      	ldr	r2, [pc, #284]	@ (800293c <HAL_GPIO_Init+0x2f8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00d      	beq.n	800283e <HAL_GPIO_Init+0x1fa>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a46      	ldr	r2, [pc, #280]	@ (8002940 <HAL_GPIO_Init+0x2fc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0x1f6>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a45      	ldr	r2, [pc, #276]	@ (8002944 <HAL_GPIO_Init+0x300>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_GPIO_Init+0x1f2>
 8002832:	2304      	movs	r3, #4
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002836:	2307      	movs	r3, #7
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x204>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x204>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	@ (8002930 <HAL_GPIO_Init+0x2ec>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <HAL_GPIO_Init+0x304>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a2f      	ldr	r2, [pc, #188]	@ (8002948 <HAL_GPIO_Init+0x304>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <HAL_GPIO_Init+0x304>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a24      	ldr	r2, [pc, #144]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ba:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028de:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e4:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002908:	4a0f      	ldr	r2, [pc, #60]	@ (8002948 <HAL_GPIO_Init+0x304>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f aea2 	bls.w	8002660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40013c00 	.word	0x40013c00

0800294c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e001      	b.n	800296e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800296e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
 8002988:	4613      	mov	r3, r2
 800298a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800298c:	787b      	ldrb	r3, [r7, #1]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002998:	e003      	b.n	80029a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800299a:	887b      	ldrh	r3, [r7, #2]
 800299c:	041a      	lsls	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	619a      	str	r2, [r3, #24]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e12b      	b.n	8002c1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fd fed6 	bl	8000788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	@ 0x24
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a14:	f001 f8da 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8002a18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a81      	ldr	r2, [pc, #516]	@ (8002c24 <HAL_I2C_Init+0x274>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d807      	bhi.n	8002a34 <HAL_I2C_Init+0x84>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a80      	ldr	r2, [pc, #512]	@ (8002c28 <HAL_I2C_Init+0x278>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e006      	b.n	8002a42 <HAL_I2C_Init+0x92>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a7d      	ldr	r2, [pc, #500]	@ (8002c2c <HAL_I2C_Init+0x27c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	bf94      	ite	ls
 8002a3c:	2301      	movls	r3, #1
 8002a3e:	2300      	movhi	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0e7      	b.n	8002c1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a78      	ldr	r2, [pc, #480]	@ (8002c30 <HAL_I2C_Init+0x280>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9b      	lsrs	r3, r3, #18
 8002a54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a6a      	ldr	r2, [pc, #424]	@ (8002c24 <HAL_I2C_Init+0x274>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d802      	bhi.n	8002a84 <HAL_I2C_Init+0xd4>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3301      	adds	r3, #1
 8002a82:	e009      	b.n	8002a98 <HAL_I2C_Init+0xe8>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	4a69      	ldr	r2, [pc, #420]	@ (8002c34 <HAL_I2C_Init+0x284>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	3301      	adds	r3, #1
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002aaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	495c      	ldr	r1, [pc, #368]	@ (8002c24 <HAL_I2C_Init+0x274>)
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	d819      	bhi.n	8002aec <HAL_I2C_Init+0x13c>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e59      	subs	r1, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac6:	1c59      	adds	r1, r3, #1
 8002ac8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002acc:	400b      	ands	r3, r1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_I2C_Init+0x138>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1e59      	subs	r1, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	e051      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	e04f      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <HAL_I2C_Init+0x168>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e012      	b.n	8002b3e <HAL_I2C_Init+0x18e>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Init+0x196>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e022      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10e      	bne.n	8002b6c <HAL_I2C_Init+0x1bc>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1e58      	subs	r0, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	440b      	add	r3, r1
 8002b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b6a:	e00f      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	6809      	ldr	r1, [r1, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6911      	ldr	r1, [r2, #16]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	000186a0 	.word	0x000186a0
 8002c28:	001e847f 	.word	0x001e847f
 8002c2c:	003d08ff 	.word	0x003d08ff
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	10624dd3 	.word	0x10624dd3

08002c38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	461a      	mov	r2, r3
 8002c44:	460b      	mov	r3, r1
 8002c46:	817b      	strh	r3, [r7, #10]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7ff fb26 	bl	800229c <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	f040 80e0 	bne.w	8002e20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2319      	movs	r3, #25
 8002c66:	2201      	movs	r2, #1
 8002c68:	4970      	ldr	r1, [pc, #448]	@ (8002e2c <HAL_I2C_Master_Transmit+0x1f4>)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f964 	bl	8002f38 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
 8002c78:	e0d3      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_I2C_Master_Transmit+0x50>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0cc      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d007      	beq.n	8002cae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2221      	movs	r2, #33	@ 0x21
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	893a      	ldrh	r2, [r7, #8]
 8002cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a50      	ldr	r2, [pc, #320]	@ (8002e30 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cf0:	8979      	ldrh	r1, [r7, #10]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f89c 	bl	8002e34 <I2C_MasterRequestWrite>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e08d      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d1c:	e066      	b.n	8002dec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	6a39      	ldr	r1, [r7, #32]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fa22 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d107      	bne.n	8002d46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06b      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d11b      	bne.n	8002dc0 <HAL_I2C_Master_Transmit+0x188>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d017      	beq.n	8002dc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	6a39      	ldr	r1, [r7, #32]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fa19 	bl	80031fc <I2C_WaitOnBTFFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d107      	bne.n	8002de8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e01a      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d194      	bne.n	8002d1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e000      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e20:	2302      	movs	r3, #2
  }
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	00100002 	.word	0x00100002
 8002e30:	ffff0000 	.word	0xffff0000

08002e34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	460b      	mov	r3, r1
 8002e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d006      	beq.n	8002e5e <I2C_MasterRequestWrite+0x2a>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d003      	beq.n	8002e5e <I2C_MasterRequestWrite+0x2a>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e5c:	d108      	bne.n	8002e70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e00b      	b.n	8002e88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d107      	bne.n	8002e88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f84f 	bl	8002f38 <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eae:	d103      	bne.n	8002eb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e035      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ec4:	d108      	bne.n	8002ed8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ed4:	611a      	str	r2, [r3, #16]
 8002ed6:	e01b      	b.n	8002f10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ed8:	897b      	ldrh	r3, [r7, #10]
 8002eda:	11db      	asrs	r3, r3, #7
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 0306 	and.w	r3, r3, #6
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f063 030f 	orn	r3, r3, #15
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	490e      	ldr	r1, [pc, #56]	@ (8002f30 <I2C_MasterRequestWrite+0xfc>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f898 	bl	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e010      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4907      	ldr	r1, [pc, #28]	@ (8002f34 <I2C_MasterRequestWrite+0x100>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f888 	bl	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	00010008 	.word	0x00010008
 8002f34:	00010002 	.word	0x00010002

08002f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f48:	e048      	b.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d044      	beq.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7ff f9a3 	bl	800229c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d139      	bne.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10d      	bne.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	e00c      	b.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	43da      	mvns	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d116      	bne.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e023      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10d      	bne.n	8003002 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	43da      	mvns	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	e00c      	b.n	800301c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	429a      	cmp	r2, r3
 8003020:	d093      	beq.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800303a:	e071      	b.n	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304a:	d123      	bne.n	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800305a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	f043 0204 	orr.w	r2, r3, #4
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e067      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309a:	d041      	beq.n	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309c:	f7ff f8fe 	bl	800229c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d302      	bcc.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d136      	bne.n	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10c      	bne.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e00b      	b.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	43da      	mvns	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	4013      	ands	r3, r2
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d016      	beq.n	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e021      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d10c      	bne.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	43da      	mvns	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4013      	ands	r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e00b      	b.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	43da      	mvns	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4013      	ands	r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf14      	ite	ne
 8003156:	2301      	movne	r3, #1
 8003158:	2300      	moveq	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f af6d 	bne.w	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003178:	e034      	b.n	80031e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f886 	bl	800328c <I2C_IsAcknowledgeFailed>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e034      	b.n	80031f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d028      	beq.n	80031e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7ff f883 	bl	800229c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d11d      	bne.n	80031e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b2:	2b80      	cmp	r3, #128	@ 0x80
 80031b4:	d016      	beq.n	80031e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e007      	b.n	80031f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ee:	2b80      	cmp	r3, #128	@ 0x80
 80031f0:	d1c3      	bne.n	800317a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003208:	e034      	b.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f83e 	bl	800328c <I2C_IsAcknowledgeFailed>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e034      	b.n	8003284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d028      	beq.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003222:	f7ff f83b 	bl	800229c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11d      	bne.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b04      	cmp	r3, #4
 8003244:	d016      	beq.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e007      	b.n	8003284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b04      	cmp	r3, #4
 8003280:	d1c3      	bne.n	800320a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a2:	d11b      	bne.n	80032dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0204 	orr.w	r2, r3, #4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e267      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d075      	beq.n	80033f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800330a:	4b88      	ldr	r3, [pc, #544]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b04      	cmp	r3, #4
 8003314:	d00c      	beq.n	8003330 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003316:	4b85      	ldr	r3, [pc, #532]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800331e:	2b08      	cmp	r3, #8
 8003320:	d112      	bne.n	8003348 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003322:	4b82      	ldr	r3, [pc, #520]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800332a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800332e:	d10b      	bne.n	8003348 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	4b7e      	ldr	r3, [pc, #504]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d05b      	beq.n	80033f4 <HAL_RCC_OscConfig+0x108>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d157      	bne.n	80033f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e242      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003350:	d106      	bne.n	8003360 <HAL_RCC_OscConfig+0x74>
 8003352:	4b76      	ldr	r3, [pc, #472]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a75      	ldr	r2, [pc, #468]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01d      	b.n	800339c <HAL_RCC_OscConfig+0xb0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0x98>
 800336a:	4b70      	ldr	r3, [pc, #448]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a6f      	ldr	r2, [pc, #444]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b6d      	ldr	r3, [pc, #436]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6c      	ldr	r2, [pc, #432]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0xb0>
 8003384:	4b69      	ldr	r3, [pc, #420]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a68      	ldr	r2, [pc, #416]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b66      	ldr	r3, [pc, #408]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a65      	ldr	r2, [pc, #404]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800339a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe ff7a 	bl	800229c <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe ff76 	bl	800229c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	@ 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e207      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	4b5b      	ldr	r3, [pc, #364]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0xc0>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe ff66 	bl	800229c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe ff62 	bl	800229c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	@ 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1f3      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	4b51      	ldr	r3, [pc, #324]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0xe8>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003402:	4b4a      	ldr	r3, [pc, #296]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340e:	4b47      	ldr	r3, [pc, #284]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003416:	2b08      	cmp	r3, #8
 8003418:	d11c      	bne.n	8003454 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341a:	4b44      	ldr	r3, [pc, #272]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d116      	bne.n	8003454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	4b41      	ldr	r3, [pc, #260]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x152>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e1c7      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b3b      	ldr	r3, [pc, #236]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4937      	ldr	r1, [pc, #220]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	e03a      	b.n	80034ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345c:	4b34      	ldr	r3, [pc, #208]	@ (8003530 <HAL_RCC_OscConfig+0x244>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fe ff1b 	bl	800229c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346a:	f7fe ff17 	bl	800229c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1a8      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	4b2b      	ldr	r3, [pc, #172]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b28      	ldr	r3, [pc, #160]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4925      	ldr	r1, [pc, #148]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b24      	ldr	r3, [pc, #144]	@ (8003530 <HAL_RCC_OscConfig+0x244>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fefa 	bl	800229c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fe fef6 	bl	800229c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e187      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	4b1b      	ldr	r3, [pc, #108]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d036      	beq.n	8003544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034de:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <HAL_RCC_OscConfig+0x248>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe feda 	bl	800229c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fe fed6 	bl	800229c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e167      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_RCC_OscConfig+0x240>)
 8003500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x200>
 800350a:	e01b      	b.n	8003544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350c:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <HAL_RCC_OscConfig+0x248>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003512:	f7fe fec3 	bl	800229c <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	e00e      	b.n	8003538 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351a:	f7fe febf 	bl	800229c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d907      	bls.n	8003538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e150      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
 800352c:	40023800 	.word	0x40023800
 8003530:	42470000 	.word	0x42470000
 8003534:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003538:	4b88      	ldr	r3, [pc, #544]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 800353a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ea      	bne.n	800351a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8097 	beq.w	8003680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003556:	4b81      	ldr	r3, [pc, #516]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10f      	bne.n	8003582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	4b7d      	ldr	r3, [pc, #500]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	4a7c      	ldr	r2, [pc, #496]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 800356c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003570:	6413      	str	r3, [r2, #64]	@ 0x40
 8003572:	4b7a      	ldr	r3, [pc, #488]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357e:	2301      	movs	r3, #1
 8003580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003582:	4b77      	ldr	r3, [pc, #476]	@ (8003760 <HAL_RCC_OscConfig+0x474>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d118      	bne.n	80035c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800358e:	4b74      	ldr	r3, [pc, #464]	@ (8003760 <HAL_RCC_OscConfig+0x474>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a73      	ldr	r2, [pc, #460]	@ (8003760 <HAL_RCC_OscConfig+0x474>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359a:	f7fe fe7f 	bl	800229c <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a2:	f7fe fe7b 	bl	800229c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e10c      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003760 <HAL_RCC_OscConfig+0x474>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x2ea>
 80035c8:	4b64      	ldr	r3, [pc, #400]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035cc:	4a63      	ldr	r2, [pc, #396]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d4:	e01c      	b.n	8003610 <HAL_RCC_OscConfig+0x324>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x30c>
 80035de:	4b5f      	ldr	r3, [pc, #380]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e2:	4a5e      	ldr	r2, [pc, #376]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 80035e4:	f043 0304 	orr.w	r3, r3, #4
 80035e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ea:	4b5c      	ldr	r3, [pc, #368]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ee:	4a5b      	ldr	r2, [pc, #364]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f6:	e00b      	b.n	8003610 <HAL_RCC_OscConfig+0x324>
 80035f8:	4b58      	ldr	r3, [pc, #352]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fc:	4a57      	ldr	r2, [pc, #348]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	6713      	str	r3, [r2, #112]	@ 0x70
 8003604:	4b55      	ldr	r3, [pc, #340]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003608:	4a54      	ldr	r2, [pc, #336]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 800360a:	f023 0304 	bic.w	r3, r3, #4
 800360e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fe fe40 	bl	800229c <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fe fe3c 	bl	800229c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e0cb      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003636:	4b49      	ldr	r3, [pc, #292]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0ee      	beq.n	8003620 <HAL_RCC_OscConfig+0x334>
 8003642:	e014      	b.n	800366e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003644:	f7fe fe2a 	bl	800229c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fe fe26 	bl	800229c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e0b5      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003662:	4b3e      	ldr	r3, [pc, #248]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1ee      	bne.n	800364c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003674:	4b39      	ldr	r3, [pc, #228]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	4a38      	ldr	r2, [pc, #224]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 800367a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800367e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80a1 	beq.w	80037cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800368a:	4b34      	ldr	r3, [pc, #208]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b08      	cmp	r3, #8
 8003694:	d05c      	beq.n	8003750 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d141      	bne.n	8003722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369e:	4b31      	ldr	r3, [pc, #196]	@ (8003764 <HAL_RCC_OscConfig+0x478>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fe fdfa 	bl	800229c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe fdf6 	bl	800229c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e087      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	4b27      	ldr	r3, [pc, #156]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	019b      	lsls	r3, r3, #6
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	3b01      	subs	r3, #1
 80036e4:	041b      	lsls	r3, r3, #16
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	491b      	ldr	r1, [pc, #108]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003764 <HAL_RCC_OscConfig+0x478>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe fdcf 	bl	800229c <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003702:	f7fe fdcb 	bl	800229c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e05c      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003714:	4b11      	ldr	r3, [pc, #68]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x416>
 8003720:	e054      	b.n	80037cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b10      	ldr	r3, [pc, #64]	@ (8003764 <HAL_RCC_OscConfig+0x478>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe fdb8 	bl	800229c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003730:	f7fe fdb4 	bl	800229c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e045      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_RCC_OscConfig+0x470>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x444>
 800374e:	e03d      	b.n	80037cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e038      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
 800375c:	40023800 	.word	0x40023800
 8003760:	40007000 	.word	0x40007000
 8003764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003768:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <HAL_RCC_OscConfig+0x4ec>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d028      	beq.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d121      	bne.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d11a      	bne.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003798:	4013      	ands	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800379e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d111      	bne.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	3b01      	subs	r3, #1
 80037b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800

080037dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0cc      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b68      	ldr	r3, [pc, #416]	@ (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d90c      	bls.n	8003818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b65      	ldr	r3, [pc, #404]	@ (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b63      	ldr	r3, [pc, #396]	@ (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0b8      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003830:	4b59      	ldr	r3, [pc, #356]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4a58      	ldr	r2, [pc, #352]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800383a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003848:	4b53      	ldr	r3, [pc, #332]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a52      	ldr	r2, [pc, #328]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b50      	ldr	r3, [pc, #320]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	494d      	ldr	r1, [pc, #308]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d044      	beq.n	80038fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b47      	ldr	r3, [pc, #284]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d119      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07f      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d003      	beq.n	800389a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003896:	2b03      	cmp	r3, #3
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	4b3f      	ldr	r3, [pc, #252]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06f      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e067      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ba:	4b37      	ldr	r3, [pc, #220]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4934      	ldr	r1, [pc, #208]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038cc:	f7fe fce6 	bl	800229c <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fe fce2 	bl	800229c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e04f      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 020c 	and.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1eb      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038fc:	4b25      	ldr	r3, [pc, #148]	@ (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d20c      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b22      	ldr	r3, [pc, #136]	@ (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e032      	b.n	800398a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4916      	ldr	r1, [pc, #88]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394e:	4b12      	ldr	r3, [pc, #72]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	490e      	ldr	r1, [pc, #56]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003962:	f000 f821 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	490a      	ldr	r1, [pc, #40]	@ (800399c <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	5ccb      	ldrb	r3, [r1, r3]
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800397e:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fc46 	bl	8002214 <HAL_InitTick>

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40023c00 	.word	0x40023c00
 8003998:	40023800 	.word	0x40023800
 800399c:	08006968 	.word	0x08006968
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20000014 	.word	0x20000014

080039a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ac:	b094      	sub	sp, #80	@ 0x50
 80039ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c0:	4b79      	ldr	r3, [pc, #484]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d00d      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x40>
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	f200 80e1 	bhi.w	8003b94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x34>
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d003      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039da:	e0db      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b73      	ldr	r3, [pc, #460]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x204>)
 80039de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e0:	e0db      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039e2:	4b73      	ldr	r3, [pc, #460]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x208>)
 80039e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e6:	e0d8      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e8:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039f2:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d063      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fe:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	099b      	lsrs	r3, r3, #6
 8003a04:	2200      	movs	r2, #0
 8003a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a12:	2300      	movs	r3, #0
 8003a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	f04f 0000 	mov.w	r0, #0
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	0159      	lsls	r1, r3, #5
 8003a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a2c:	0150      	lsls	r0, r2, #5
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4621      	mov	r1, r4
 8003a34:	1a51      	subs	r1, r2, r1
 8003a36:	6139      	str	r1, [r7, #16]
 8003a38:	4629      	mov	r1, r5
 8003a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a4c:	4659      	mov	r1, fp
 8003a4e:	018b      	lsls	r3, r1, #6
 8003a50:	4651      	mov	r1, sl
 8003a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a56:	4651      	mov	r1, sl
 8003a58:	018a      	lsls	r2, r1, #6
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a60:	4659      	mov	r1, fp
 8003a62:	eb63 0901 	sbc.w	r9, r3, r1
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a7a:	4690      	mov	r8, r2
 8003a7c:	4699      	mov	r9, r3
 8003a7e:	4623      	mov	r3, r4
 8003a80:	eb18 0303 	adds.w	r3, r8, r3
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	462b      	mov	r3, r5
 8003a88:	eb49 0303 	adc.w	r3, r9, r3
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	024b      	lsls	r3, r1, #9
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	024a      	lsls	r2, r1, #9
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aae:	2200      	movs	r2, #0
 8003ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ab8:	f7fc fbfa 	bl	80002b0 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac4:	e058      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b38      	ldr	r3, [pc, #224]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	2200      	movs	r2, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8003adc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	f04f 0000 	mov.w	r0, #0
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	0159      	lsls	r1, r3, #5
 8003aee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af2:	0150      	lsls	r0, r2, #5
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4641      	mov	r1, r8
 8003afa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003afe:	4649      	mov	r1, r9
 8003b00:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b18:	ebb2 040a 	subs.w	r4, r2, sl
 8003b1c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	00eb      	lsls	r3, r5, #3
 8003b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b2e:	00e2      	lsls	r2, r4, #3
 8003b30:	4614      	mov	r4, r2
 8003b32:	461d      	mov	r5, r3
 8003b34:	4643      	mov	r3, r8
 8003b36:	18e3      	adds	r3, r4, r3
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	eb45 0303 	adc.w	r3, r5, r3
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b4e:	4629      	mov	r1, r5
 8003b50:	028b      	lsls	r3, r1, #10
 8003b52:	4621      	mov	r1, r4
 8003b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b58:	4621      	mov	r1, r4
 8003b5a:	028a      	lsls	r2, r1, #10
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b62:	2200      	movs	r2, #0
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	61fa      	str	r2, [r7, #28]
 8003b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6c:	f7fc fba0 	bl	80002b0 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4613      	mov	r3, r2
 8003b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	3301      	adds	r3, #1
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b92:	e002      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b05      	ldr	r3, [pc, #20]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x204>)
 8003b96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3750      	adds	r7, #80	@ 0x50
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	00f42400 	.word	0x00f42400
 8003bb0:	007a1200 	.word	0x007a1200

08003bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	@ (8003bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000000 	.word	0x20000000

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bd0:	f7ff fff0 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0a9b      	lsrs	r3, r3, #10
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	@ (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	08006978 	.word	0x08006978

08003bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bf8:	f7ff ffdc 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0b5b      	lsrs	r3, r3, #13
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4903      	ldr	r1, [pc, #12]	@ (8003c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	08006978 	.word	0x08006978

08003c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e041      	b.n	8003cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd f886 	bl	8000d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f000 fd22 	bl	80046a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d001      	beq.n	8003cd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e03c      	b.n	8003d4e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d5c <HAL_TIM_Base_Start+0xa0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d018      	beq.n	8003d18 <HAL_TIM_Base_Start+0x5c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cee:	d013      	beq.n	8003d18 <HAL_TIM_Base_Start+0x5c>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d60 <HAL_TIM_Base_Start+0xa4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00e      	beq.n	8003d18 <HAL_TIM_Base_Start+0x5c>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a19      	ldr	r2, [pc, #100]	@ (8003d64 <HAL_TIM_Base_Start+0xa8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_TIM_Base_Start+0x5c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a17      	ldr	r2, [pc, #92]	@ (8003d68 <HAL_TIM_Base_Start+0xac>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <HAL_TIM_Base_Start+0x5c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a16      	ldr	r2, [pc, #88]	@ (8003d6c <HAL_TIM_Base_Start+0xb0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d111      	bne.n	8003d3c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d010      	beq.n	8003d4c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3a:	e007      	b.n	8003d4c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40000c00 	.word	0x40000c00
 8003d6c:	40014000 	.word	0x40014000

08003d70 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a1a      	ldr	r2, [r3, #32]
 8003d7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10f      	bne.n	8003da8 <HAL_TIM_Base_Stop+0x38>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d107      	bne.n	8003da8 <HAL_TIM_Base_Stop+0x38>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d001      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e044      	b.n	8003e62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e70 <HAL_TIM_Base_Start_IT+0xb0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d018      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x6c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e02:	d013      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x6c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1a      	ldr	r2, [pc, #104]	@ (8003e74 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x6c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a19      	ldr	r2, [pc, #100]	@ (8003e78 <HAL_TIM_Base_Start_IT+0xb8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x6c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <HAL_TIM_Base_Start_IT+0xbc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x6c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a16      	ldr	r2, [pc, #88]	@ (8003e80 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d111      	bne.n	8003e50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b06      	cmp	r3, #6
 8003e3c:	d010      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4e:	e007      	b.n	8003e60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40014000 	.word	0x40014000

08003e84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e041      	b.n	8003f1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f839 	bl	8003f22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f000 fbee 	bl	80046a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_TIM_PWM_Start+0x24>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e022      	b.n	8003fa2 <HAL_TIM_PWM_Start+0x6a>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d109      	bne.n	8003f76 <HAL_TIM_PWM_Start+0x3e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	bf14      	ite	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	2300      	moveq	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	e015      	b.n	8003fa2 <HAL_TIM_PWM_Start+0x6a>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d109      	bne.n	8003f90 <HAL_TIM_PWM_Start+0x58>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	bf14      	ite	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	2300      	moveq	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e008      	b.n	8003fa2 <HAL_TIM_PWM_Start+0x6a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e068      	b.n	800407c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_PWM_Start+0x82>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb8:	e013      	b.n	8003fe2 <HAL_TIM_PWM_Start+0xaa>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_PWM_Start+0x92>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc8:	e00b      	b.n	8003fe2 <HAL_TIM_PWM_Start+0xaa>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_PWM_Start+0xa2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd8:	e003      	b.n	8003fe2 <HAL_TIM_PWM_Start+0xaa>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fe06 	bl	8004bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a23      	ldr	r2, [pc, #140]	@ (8004084 <HAL_TIM_PWM_Start+0x14c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d107      	bne.n	800400a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004008:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1d      	ldr	r2, [pc, #116]	@ (8004084 <HAL_TIM_PWM_Start+0x14c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_TIM_PWM_Start+0x10e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800401c:	d013      	beq.n	8004046 <HAL_TIM_PWM_Start+0x10e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a19      	ldr	r2, [pc, #100]	@ (8004088 <HAL_TIM_PWM_Start+0x150>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_TIM_PWM_Start+0x10e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a17      	ldr	r2, [pc, #92]	@ (800408c <HAL_TIM_PWM_Start+0x154>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_TIM_PWM_Start+0x10e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a16      	ldr	r2, [pc, #88]	@ (8004090 <HAL_TIM_PWM_Start+0x158>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_TIM_PWM_Start+0x10e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a14      	ldr	r2, [pc, #80]	@ (8004094 <HAL_TIM_PWM_Start+0x15c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d111      	bne.n	800406a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b06      	cmp	r3, #6
 8004056:	d010      	beq.n	800407a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004068:	e007      	b.n	800407a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40010000 	.word	0x40010000
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40000c00 	.word	0x40000c00
 8004094:	40014000 	.word	0x40014000

08004098 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2200      	movs	r2, #0
 80040a8:	6839      	ldr	r1, [r7, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fda6 	bl	8004bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a29      	ldr	r2, [pc, #164]	@ (800415c <HAL_TIM_PWM_Stop+0xc4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d117      	bne.n	80040ea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <HAL_TIM_PWM_Stop+0x52>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a1a      	ldr	r2, [r3, #32]
 80040d0:	f240 4344 	movw	r3, #1092	@ 0x444
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d107      	bne.n	80040ea <HAL_TIM_PWM_Stop+0x52>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6a1a      	ldr	r2, [r3, #32]
 80040f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10f      	bne.n	800411a <HAL_TIM_PWM_Stop+0x82>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	f240 4344 	movw	r3, #1092	@ 0x444
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <HAL_TIM_PWM_Stop+0x82>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <HAL_TIM_PWM_Stop+0x92>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004128:	e013      	b.n	8004152 <HAL_TIM_PWM_Stop+0xba>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b04      	cmp	r3, #4
 800412e:	d104      	bne.n	800413a <HAL_TIM_PWM_Stop+0xa2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004138:	e00b      	b.n	8004152 <HAL_TIM_PWM_Stop+0xba>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d104      	bne.n	800414a <HAL_TIM_PWM_Stop+0xb2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004148:	e003      	b.n	8004152 <HAL_TIM_PWM_Stop+0xba>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40010000 	.word	0x40010000

08004160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d020      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01b      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0202 	mvn.w	r2, #2
 8004194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa5b 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 80041b0:	e005      	b.n	80041be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fa4d 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fa5e 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d020      	beq.n	8004210 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01b      	beq.n	8004210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0204 	mvn.w	r2, #4
 80041e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2202      	movs	r2, #2
 80041e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fa35 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa27 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fa38 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d020      	beq.n	800425c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01b      	beq.n	800425c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0208 	mvn.w	r2, #8
 800422c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2204      	movs	r2, #4
 8004232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fa0f 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 8004248:	e005      	b.n	8004256 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fa01 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fa12 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d020      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01b      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0210 	mvn.w	r2, #16
 8004278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2208      	movs	r2, #8
 800427e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f9e9 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f9db 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f9ec 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0201 	mvn.w	r2, #1
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd fae0 	bl	800188c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00c      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fd76 	bl	8004ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f9bd 	bl	800468e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00c      	beq.n	8004338 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0220 	mvn.w	r2, #32
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fd48 	bl	8004dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800435a:	2302      	movs	r3, #2
 800435c:	e0ae      	b.n	80044bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	f200 809f 	bhi.w	80044ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800436e:	a201      	add	r2, pc, #4	@ (adr r2, 8004374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080044ad 	.word	0x080044ad
 800437c:	080044ad 	.word	0x080044ad
 8004380:	080044ad 	.word	0x080044ad
 8004384:	080043e9 	.word	0x080043e9
 8004388:	080044ad 	.word	0x080044ad
 800438c:	080044ad 	.word	0x080044ad
 8004390:	080044ad 	.word	0x080044ad
 8004394:	0800442b 	.word	0x0800442b
 8004398:	080044ad 	.word	0x080044ad
 800439c:	080044ad 	.word	0x080044ad
 80043a0:	080044ad 	.word	0x080044ad
 80043a4:	0800446b 	.word	0x0800446b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f9fe 	bl	80047b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0208 	orr.w	r2, r2, #8
 80043c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0204 	bic.w	r2, r2, #4
 80043d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6999      	ldr	r1, [r3, #24]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	619a      	str	r2, [r3, #24]
      break;
 80043e6:	e064      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fa44 	bl	800487c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6999      	ldr	r1, [r3, #24]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	021a      	lsls	r2, r3, #8
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	619a      	str	r2, [r3, #24]
      break;
 8004428:	e043      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fa8f 	bl	8004954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0208 	orr.w	r2, r2, #8
 8004444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0204 	bic.w	r2, r2, #4
 8004454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69d9      	ldr	r1, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	61da      	str	r2, [r3, #28]
      break;
 8004468:	e023      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fad9 	bl	8004a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69d9      	ldr	r1, [r3, #28]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	021a      	lsls	r2, r3, #8
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	61da      	str	r2, [r3, #28]
      break;
 80044aa:	e002      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	75fb      	strb	r3, [r7, #23]
      break;
 80044b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_TIM_ConfigClockSource+0x1c>
 80044dc:	2302      	movs	r3, #2
 80044de:	e0b4      	b.n	800464a <HAL_TIM_ConfigClockSource+0x186>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004518:	d03e      	beq.n	8004598 <HAL_TIM_ConfigClockSource+0xd4>
 800451a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800451e:	f200 8087 	bhi.w	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004526:	f000 8086 	beq.w	8004636 <HAL_TIM_ConfigClockSource+0x172>
 800452a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452e:	d87f      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004530:	2b70      	cmp	r3, #112	@ 0x70
 8004532:	d01a      	beq.n	800456a <HAL_TIM_ConfigClockSource+0xa6>
 8004534:	2b70      	cmp	r3, #112	@ 0x70
 8004536:	d87b      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004538:	2b60      	cmp	r3, #96	@ 0x60
 800453a:	d050      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x11a>
 800453c:	2b60      	cmp	r3, #96	@ 0x60
 800453e:	d877      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004540:	2b50      	cmp	r3, #80	@ 0x50
 8004542:	d03c      	beq.n	80045be <HAL_TIM_ConfigClockSource+0xfa>
 8004544:	2b50      	cmp	r3, #80	@ 0x50
 8004546:	d873      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004548:	2b40      	cmp	r3, #64	@ 0x40
 800454a:	d058      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x13a>
 800454c:	2b40      	cmp	r3, #64	@ 0x40
 800454e:	d86f      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b30      	cmp	r3, #48	@ 0x30
 8004552:	d064      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 8004554:	2b30      	cmp	r3, #48	@ 0x30
 8004556:	d86b      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d060      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 800455c:	2b20      	cmp	r3, #32
 800455e:	d867      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05c      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 8004564:	2b10      	cmp	r3, #16
 8004566:	d05a      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 8004568:	e062      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800457a:	f000 fb1f 	bl	8004bbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800458c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	609a      	str	r2, [r3, #8]
      break;
 8004596:	e04f      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a8:	f000 fb08 	bl	8004bbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045ba:	609a      	str	r2, [r3, #8]
      break;
 80045bc:	e03c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ca:	461a      	mov	r2, r3
 80045cc:	f000 fa7c 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2150      	movs	r1, #80	@ 0x50
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fad5 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 80045dc:	e02c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ea:	461a      	mov	r2, r3
 80045ec:	f000 fa9b 	bl	8004b26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2160      	movs	r1, #96	@ 0x60
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fac5 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 80045fc:	e01c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800460a:	461a      	mov	r2, r3
 800460c:	f000 fa5c 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2140      	movs	r1, #64	@ 0x40
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fab5 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 800461c:	e00c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f000 faac 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 800462e:	e003      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e000      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004648:	7bfb      	ldrb	r3, [r7, #15]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a37      	ldr	r2, [pc, #220]	@ (8004794 <TIM_Base_SetConfig+0xf0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00f      	beq.n	80046dc <TIM_Base_SetConfig+0x38>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c2:	d00b      	beq.n	80046dc <TIM_Base_SetConfig+0x38>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a34      	ldr	r2, [pc, #208]	@ (8004798 <TIM_Base_SetConfig+0xf4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d007      	beq.n	80046dc <TIM_Base_SetConfig+0x38>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a33      	ldr	r2, [pc, #204]	@ (800479c <TIM_Base_SetConfig+0xf8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_Base_SetConfig+0x38>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a32      	ldr	r2, [pc, #200]	@ (80047a0 <TIM_Base_SetConfig+0xfc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d108      	bne.n	80046ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a28      	ldr	r2, [pc, #160]	@ (8004794 <TIM_Base_SetConfig+0xf0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01b      	beq.n	800472e <TIM_Base_SetConfig+0x8a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fc:	d017      	beq.n	800472e <TIM_Base_SetConfig+0x8a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a25      	ldr	r2, [pc, #148]	@ (8004798 <TIM_Base_SetConfig+0xf4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <TIM_Base_SetConfig+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a24      	ldr	r2, [pc, #144]	@ (800479c <TIM_Base_SetConfig+0xf8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00f      	beq.n	800472e <TIM_Base_SetConfig+0x8a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a23      	ldr	r2, [pc, #140]	@ (80047a0 <TIM_Base_SetConfig+0xfc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00b      	beq.n	800472e <TIM_Base_SetConfig+0x8a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a22      	ldr	r2, [pc, #136]	@ (80047a4 <TIM_Base_SetConfig+0x100>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <TIM_Base_SetConfig+0x8a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a21      	ldr	r2, [pc, #132]	@ (80047a8 <TIM_Base_SetConfig+0x104>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_Base_SetConfig+0x8a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a20      	ldr	r2, [pc, #128]	@ (80047ac <TIM_Base_SetConfig+0x108>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d108      	bne.n	8004740 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a0c      	ldr	r2, [pc, #48]	@ (8004794 <TIM_Base_SetConfig+0xf0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d103      	bne.n	800476e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f043 0204 	orr.w	r2, r3, #4
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800

080047b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f023 0201 	bic.w	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0303 	bic.w	r3, r3, #3
 80047e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f023 0302 	bic.w	r3, r3, #2
 80047f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1c      	ldr	r2, [pc, #112]	@ (8004878 <TIM_OC1_SetConfig+0xc8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10c      	bne.n	8004826 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0308 	bic.w	r3, r3, #8
 8004812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a13      	ldr	r2, [pc, #76]	@ (8004878 <TIM_OC1_SetConfig+0xc8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d111      	bne.n	8004852 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800483c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	621a      	str	r2, [r3, #32]
}
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	40010000 	.word	0x40010000

0800487c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f023 0210 	bic.w	r2, r3, #16
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0320 	bic.w	r3, r3, #32
 80048c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004950 <TIM_OC2_SetConfig+0xd4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10d      	bne.n	80048f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <TIM_OC2_SetConfig+0xd4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d113      	bne.n	8004928 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800490e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000

08004954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800499c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	021b      	lsls	r3, r3, #8
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004a24 <TIM_OC3_SetConfig+0xd0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d10d      	bne.n	80049ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a14      	ldr	r2, [pc, #80]	@ (8004a24 <TIM_OC3_SetConfig+0xd0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d113      	bne.n	80049fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	621a      	str	r2, [r3, #32]
}
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	40010000 	.word	0x40010000

08004a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	031b      	lsls	r3, r3, #12
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a10      	ldr	r2, [pc, #64]	@ (8004ac4 <TIM_OC4_SetConfig+0x9c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d109      	bne.n	8004a9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	019b      	lsls	r3, r3, #6
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000

08004ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 030a 	bic.w	r3, r3, #10
 8004b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b087      	sub	sp, #28
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f023 0210 	bic.w	r2, r3, #16
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	031b      	lsls	r3, r3, #12
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f043 0307 	orr.w	r3, r3, #7
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	2201      	movs	r2, #1
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	401a      	ands	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1a      	ldr	r2, [r3, #32]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	431a      	orrs	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e050      	b.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d018      	beq.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cac:	d013      	beq.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a18      	ldr	r2, [pc, #96]	@ (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00e      	beq.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a16      	ldr	r2, [pc, #88]	@ (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d009      	beq.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a15      	ldr	r2, [pc, #84]	@ (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d004      	beq.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a13      	ldr	r2, [pc, #76]	@ (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40014000 	.word	0x40014000

08004d24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e03d      	b.n	8004dbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e042      	b.n	8004e88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fc f87a 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2224      	movs	r2, #36	@ 0x24
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fdd3 	bl	80059e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	@ 0x28
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d175      	bne.n	8004f9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_UART_Transmit+0x2c>
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e06e      	b.n	8004f9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2221      	movs	r2, #33	@ 0x21
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ece:	f7fd f9e5 	bl	800229c <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	88fa      	ldrh	r2, [r7, #6]
 8004ed8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	88fa      	ldrh	r2, [r7, #6]
 8004ede:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee8:	d108      	bne.n	8004efc <HAL_UART_Transmit+0x6c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d104      	bne.n	8004efc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e003      	b.n	8004f04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f04:	e02e      	b.n	8004f64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2180      	movs	r1, #128	@ 0x80
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fb37 	bl	8005584 <UART_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e03a      	b.n	8004f9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	3302      	adds	r3, #2
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	e007      	b.n	8004f56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	3301      	adds	r3, #1
 8004f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1cb      	bne.n	8004f06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2200      	movs	r2, #0
 8004f76:	2140      	movs	r1, #64	@ 0x40
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fb03 	bl	8005584 <UART_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e006      	b.n	8004f9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d112      	bne.n	8004fe6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_UART_Receive_IT+0x26>
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e00b      	b.n	8004fe8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fb2a 	bl	8005636 <UART_Start_Receive_IT>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	e000      	b.n	8004fe8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005016:	2300      	movs	r3, #0
 8005018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800501c:	2300      	movs	r3, #0
 800501e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800502e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10f      	bne.n	8005056 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_UART_IRQHandler+0x66>
 8005042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fc07 	bl	8005862 <UART_Receive_IT>
      return;
 8005054:	e273      	b.n	800553e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 80de 	beq.w	800521c <HAL_UART_IRQHandler+0x22c>
 8005060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800506c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005070:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80d1 	beq.w	800521c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00b      	beq.n	800509e <HAL_UART_IRQHandler+0xae>
 8005086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800508a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	f043 0201 	orr.w	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <HAL_UART_IRQHandler+0xd2>
 80050aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ba:	f043 0202 	orr.w	r2, r3, #2
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HAL_UART_IRQHandler+0xf6>
 80050ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050de:	f043 0204 	orr.w	r2, r3, #4
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d011      	beq.n	8005116 <HAL_UART_IRQHandler+0x126>
 80050f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d105      	bne.n	800510a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	f043 0208 	orr.w	r2, r3, #8
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 820a 	beq.w	8005534 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_UART_IRQHandler+0x14e>
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fb92 	bl	8005862 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b40      	cmp	r3, #64	@ 0x40
 800514a:	bf0c      	ite	eq
 800514c:	2301      	moveq	r3, #1
 800514e:	2300      	movne	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <HAL_UART_IRQHandler+0x17a>
 8005162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005166:	2b00      	cmp	r3, #0
 8005168:	d04f      	beq.n	800520a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fa9d 	bl	80056aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517a:	2b40      	cmp	r3, #64	@ 0x40
 800517c:	d141      	bne.n	8005202 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3314      	adds	r3, #20
 8005184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800519c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3314      	adds	r3, #20
 80051a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1d9      	bne.n	800517e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d013      	beq.n	80051fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d6:	4a8a      	ldr	r2, [pc, #552]	@ (8005400 <HAL_UART_IRQHandler+0x410>)
 80051d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fd fa0d 	bl	80025fe <HAL_DMA_Abort_IT>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d016      	beq.n	8005218 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051f4:	4610      	mov	r0, r2
 80051f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f8:	e00e      	b.n	8005218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f9ac 	bl	8005558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	e00a      	b.n	8005218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f9a8 	bl	8005558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005208:	e006      	b.n	8005218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f9a4 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005216:	e18d      	b.n	8005534 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	bf00      	nop
    return;
 800521a:	e18b      	b.n	8005534 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005220:	2b01      	cmp	r3, #1
 8005222:	f040 8167 	bne.w	80054f4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8160 	beq.w	80054f4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8159 	beq.w	80054f4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005242:	2300      	movs	r3, #0
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005262:	2b40      	cmp	r3, #64	@ 0x40
 8005264:	f040 80ce 	bne.w	8005404 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005274:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80a9 	beq.w	80053d0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005286:	429a      	cmp	r2, r3
 8005288:	f080 80a2 	bcs.w	80053d0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005292:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800529e:	f000 8088 	beq.w	80053b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80052ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1d9      	bne.n	80052a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3314      	adds	r3, #20
 80052f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005300:	f023 0301 	bic.w	r3, r3, #1
 8005304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3314      	adds	r3, #20
 800530e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005312:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005316:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800531a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e1      	bne.n	80052ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800533a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800533c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005340:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3314      	adds	r3, #20
 800534a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800534e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005350:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005354:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800535c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e3      	bne.n	800532a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005382:	f023 0310 	bic.w	r3, r3, #16
 8005386:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005394:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005396:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800539a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e3      	bne.n	8005370 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fd f8b6 	bl	800251e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2202      	movs	r2, #2
 80053b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8cf 	bl	800556c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80053ce:	e0b3      	b.n	8005538 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053d8:	429a      	cmp	r2, r3
 80053da:	f040 80ad 	bne.w	8005538 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053e8:	f040 80a6 	bne.w	8005538 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8b7 	bl	800556c <HAL_UARTEx_RxEventCallback>
      return;
 80053fe:	e09b      	b.n	8005538 <HAL_UART_IRQHandler+0x548>
 8005400:	08005771 	.word	0x08005771
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800540c:	b29b      	uxth	r3, r3
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 808e 	beq.w	800553c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8089 	beq.w	800553c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800543a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	330c      	adds	r3, #12
 800544a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800544e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005450:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800545c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e3      	bne.n	800542a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	623b      	str	r3, [r7, #32]
   return(result);
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	f023 0301 	bic.w	r3, r3, #1
 8005478:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3314      	adds	r3, #20
 8005482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005486:	633a      	str	r2, [r7, #48]	@ 0x30
 8005488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800548c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e3      	bne.n	8005462 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	330c      	adds	r3, #12
 80054ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0310 	bic.w	r3, r3, #16
 80054be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054cc:	61fa      	str	r2, [r7, #28]
 80054ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	617b      	str	r3, [r7, #20]
   return(result);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e3      	bne.n	80054a8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f83d 	bl	800556c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054f2:	e023      	b.n	800553c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <HAL_UART_IRQHandler+0x524>
 8005500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f940 	bl	8005792 <UART_Transmit_IT>
    return;
 8005512:	e014      	b.n	800553e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <HAL_UART_IRQHandler+0x54e>
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f980 	bl	8005832 <UART_EndTransmit_IT>
    return;
 8005532:	e004      	b.n	800553e <HAL_UART_IRQHandler+0x54e>
    return;
 8005534:	bf00      	nop
 8005536:	e002      	b.n	800553e <HAL_UART_IRQHandler+0x54e>
      return;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <HAL_UART_IRQHandler+0x54e>
      return;
 800553c:	bf00      	nop
  }
}
 800553e:	37e8      	adds	r7, #232	@ 0xe8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005594:	e03b      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d037      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fc fe7d 	bl	800229c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e03a      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d023      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b80      	cmp	r3, #128	@ 0x80
 80055ca:	d020      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b40      	cmp	r3, #64	@ 0x40
 80055d0:	d01d      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d116      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f857 	bl	80056aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2208      	movs	r2, #8
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e00f      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4013      	ands	r3, r2
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	429a      	cmp	r2, r3
 800561c:	bf0c      	ite	eq
 800561e:	2301      	moveq	r3, #1
 8005620:	2300      	movne	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	429a      	cmp	r2, r3
 800562a:	d0b4      	beq.n	8005596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	4613      	mov	r3, r2
 8005642:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2222      	movs	r2, #34	@ 0x22
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800567a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0220 	orr.w	r2, r2, #32
 800569a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b095      	sub	sp, #84	@ 0x54
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80056d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e5      	bne.n	80056b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3314      	adds	r3, #20
 80056ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3314      	adds	r3, #20
 8005704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005708:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800570c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e5      	bne.n	80056e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571e:	2b01      	cmp	r3, #1
 8005720:	d119      	bne.n	8005756 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	60bb      	str	r3, [r7, #8]
   return(result);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f023 0310 	bic.w	r3, r3, #16
 8005738:	647b      	str	r3, [r7, #68]	@ 0x44
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005742:	61ba      	str	r2, [r7, #24]
 8005744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6979      	ldr	r1, [r7, #20]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	613b      	str	r3, [r7, #16]
   return(result);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005764:	bf00      	nop
 8005766:	3754      	adds	r7, #84	@ 0x54
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f7ff fee7 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b21      	cmp	r3, #33	@ 0x21
 80057a4:	d13e      	bne.n	8005824 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ae:	d114      	bne.n	80057da <UART_Transmit_IT+0x48>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d110      	bne.n	80057da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	1c9a      	adds	r2, r3, #2
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	621a      	str	r2, [r3, #32]
 80057d8:	e008      	b.n	80057ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	1c59      	adds	r1, r3, #1
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6211      	str	r1, [r2, #32]
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4619      	mov	r1, r3
 80057fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10f      	bne.n	8005820 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800580e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800581e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	e000      	b.n	8005826 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005824:	2302      	movs	r3, #2
  }
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005848:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff fe76 	bl	8005544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b08c      	sub	sp, #48	@ 0x30
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b22      	cmp	r3, #34	@ 0x22
 800587c:	f040 80aa 	bne.w	80059d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005888:	d115      	bne.n	80058b6 <UART_Receive_IT+0x54>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d111      	bne.n	80058b6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005896:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ae:	1c9a      	adds	r2, r3, #2
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80058b4:	e024      	b.n	8005900 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c4:	d007      	beq.n	80058d6 <UART_Receive_IT+0x74>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <UART_Receive_IT+0x82>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e008      	b.n	80058f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29b      	uxth	r3, r3
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4619      	mov	r1, r3
 800590e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005910:	2b00      	cmp	r3, #0
 8005912:	d15d      	bne.n	80059d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0220 	bic.w	r2, r2, #32
 8005922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005932:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005956:	2b01      	cmp	r3, #1
 8005958:	d135      	bne.n	80059c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	613b      	str	r3, [r7, #16]
   return(result);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	627b      	str	r3, [r7, #36]	@ 0x24
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005980:	623a      	str	r2, [r7, #32]
 8005982:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	61bb      	str	r3, [r7, #24]
   return(result);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b10      	cmp	r3, #16
 80059a0:	d10a      	bne.n	80059b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fdd4 	bl	800556c <HAL_UARTEx_RxEventCallback>
 80059c4:	e002      	b.n	80059cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fb ff74 	bl	80018b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e002      	b.n	80059d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e000      	b.n	80059d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
  }
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3730      	adds	r7, #48	@ 0x30
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e4:	b0c0      	sub	sp, #256	@ 0x100
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	68d9      	ldr	r1, [r3, #12]
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	ea40 0301 	orr.w	r3, r0, r1
 8005a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a38:	f021 010c 	bic.w	r1, r1, #12
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a46:	430b      	orrs	r3, r1
 8005a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5a:	6999      	ldr	r1, [r3, #24]
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	ea40 0301 	orr.w	r3, r0, r1
 8005a66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b8f      	ldr	r3, [pc, #572]	@ (8005cac <UART_SetConfig+0x2cc>)
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d005      	beq.n	8005a80 <UART_SetConfig+0xa0>
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b8d      	ldr	r3, [pc, #564]	@ (8005cb0 <UART_SetConfig+0x2d0>)
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d104      	bne.n	8005a8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a80:	f7fe f8b8 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8005a84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a88:	e003      	b.n	8005a92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a8a:	f7fe f89f 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8005a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a9c:	f040 810c 	bne.w	8005cb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	1891      	adds	r1, r2, r2
 8005ab8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005aba:	415b      	adcs	r3, r3
 8005abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	eb12 0801 	adds.w	r8, r2, r1
 8005ac8:	4629      	mov	r1, r5
 8005aca:	eb43 0901 	adc.w	r9, r3, r1
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ae2:	4690      	mov	r8, r2
 8005ae4:	4699      	mov	r9, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	eb18 0303 	adds.w	r3, r8, r3
 8005aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005af0:	462b      	mov	r3, r5
 8005af2:	eb49 0303 	adc.w	r3, r9, r3
 8005af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b0e:	460b      	mov	r3, r1
 8005b10:	18db      	adds	r3, r3, r3
 8005b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b14:	4613      	mov	r3, r2
 8005b16:	eb42 0303 	adc.w	r3, r2, r3
 8005b1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b24:	f7fa fbc4 	bl	80002b0 <__aeabi_uldivmod>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4b61      	ldr	r3, [pc, #388]	@ (8005cb4 <UART_SetConfig+0x2d4>)
 8005b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	011c      	lsls	r4, r3, #4
 8005b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b48:	4642      	mov	r2, r8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	1891      	adds	r1, r2, r2
 8005b4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b50:	415b      	adcs	r3, r3
 8005b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b58:	4641      	mov	r1, r8
 8005b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b5e:	4649      	mov	r1, r9
 8005b60:	eb43 0b01 	adc.w	fp, r3, r1
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b78:	4692      	mov	sl, r2
 8005b7a:	469b      	mov	fp, r3
 8005b7c:	4643      	mov	r3, r8
 8005b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b86:	464b      	mov	r3, r9
 8005b88:	eb4b 0303 	adc.w	r3, fp, r3
 8005b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	18db      	adds	r3, r3, r3
 8005ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005baa:	4613      	mov	r3, r2
 8005bac:	eb42 0303 	adc.w	r3, r2, r3
 8005bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bba:	f7fa fb79 	bl	80002b0 <__aeabi_uldivmod>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8005cb4 <UART_SetConfig+0x2d4>)
 8005bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2264      	movs	r2, #100	@ 0x64
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	1acb      	subs	r3, r1, r3
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bda:	4b36      	ldr	r3, [pc, #216]	@ (8005cb4 <UART_SetConfig+0x2d4>)
 8005bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005be8:	441c      	add	r4, r3
 8005bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	464b      	mov	r3, r9
 8005c00:	1891      	adds	r1, r2, r2
 8005c02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c04:	415b      	adcs	r3, r3
 8005c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	1851      	adds	r1, r2, r1
 8005c10:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c12:	4649      	mov	r1, r9
 8005c14:	414b      	adcs	r3, r1
 8005c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c24:	4659      	mov	r1, fp
 8005c26:	00cb      	lsls	r3, r1, #3
 8005c28:	4651      	mov	r1, sl
 8005c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c2e:	4651      	mov	r1, sl
 8005c30:	00ca      	lsls	r2, r1, #3
 8005c32:	4610      	mov	r0, r2
 8005c34:	4619      	mov	r1, r3
 8005c36:	4603      	mov	r3, r0
 8005c38:	4642      	mov	r2, r8
 8005c3a:	189b      	adds	r3, r3, r2
 8005c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c40:	464b      	mov	r3, r9
 8005c42:	460a      	mov	r2, r1
 8005c44:	eb42 0303 	adc.w	r3, r2, r3
 8005c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c60:	460b      	mov	r3, r1
 8005c62:	18db      	adds	r3, r3, r3
 8005c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c66:	4613      	mov	r3, r2
 8005c68:	eb42 0303 	adc.w	r3, r2, r3
 8005c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c76:	f7fa fb1b 	bl	80002b0 <__aeabi_uldivmod>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb4 <UART_SetConfig+0x2d4>)
 8005c80:	fba3 1302 	umull	r1, r3, r3, r2
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	2164      	movs	r1, #100	@ 0x64
 8005c88:	fb01 f303 	mul.w	r3, r1, r3
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	3332      	adds	r3, #50	@ 0x32
 8005c92:	4a08      	ldr	r2, [pc, #32]	@ (8005cb4 <UART_SetConfig+0x2d4>)
 8005c94:	fba2 2303 	umull	r2, r3, r2, r3
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	f003 0207 	and.w	r2, r3, #7
 8005c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4422      	add	r2, r4
 8005ca6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ca8:	e106      	b.n	8005eb8 <UART_SetConfig+0x4d8>
 8005caa:	bf00      	nop
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	40011400 	.word	0x40011400
 8005cb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cca:	4642      	mov	r2, r8
 8005ccc:	464b      	mov	r3, r9
 8005cce:	1891      	adds	r1, r2, r2
 8005cd0:	6239      	str	r1, [r7, #32]
 8005cd2:	415b      	adcs	r3, r3
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cda:	4641      	mov	r1, r8
 8005cdc:	1854      	adds	r4, r2, r1
 8005cde:	4649      	mov	r1, r9
 8005ce0:	eb43 0501 	adc.w	r5, r3, r1
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	00eb      	lsls	r3, r5, #3
 8005cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cf2:	00e2      	lsls	r2, r4, #3
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	461d      	mov	r5, r3
 8005cf8:	4643      	mov	r3, r8
 8005cfa:	18e3      	adds	r3, r4, r3
 8005cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d00:	464b      	mov	r3, r9
 8005d02:	eb45 0303 	adc.w	r3, r5, r3
 8005d06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d26:	4629      	mov	r1, r5
 8005d28:	008b      	lsls	r3, r1, #2
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d30:	4621      	mov	r1, r4
 8005d32:	008a      	lsls	r2, r1, #2
 8005d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d38:	f7fa faba 	bl	80002b0 <__aeabi_uldivmod>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4b60      	ldr	r3, [pc, #384]	@ (8005ec4 <UART_SetConfig+0x4e4>)
 8005d42:	fba3 2302 	umull	r2, r3, r3, r2
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	011c      	lsls	r4, r3, #4
 8005d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	464b      	mov	r3, r9
 8005d60:	1891      	adds	r1, r2, r2
 8005d62:	61b9      	str	r1, [r7, #24]
 8005d64:	415b      	adcs	r3, r3
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	1851      	adds	r1, r2, r1
 8005d70:	6139      	str	r1, [r7, #16]
 8005d72:	4649      	mov	r1, r9
 8005d74:	414b      	adcs	r3, r1
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d84:	4659      	mov	r1, fp
 8005d86:	00cb      	lsls	r3, r1, #3
 8005d88:	4651      	mov	r1, sl
 8005d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d8e:	4651      	mov	r1, sl
 8005d90:	00ca      	lsls	r2, r1, #3
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	4642      	mov	r2, r8
 8005d9a:	189b      	adds	r3, r3, r2
 8005d9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005da0:	464b      	mov	r3, r9
 8005da2:	460a      	mov	r2, r1
 8005da4:	eb42 0303 	adc.w	r3, r2, r3
 8005da8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005db6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	008b      	lsls	r3, r1, #2
 8005dc8:	4641      	mov	r1, r8
 8005dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dce:	4641      	mov	r1, r8
 8005dd0:	008a      	lsls	r2, r1, #2
 8005dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005dd6:	f7fa fa6b 	bl	80002b0 <__aeabi_uldivmod>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	4b38      	ldr	r3, [pc, #224]	@ (8005ec4 <UART_SetConfig+0x4e4>)
 8005de2:	fba3 2301 	umull	r2, r3, r3, r1
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	2264      	movs	r2, #100	@ 0x64
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
 8005dee:	1acb      	subs	r3, r1, r3
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	3332      	adds	r3, #50	@ 0x32
 8005df4:	4a33      	ldr	r2, [pc, #204]	@ (8005ec4 <UART_SetConfig+0x4e4>)
 8005df6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e00:	441c      	add	r4, r3
 8005e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e06:	2200      	movs	r2, #0
 8005e08:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e10:	4642      	mov	r2, r8
 8005e12:	464b      	mov	r3, r9
 8005e14:	1891      	adds	r1, r2, r2
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	415b      	adcs	r3, r3
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e20:	4641      	mov	r1, r8
 8005e22:	1851      	adds	r1, r2, r1
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	4649      	mov	r1, r9
 8005e28:	414b      	adcs	r3, r1
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e38:	4659      	mov	r1, fp
 8005e3a:	00cb      	lsls	r3, r1, #3
 8005e3c:	4651      	mov	r1, sl
 8005e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e42:	4651      	mov	r1, sl
 8005e44:	00ca      	lsls	r2, r1, #3
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	189b      	adds	r3, r3, r2
 8005e50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e52:	464b      	mov	r3, r9
 8005e54:	460a      	mov	r2, r1
 8005e56:	eb42 0303 	adc.w	r3, r2, r3
 8005e5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e66:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e74:	4649      	mov	r1, r9
 8005e76:	008b      	lsls	r3, r1, #2
 8005e78:	4641      	mov	r1, r8
 8005e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7e:	4641      	mov	r1, r8
 8005e80:	008a      	lsls	r2, r1, #2
 8005e82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e86:	f7fa fa13 	bl	80002b0 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec4 <UART_SetConfig+0x4e4>)
 8005e90:	fba3 1302 	umull	r1, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	2164      	movs	r1, #100	@ 0x64
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	3332      	adds	r3, #50	@ 0x32
 8005ea2:	4a08      	ldr	r2, [pc, #32]	@ (8005ec4 <UART_SetConfig+0x4e4>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 020f 	and.w	r2, r3, #15
 8005eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4422      	add	r2, r4
 8005eb6:	609a      	str	r2, [r3, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec4:	51eb851f 	.word	0x51eb851f

08005ec8 <siprintf>:
 8005ec8:	b40e      	push	{r1, r2, r3}
 8005eca:	b510      	push	{r4, lr}
 8005ecc:	b09d      	sub	sp, #116	@ 0x74
 8005ece:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005ed0:	9002      	str	r0, [sp, #8]
 8005ed2:	9006      	str	r0, [sp, #24]
 8005ed4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ed8:	480a      	ldr	r0, [pc, #40]	@ (8005f04 <siprintf+0x3c>)
 8005eda:	9107      	str	r1, [sp, #28]
 8005edc:	9104      	str	r1, [sp, #16]
 8005ede:	490a      	ldr	r1, [pc, #40]	@ (8005f08 <siprintf+0x40>)
 8005ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ee4:	9105      	str	r1, [sp, #20]
 8005ee6:	2400      	movs	r4, #0
 8005ee8:	a902      	add	r1, sp, #8
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005ef0:	f000 f994 	bl	800621c <_svfiprintf_r>
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	701c      	strb	r4, [r3, #0]
 8005ef8:	b01d      	add	sp, #116	@ 0x74
 8005efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005efe:	b003      	add	sp, #12
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	2000001c 	.word	0x2000001c
 8005f08:	ffff0208 	.word	0xffff0208

08005f0c <memset>:
 8005f0c:	4402      	add	r2, r0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d100      	bne.n	8005f16 <memset+0xa>
 8005f14:	4770      	bx	lr
 8005f16:	f803 1b01 	strb.w	r1, [r3], #1
 8005f1a:	e7f9      	b.n	8005f10 <memset+0x4>

08005f1c <__errno>:
 8005f1c:	4b01      	ldr	r3, [pc, #4]	@ (8005f24 <__errno+0x8>)
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	2000001c 	.word	0x2000001c

08005f28 <__libc_init_array>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4d0d      	ldr	r5, [pc, #52]	@ (8005f60 <__libc_init_array+0x38>)
 8005f2c:	4c0d      	ldr	r4, [pc, #52]	@ (8005f64 <__libc_init_array+0x3c>)
 8005f2e:	1b64      	subs	r4, r4, r5
 8005f30:	10a4      	asrs	r4, r4, #2
 8005f32:	2600      	movs	r6, #0
 8005f34:	42a6      	cmp	r6, r4
 8005f36:	d109      	bne.n	8005f4c <__libc_init_array+0x24>
 8005f38:	4d0b      	ldr	r5, [pc, #44]	@ (8005f68 <__libc_init_array+0x40>)
 8005f3a:	4c0c      	ldr	r4, [pc, #48]	@ (8005f6c <__libc_init_array+0x44>)
 8005f3c:	f000 fc64 	bl	8006808 <_init>
 8005f40:	1b64      	subs	r4, r4, r5
 8005f42:	10a4      	asrs	r4, r4, #2
 8005f44:	2600      	movs	r6, #0
 8005f46:	42a6      	cmp	r6, r4
 8005f48:	d105      	bne.n	8005f56 <__libc_init_array+0x2e>
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f50:	4798      	blx	r3
 8005f52:	3601      	adds	r6, #1
 8005f54:	e7ee      	b.n	8005f34 <__libc_init_array+0xc>
 8005f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5a:	4798      	blx	r3
 8005f5c:	3601      	adds	r6, #1
 8005f5e:	e7f2      	b.n	8005f46 <__libc_init_array+0x1e>
 8005f60:	080069c0 	.word	0x080069c0
 8005f64:	080069c0 	.word	0x080069c0
 8005f68:	080069c0 	.word	0x080069c0
 8005f6c:	080069c4 	.word	0x080069c4

08005f70 <__retarget_lock_acquire_recursive>:
 8005f70:	4770      	bx	lr

08005f72 <__retarget_lock_release_recursive>:
 8005f72:	4770      	bx	lr

08005f74 <_free_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4605      	mov	r5, r0
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	d041      	beq.n	8006000 <_free_r+0x8c>
 8005f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f80:	1f0c      	subs	r4, r1, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bfb8      	it	lt
 8005f86:	18e4      	addlt	r4, r4, r3
 8005f88:	f000 f8e0 	bl	800614c <__malloc_lock>
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006004 <_free_r+0x90>)
 8005f8e:	6813      	ldr	r3, [r2, #0]
 8005f90:	b933      	cbnz	r3, 8005fa0 <_free_r+0x2c>
 8005f92:	6063      	str	r3, [r4, #4]
 8005f94:	6014      	str	r4, [r2, #0]
 8005f96:	4628      	mov	r0, r5
 8005f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f9c:	f000 b8dc 	b.w	8006158 <__malloc_unlock>
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	d908      	bls.n	8005fb6 <_free_r+0x42>
 8005fa4:	6820      	ldr	r0, [r4, #0]
 8005fa6:	1821      	adds	r1, r4, r0
 8005fa8:	428b      	cmp	r3, r1
 8005faa:	bf01      	itttt	eq
 8005fac:	6819      	ldreq	r1, [r3, #0]
 8005fae:	685b      	ldreq	r3, [r3, #4]
 8005fb0:	1809      	addeq	r1, r1, r0
 8005fb2:	6021      	streq	r1, [r4, #0]
 8005fb4:	e7ed      	b.n	8005f92 <_free_r+0x1e>
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	b10b      	cbz	r3, 8005fc0 <_free_r+0x4c>
 8005fbc:	42a3      	cmp	r3, r4
 8005fbe:	d9fa      	bls.n	8005fb6 <_free_r+0x42>
 8005fc0:	6811      	ldr	r1, [r2, #0]
 8005fc2:	1850      	adds	r0, r2, r1
 8005fc4:	42a0      	cmp	r0, r4
 8005fc6:	d10b      	bne.n	8005fe0 <_free_r+0x6c>
 8005fc8:	6820      	ldr	r0, [r4, #0]
 8005fca:	4401      	add	r1, r0
 8005fcc:	1850      	adds	r0, r2, r1
 8005fce:	4283      	cmp	r3, r0
 8005fd0:	6011      	str	r1, [r2, #0]
 8005fd2:	d1e0      	bne.n	8005f96 <_free_r+0x22>
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	6053      	str	r3, [r2, #4]
 8005fda:	4408      	add	r0, r1
 8005fdc:	6010      	str	r0, [r2, #0]
 8005fde:	e7da      	b.n	8005f96 <_free_r+0x22>
 8005fe0:	d902      	bls.n	8005fe8 <_free_r+0x74>
 8005fe2:	230c      	movs	r3, #12
 8005fe4:	602b      	str	r3, [r5, #0]
 8005fe6:	e7d6      	b.n	8005f96 <_free_r+0x22>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	1821      	adds	r1, r4, r0
 8005fec:	428b      	cmp	r3, r1
 8005fee:	bf04      	itt	eq
 8005ff0:	6819      	ldreq	r1, [r3, #0]
 8005ff2:	685b      	ldreq	r3, [r3, #4]
 8005ff4:	6063      	str	r3, [r4, #4]
 8005ff6:	bf04      	itt	eq
 8005ff8:	1809      	addeq	r1, r1, r0
 8005ffa:	6021      	streq	r1, [r4, #0]
 8005ffc:	6054      	str	r4, [r2, #4]
 8005ffe:	e7ca      	b.n	8005f96 <_free_r+0x22>
 8006000:	bd38      	pop	{r3, r4, r5, pc}
 8006002:	bf00      	nop
 8006004:	2000040c 	.word	0x2000040c

08006008 <sbrk_aligned>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	4e0f      	ldr	r6, [pc, #60]	@ (8006048 <sbrk_aligned+0x40>)
 800600c:	460c      	mov	r4, r1
 800600e:	6831      	ldr	r1, [r6, #0]
 8006010:	4605      	mov	r5, r0
 8006012:	b911      	cbnz	r1, 800601a <sbrk_aligned+0x12>
 8006014:	f000 fba4 	bl	8006760 <_sbrk_r>
 8006018:	6030      	str	r0, [r6, #0]
 800601a:	4621      	mov	r1, r4
 800601c:	4628      	mov	r0, r5
 800601e:	f000 fb9f 	bl	8006760 <_sbrk_r>
 8006022:	1c43      	adds	r3, r0, #1
 8006024:	d103      	bne.n	800602e <sbrk_aligned+0x26>
 8006026:	f04f 34ff 	mov.w	r4, #4294967295
 800602a:	4620      	mov	r0, r4
 800602c:	bd70      	pop	{r4, r5, r6, pc}
 800602e:	1cc4      	adds	r4, r0, #3
 8006030:	f024 0403 	bic.w	r4, r4, #3
 8006034:	42a0      	cmp	r0, r4
 8006036:	d0f8      	beq.n	800602a <sbrk_aligned+0x22>
 8006038:	1a21      	subs	r1, r4, r0
 800603a:	4628      	mov	r0, r5
 800603c:	f000 fb90 	bl	8006760 <_sbrk_r>
 8006040:	3001      	adds	r0, #1
 8006042:	d1f2      	bne.n	800602a <sbrk_aligned+0x22>
 8006044:	e7ef      	b.n	8006026 <sbrk_aligned+0x1e>
 8006046:	bf00      	nop
 8006048:	20000408 	.word	0x20000408

0800604c <_malloc_r>:
 800604c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006050:	1ccd      	adds	r5, r1, #3
 8006052:	f025 0503 	bic.w	r5, r5, #3
 8006056:	3508      	adds	r5, #8
 8006058:	2d0c      	cmp	r5, #12
 800605a:	bf38      	it	cc
 800605c:	250c      	movcc	r5, #12
 800605e:	2d00      	cmp	r5, #0
 8006060:	4606      	mov	r6, r0
 8006062:	db01      	blt.n	8006068 <_malloc_r+0x1c>
 8006064:	42a9      	cmp	r1, r5
 8006066:	d904      	bls.n	8006072 <_malloc_r+0x26>
 8006068:	230c      	movs	r3, #12
 800606a:	6033      	str	r3, [r6, #0]
 800606c:	2000      	movs	r0, #0
 800606e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006148 <_malloc_r+0xfc>
 8006076:	f000 f869 	bl	800614c <__malloc_lock>
 800607a:	f8d8 3000 	ldr.w	r3, [r8]
 800607e:	461c      	mov	r4, r3
 8006080:	bb44      	cbnz	r4, 80060d4 <_malloc_r+0x88>
 8006082:	4629      	mov	r1, r5
 8006084:	4630      	mov	r0, r6
 8006086:	f7ff ffbf 	bl	8006008 <sbrk_aligned>
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	4604      	mov	r4, r0
 800608e:	d158      	bne.n	8006142 <_malloc_r+0xf6>
 8006090:	f8d8 4000 	ldr.w	r4, [r8]
 8006094:	4627      	mov	r7, r4
 8006096:	2f00      	cmp	r7, #0
 8006098:	d143      	bne.n	8006122 <_malloc_r+0xd6>
 800609a:	2c00      	cmp	r4, #0
 800609c:	d04b      	beq.n	8006136 <_malloc_r+0xea>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	4639      	mov	r1, r7
 80060a2:	4630      	mov	r0, r6
 80060a4:	eb04 0903 	add.w	r9, r4, r3
 80060a8:	f000 fb5a 	bl	8006760 <_sbrk_r>
 80060ac:	4581      	cmp	r9, r0
 80060ae:	d142      	bne.n	8006136 <_malloc_r+0xea>
 80060b0:	6821      	ldr	r1, [r4, #0]
 80060b2:	1a6d      	subs	r5, r5, r1
 80060b4:	4629      	mov	r1, r5
 80060b6:	4630      	mov	r0, r6
 80060b8:	f7ff ffa6 	bl	8006008 <sbrk_aligned>
 80060bc:	3001      	adds	r0, #1
 80060be:	d03a      	beq.n	8006136 <_malloc_r+0xea>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	442b      	add	r3, r5
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	f8d8 3000 	ldr.w	r3, [r8]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	bb62      	cbnz	r2, 8006128 <_malloc_r+0xdc>
 80060ce:	f8c8 7000 	str.w	r7, [r8]
 80060d2:	e00f      	b.n	80060f4 <_malloc_r+0xa8>
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	1b52      	subs	r2, r2, r5
 80060d8:	d420      	bmi.n	800611c <_malloc_r+0xd0>
 80060da:	2a0b      	cmp	r2, #11
 80060dc:	d917      	bls.n	800610e <_malloc_r+0xc2>
 80060de:	1961      	adds	r1, r4, r5
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	6025      	str	r5, [r4, #0]
 80060e4:	bf18      	it	ne
 80060e6:	6059      	strne	r1, [r3, #4]
 80060e8:	6863      	ldr	r3, [r4, #4]
 80060ea:	bf08      	it	eq
 80060ec:	f8c8 1000 	streq.w	r1, [r8]
 80060f0:	5162      	str	r2, [r4, r5]
 80060f2:	604b      	str	r3, [r1, #4]
 80060f4:	4630      	mov	r0, r6
 80060f6:	f000 f82f 	bl	8006158 <__malloc_unlock>
 80060fa:	f104 000b 	add.w	r0, r4, #11
 80060fe:	1d23      	adds	r3, r4, #4
 8006100:	f020 0007 	bic.w	r0, r0, #7
 8006104:	1ac2      	subs	r2, r0, r3
 8006106:	bf1c      	itt	ne
 8006108:	1a1b      	subne	r3, r3, r0
 800610a:	50a3      	strne	r3, [r4, r2]
 800610c:	e7af      	b.n	800606e <_malloc_r+0x22>
 800610e:	6862      	ldr	r2, [r4, #4]
 8006110:	42a3      	cmp	r3, r4
 8006112:	bf0c      	ite	eq
 8006114:	f8c8 2000 	streq.w	r2, [r8]
 8006118:	605a      	strne	r2, [r3, #4]
 800611a:	e7eb      	b.n	80060f4 <_malloc_r+0xa8>
 800611c:	4623      	mov	r3, r4
 800611e:	6864      	ldr	r4, [r4, #4]
 8006120:	e7ae      	b.n	8006080 <_malloc_r+0x34>
 8006122:	463c      	mov	r4, r7
 8006124:	687f      	ldr	r7, [r7, #4]
 8006126:	e7b6      	b.n	8006096 <_malloc_r+0x4a>
 8006128:	461a      	mov	r2, r3
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	42a3      	cmp	r3, r4
 800612e:	d1fb      	bne.n	8006128 <_malloc_r+0xdc>
 8006130:	2300      	movs	r3, #0
 8006132:	6053      	str	r3, [r2, #4]
 8006134:	e7de      	b.n	80060f4 <_malloc_r+0xa8>
 8006136:	230c      	movs	r3, #12
 8006138:	6033      	str	r3, [r6, #0]
 800613a:	4630      	mov	r0, r6
 800613c:	f000 f80c 	bl	8006158 <__malloc_unlock>
 8006140:	e794      	b.n	800606c <_malloc_r+0x20>
 8006142:	6005      	str	r5, [r0, #0]
 8006144:	e7d6      	b.n	80060f4 <_malloc_r+0xa8>
 8006146:	bf00      	nop
 8006148:	2000040c 	.word	0x2000040c

0800614c <__malloc_lock>:
 800614c:	4801      	ldr	r0, [pc, #4]	@ (8006154 <__malloc_lock+0x8>)
 800614e:	f7ff bf0f 	b.w	8005f70 <__retarget_lock_acquire_recursive>
 8006152:	bf00      	nop
 8006154:	20000404 	.word	0x20000404

08006158 <__malloc_unlock>:
 8006158:	4801      	ldr	r0, [pc, #4]	@ (8006160 <__malloc_unlock+0x8>)
 800615a:	f7ff bf0a 	b.w	8005f72 <__retarget_lock_release_recursive>
 800615e:	bf00      	nop
 8006160:	20000404 	.word	0x20000404

08006164 <__ssputs_r>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	688e      	ldr	r6, [r1, #8]
 800616a:	461f      	mov	r7, r3
 800616c:	42be      	cmp	r6, r7
 800616e:	680b      	ldr	r3, [r1, #0]
 8006170:	4682      	mov	sl, r0
 8006172:	460c      	mov	r4, r1
 8006174:	4690      	mov	r8, r2
 8006176:	d82d      	bhi.n	80061d4 <__ssputs_r+0x70>
 8006178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800617c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006180:	d026      	beq.n	80061d0 <__ssputs_r+0x6c>
 8006182:	6965      	ldr	r5, [r4, #20]
 8006184:	6909      	ldr	r1, [r1, #16]
 8006186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800618a:	eba3 0901 	sub.w	r9, r3, r1
 800618e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006192:	1c7b      	adds	r3, r7, #1
 8006194:	444b      	add	r3, r9
 8006196:	106d      	asrs	r5, r5, #1
 8006198:	429d      	cmp	r5, r3
 800619a:	bf38      	it	cc
 800619c:	461d      	movcc	r5, r3
 800619e:	0553      	lsls	r3, r2, #21
 80061a0:	d527      	bpl.n	80061f2 <__ssputs_r+0x8e>
 80061a2:	4629      	mov	r1, r5
 80061a4:	f7ff ff52 	bl	800604c <_malloc_r>
 80061a8:	4606      	mov	r6, r0
 80061aa:	b360      	cbz	r0, 8006206 <__ssputs_r+0xa2>
 80061ac:	6921      	ldr	r1, [r4, #16]
 80061ae:	464a      	mov	r2, r9
 80061b0:	f000 fae6 	bl	8006780 <memcpy>
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061be:	81a3      	strh	r3, [r4, #12]
 80061c0:	6126      	str	r6, [r4, #16]
 80061c2:	6165      	str	r5, [r4, #20]
 80061c4:	444e      	add	r6, r9
 80061c6:	eba5 0509 	sub.w	r5, r5, r9
 80061ca:	6026      	str	r6, [r4, #0]
 80061cc:	60a5      	str	r5, [r4, #8]
 80061ce:	463e      	mov	r6, r7
 80061d0:	42be      	cmp	r6, r7
 80061d2:	d900      	bls.n	80061d6 <__ssputs_r+0x72>
 80061d4:	463e      	mov	r6, r7
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	4632      	mov	r2, r6
 80061da:	4641      	mov	r1, r8
 80061dc:	f000 faa6 	bl	800672c <memmove>
 80061e0:	68a3      	ldr	r3, [r4, #8]
 80061e2:	1b9b      	subs	r3, r3, r6
 80061e4:	60a3      	str	r3, [r4, #8]
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	4433      	add	r3, r6
 80061ea:	6023      	str	r3, [r4, #0]
 80061ec:	2000      	movs	r0, #0
 80061ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f2:	462a      	mov	r2, r5
 80061f4:	f000 fad2 	bl	800679c <_realloc_r>
 80061f8:	4606      	mov	r6, r0
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d1e0      	bne.n	80061c0 <__ssputs_r+0x5c>
 80061fe:	6921      	ldr	r1, [r4, #16]
 8006200:	4650      	mov	r0, sl
 8006202:	f7ff feb7 	bl	8005f74 <_free_r>
 8006206:	230c      	movs	r3, #12
 8006208:	f8ca 3000 	str.w	r3, [sl]
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006212:	81a3      	strh	r3, [r4, #12]
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	e7e9      	b.n	80061ee <__ssputs_r+0x8a>
	...

0800621c <_svfiprintf_r>:
 800621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006220:	4698      	mov	r8, r3
 8006222:	898b      	ldrh	r3, [r1, #12]
 8006224:	061b      	lsls	r3, r3, #24
 8006226:	b09d      	sub	sp, #116	@ 0x74
 8006228:	4607      	mov	r7, r0
 800622a:	460d      	mov	r5, r1
 800622c:	4614      	mov	r4, r2
 800622e:	d510      	bpl.n	8006252 <_svfiprintf_r+0x36>
 8006230:	690b      	ldr	r3, [r1, #16]
 8006232:	b973      	cbnz	r3, 8006252 <_svfiprintf_r+0x36>
 8006234:	2140      	movs	r1, #64	@ 0x40
 8006236:	f7ff ff09 	bl	800604c <_malloc_r>
 800623a:	6028      	str	r0, [r5, #0]
 800623c:	6128      	str	r0, [r5, #16]
 800623e:	b930      	cbnz	r0, 800624e <_svfiprintf_r+0x32>
 8006240:	230c      	movs	r3, #12
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	f04f 30ff 	mov.w	r0, #4294967295
 8006248:	b01d      	add	sp, #116	@ 0x74
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624e:	2340      	movs	r3, #64	@ 0x40
 8006250:	616b      	str	r3, [r5, #20]
 8006252:	2300      	movs	r3, #0
 8006254:	9309      	str	r3, [sp, #36]	@ 0x24
 8006256:	2320      	movs	r3, #32
 8006258:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800625c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006260:	2330      	movs	r3, #48	@ 0x30
 8006262:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006400 <_svfiprintf_r+0x1e4>
 8006266:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800626a:	f04f 0901 	mov.w	r9, #1
 800626e:	4623      	mov	r3, r4
 8006270:	469a      	mov	sl, r3
 8006272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006276:	b10a      	cbz	r2, 800627c <_svfiprintf_r+0x60>
 8006278:	2a25      	cmp	r2, #37	@ 0x25
 800627a:	d1f9      	bne.n	8006270 <_svfiprintf_r+0x54>
 800627c:	ebba 0b04 	subs.w	fp, sl, r4
 8006280:	d00b      	beq.n	800629a <_svfiprintf_r+0x7e>
 8006282:	465b      	mov	r3, fp
 8006284:	4622      	mov	r2, r4
 8006286:	4629      	mov	r1, r5
 8006288:	4638      	mov	r0, r7
 800628a:	f7ff ff6b 	bl	8006164 <__ssputs_r>
 800628e:	3001      	adds	r0, #1
 8006290:	f000 80a7 	beq.w	80063e2 <_svfiprintf_r+0x1c6>
 8006294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006296:	445a      	add	r2, fp
 8006298:	9209      	str	r2, [sp, #36]	@ 0x24
 800629a:	f89a 3000 	ldrb.w	r3, [sl]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 809f 	beq.w	80063e2 <_svfiprintf_r+0x1c6>
 80062a4:	2300      	movs	r3, #0
 80062a6:	f04f 32ff 	mov.w	r2, #4294967295
 80062aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ae:	f10a 0a01 	add.w	sl, sl, #1
 80062b2:	9304      	str	r3, [sp, #16]
 80062b4:	9307      	str	r3, [sp, #28]
 80062b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80062bc:	4654      	mov	r4, sl
 80062be:	2205      	movs	r2, #5
 80062c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c4:	484e      	ldr	r0, [pc, #312]	@ (8006400 <_svfiprintf_r+0x1e4>)
 80062c6:	f7f9 ffa3 	bl	8000210 <memchr>
 80062ca:	9a04      	ldr	r2, [sp, #16]
 80062cc:	b9d8      	cbnz	r0, 8006306 <_svfiprintf_r+0xea>
 80062ce:	06d0      	lsls	r0, r2, #27
 80062d0:	bf44      	itt	mi
 80062d2:	2320      	movmi	r3, #32
 80062d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062d8:	0711      	lsls	r1, r2, #28
 80062da:	bf44      	itt	mi
 80062dc:	232b      	movmi	r3, #43	@ 0x2b
 80062de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062e2:	f89a 3000 	ldrb.w	r3, [sl]
 80062e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80062e8:	d015      	beq.n	8006316 <_svfiprintf_r+0xfa>
 80062ea:	9a07      	ldr	r2, [sp, #28]
 80062ec:	4654      	mov	r4, sl
 80062ee:	2000      	movs	r0, #0
 80062f0:	f04f 0c0a 	mov.w	ip, #10
 80062f4:	4621      	mov	r1, r4
 80062f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062fa:	3b30      	subs	r3, #48	@ 0x30
 80062fc:	2b09      	cmp	r3, #9
 80062fe:	d94b      	bls.n	8006398 <_svfiprintf_r+0x17c>
 8006300:	b1b0      	cbz	r0, 8006330 <_svfiprintf_r+0x114>
 8006302:	9207      	str	r2, [sp, #28]
 8006304:	e014      	b.n	8006330 <_svfiprintf_r+0x114>
 8006306:	eba0 0308 	sub.w	r3, r0, r8
 800630a:	fa09 f303 	lsl.w	r3, r9, r3
 800630e:	4313      	orrs	r3, r2
 8006310:	9304      	str	r3, [sp, #16]
 8006312:	46a2      	mov	sl, r4
 8006314:	e7d2      	b.n	80062bc <_svfiprintf_r+0xa0>
 8006316:	9b03      	ldr	r3, [sp, #12]
 8006318:	1d19      	adds	r1, r3, #4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	9103      	str	r1, [sp, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	bfbb      	ittet	lt
 8006322:	425b      	neglt	r3, r3
 8006324:	f042 0202 	orrlt.w	r2, r2, #2
 8006328:	9307      	strge	r3, [sp, #28]
 800632a:	9307      	strlt	r3, [sp, #28]
 800632c:	bfb8      	it	lt
 800632e:	9204      	strlt	r2, [sp, #16]
 8006330:	7823      	ldrb	r3, [r4, #0]
 8006332:	2b2e      	cmp	r3, #46	@ 0x2e
 8006334:	d10a      	bne.n	800634c <_svfiprintf_r+0x130>
 8006336:	7863      	ldrb	r3, [r4, #1]
 8006338:	2b2a      	cmp	r3, #42	@ 0x2a
 800633a:	d132      	bne.n	80063a2 <_svfiprintf_r+0x186>
 800633c:	9b03      	ldr	r3, [sp, #12]
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	9203      	str	r2, [sp, #12]
 8006344:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006348:	3402      	adds	r4, #2
 800634a:	9305      	str	r3, [sp, #20]
 800634c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006410 <_svfiprintf_r+0x1f4>
 8006350:	7821      	ldrb	r1, [r4, #0]
 8006352:	2203      	movs	r2, #3
 8006354:	4650      	mov	r0, sl
 8006356:	f7f9 ff5b 	bl	8000210 <memchr>
 800635a:	b138      	cbz	r0, 800636c <_svfiprintf_r+0x150>
 800635c:	9b04      	ldr	r3, [sp, #16]
 800635e:	eba0 000a 	sub.w	r0, r0, sl
 8006362:	2240      	movs	r2, #64	@ 0x40
 8006364:	4082      	lsls	r2, r0
 8006366:	4313      	orrs	r3, r2
 8006368:	3401      	adds	r4, #1
 800636a:	9304      	str	r3, [sp, #16]
 800636c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006370:	4824      	ldr	r0, [pc, #144]	@ (8006404 <_svfiprintf_r+0x1e8>)
 8006372:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006376:	2206      	movs	r2, #6
 8006378:	f7f9 ff4a 	bl	8000210 <memchr>
 800637c:	2800      	cmp	r0, #0
 800637e:	d036      	beq.n	80063ee <_svfiprintf_r+0x1d2>
 8006380:	4b21      	ldr	r3, [pc, #132]	@ (8006408 <_svfiprintf_r+0x1ec>)
 8006382:	bb1b      	cbnz	r3, 80063cc <_svfiprintf_r+0x1b0>
 8006384:	9b03      	ldr	r3, [sp, #12]
 8006386:	3307      	adds	r3, #7
 8006388:	f023 0307 	bic.w	r3, r3, #7
 800638c:	3308      	adds	r3, #8
 800638e:	9303      	str	r3, [sp, #12]
 8006390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006392:	4433      	add	r3, r6
 8006394:	9309      	str	r3, [sp, #36]	@ 0x24
 8006396:	e76a      	b.n	800626e <_svfiprintf_r+0x52>
 8006398:	fb0c 3202 	mla	r2, ip, r2, r3
 800639c:	460c      	mov	r4, r1
 800639e:	2001      	movs	r0, #1
 80063a0:	e7a8      	b.n	80062f4 <_svfiprintf_r+0xd8>
 80063a2:	2300      	movs	r3, #0
 80063a4:	3401      	adds	r4, #1
 80063a6:	9305      	str	r3, [sp, #20]
 80063a8:	4619      	mov	r1, r3
 80063aa:	f04f 0c0a 	mov.w	ip, #10
 80063ae:	4620      	mov	r0, r4
 80063b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b4:	3a30      	subs	r2, #48	@ 0x30
 80063b6:	2a09      	cmp	r2, #9
 80063b8:	d903      	bls.n	80063c2 <_svfiprintf_r+0x1a6>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0c6      	beq.n	800634c <_svfiprintf_r+0x130>
 80063be:	9105      	str	r1, [sp, #20]
 80063c0:	e7c4      	b.n	800634c <_svfiprintf_r+0x130>
 80063c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c6:	4604      	mov	r4, r0
 80063c8:	2301      	movs	r3, #1
 80063ca:	e7f0      	b.n	80063ae <_svfiprintf_r+0x192>
 80063cc:	ab03      	add	r3, sp, #12
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	462a      	mov	r2, r5
 80063d2:	4b0e      	ldr	r3, [pc, #56]	@ (800640c <_svfiprintf_r+0x1f0>)
 80063d4:	a904      	add	r1, sp, #16
 80063d6:	4638      	mov	r0, r7
 80063d8:	f3af 8000 	nop.w
 80063dc:	1c42      	adds	r2, r0, #1
 80063de:	4606      	mov	r6, r0
 80063e0:	d1d6      	bne.n	8006390 <_svfiprintf_r+0x174>
 80063e2:	89ab      	ldrh	r3, [r5, #12]
 80063e4:	065b      	lsls	r3, r3, #25
 80063e6:	f53f af2d 	bmi.w	8006244 <_svfiprintf_r+0x28>
 80063ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063ec:	e72c      	b.n	8006248 <_svfiprintf_r+0x2c>
 80063ee:	ab03      	add	r3, sp, #12
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	462a      	mov	r2, r5
 80063f4:	4b05      	ldr	r3, [pc, #20]	@ (800640c <_svfiprintf_r+0x1f0>)
 80063f6:	a904      	add	r1, sp, #16
 80063f8:	4638      	mov	r0, r7
 80063fa:	f000 f879 	bl	80064f0 <_printf_i>
 80063fe:	e7ed      	b.n	80063dc <_svfiprintf_r+0x1c0>
 8006400:	08006985 	.word	0x08006985
 8006404:	0800698f 	.word	0x0800698f
 8006408:	00000000 	.word	0x00000000
 800640c:	08006165 	.word	0x08006165
 8006410:	0800698b 	.word	0x0800698b

08006414 <_printf_common>:
 8006414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006418:	4616      	mov	r6, r2
 800641a:	4698      	mov	r8, r3
 800641c:	688a      	ldr	r2, [r1, #8]
 800641e:	690b      	ldr	r3, [r1, #16]
 8006420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006424:	4293      	cmp	r3, r2
 8006426:	bfb8      	it	lt
 8006428:	4613      	movlt	r3, r2
 800642a:	6033      	str	r3, [r6, #0]
 800642c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006430:	4607      	mov	r7, r0
 8006432:	460c      	mov	r4, r1
 8006434:	b10a      	cbz	r2, 800643a <_printf_common+0x26>
 8006436:	3301      	adds	r3, #1
 8006438:	6033      	str	r3, [r6, #0]
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	0699      	lsls	r1, r3, #26
 800643e:	bf42      	ittt	mi
 8006440:	6833      	ldrmi	r3, [r6, #0]
 8006442:	3302      	addmi	r3, #2
 8006444:	6033      	strmi	r3, [r6, #0]
 8006446:	6825      	ldr	r5, [r4, #0]
 8006448:	f015 0506 	ands.w	r5, r5, #6
 800644c:	d106      	bne.n	800645c <_printf_common+0x48>
 800644e:	f104 0a19 	add.w	sl, r4, #25
 8006452:	68e3      	ldr	r3, [r4, #12]
 8006454:	6832      	ldr	r2, [r6, #0]
 8006456:	1a9b      	subs	r3, r3, r2
 8006458:	42ab      	cmp	r3, r5
 800645a:	dc26      	bgt.n	80064aa <_printf_common+0x96>
 800645c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006460:	6822      	ldr	r2, [r4, #0]
 8006462:	3b00      	subs	r3, #0
 8006464:	bf18      	it	ne
 8006466:	2301      	movne	r3, #1
 8006468:	0692      	lsls	r2, r2, #26
 800646a:	d42b      	bmi.n	80064c4 <_printf_common+0xb0>
 800646c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006470:	4641      	mov	r1, r8
 8006472:	4638      	mov	r0, r7
 8006474:	47c8      	blx	r9
 8006476:	3001      	adds	r0, #1
 8006478:	d01e      	beq.n	80064b8 <_printf_common+0xa4>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	6922      	ldr	r2, [r4, #16]
 800647e:	f003 0306 	and.w	r3, r3, #6
 8006482:	2b04      	cmp	r3, #4
 8006484:	bf02      	ittt	eq
 8006486:	68e5      	ldreq	r5, [r4, #12]
 8006488:	6833      	ldreq	r3, [r6, #0]
 800648a:	1aed      	subeq	r5, r5, r3
 800648c:	68a3      	ldr	r3, [r4, #8]
 800648e:	bf0c      	ite	eq
 8006490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006494:	2500      	movne	r5, #0
 8006496:	4293      	cmp	r3, r2
 8006498:	bfc4      	itt	gt
 800649a:	1a9b      	subgt	r3, r3, r2
 800649c:	18ed      	addgt	r5, r5, r3
 800649e:	2600      	movs	r6, #0
 80064a0:	341a      	adds	r4, #26
 80064a2:	42b5      	cmp	r5, r6
 80064a4:	d11a      	bne.n	80064dc <_printf_common+0xc8>
 80064a6:	2000      	movs	r0, #0
 80064a8:	e008      	b.n	80064bc <_printf_common+0xa8>
 80064aa:	2301      	movs	r3, #1
 80064ac:	4652      	mov	r2, sl
 80064ae:	4641      	mov	r1, r8
 80064b0:	4638      	mov	r0, r7
 80064b2:	47c8      	blx	r9
 80064b4:	3001      	adds	r0, #1
 80064b6:	d103      	bne.n	80064c0 <_printf_common+0xac>
 80064b8:	f04f 30ff 	mov.w	r0, #4294967295
 80064bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c0:	3501      	adds	r5, #1
 80064c2:	e7c6      	b.n	8006452 <_printf_common+0x3e>
 80064c4:	18e1      	adds	r1, r4, r3
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	2030      	movs	r0, #48	@ 0x30
 80064ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064ce:	4422      	add	r2, r4
 80064d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064d8:	3302      	adds	r3, #2
 80064da:	e7c7      	b.n	800646c <_printf_common+0x58>
 80064dc:	2301      	movs	r3, #1
 80064de:	4622      	mov	r2, r4
 80064e0:	4641      	mov	r1, r8
 80064e2:	4638      	mov	r0, r7
 80064e4:	47c8      	blx	r9
 80064e6:	3001      	adds	r0, #1
 80064e8:	d0e6      	beq.n	80064b8 <_printf_common+0xa4>
 80064ea:	3601      	adds	r6, #1
 80064ec:	e7d9      	b.n	80064a2 <_printf_common+0x8e>
	...

080064f0 <_printf_i>:
 80064f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064f4:	7e0f      	ldrb	r7, [r1, #24]
 80064f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064f8:	2f78      	cmp	r7, #120	@ 0x78
 80064fa:	4691      	mov	r9, r2
 80064fc:	4680      	mov	r8, r0
 80064fe:	460c      	mov	r4, r1
 8006500:	469a      	mov	sl, r3
 8006502:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006506:	d807      	bhi.n	8006518 <_printf_i+0x28>
 8006508:	2f62      	cmp	r7, #98	@ 0x62
 800650a:	d80a      	bhi.n	8006522 <_printf_i+0x32>
 800650c:	2f00      	cmp	r7, #0
 800650e:	f000 80d1 	beq.w	80066b4 <_printf_i+0x1c4>
 8006512:	2f58      	cmp	r7, #88	@ 0x58
 8006514:	f000 80b8 	beq.w	8006688 <_printf_i+0x198>
 8006518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800651c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006520:	e03a      	b.n	8006598 <_printf_i+0xa8>
 8006522:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006526:	2b15      	cmp	r3, #21
 8006528:	d8f6      	bhi.n	8006518 <_printf_i+0x28>
 800652a:	a101      	add	r1, pc, #4	@ (adr r1, 8006530 <_printf_i+0x40>)
 800652c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006530:	08006589 	.word	0x08006589
 8006534:	0800659d 	.word	0x0800659d
 8006538:	08006519 	.word	0x08006519
 800653c:	08006519 	.word	0x08006519
 8006540:	08006519 	.word	0x08006519
 8006544:	08006519 	.word	0x08006519
 8006548:	0800659d 	.word	0x0800659d
 800654c:	08006519 	.word	0x08006519
 8006550:	08006519 	.word	0x08006519
 8006554:	08006519 	.word	0x08006519
 8006558:	08006519 	.word	0x08006519
 800655c:	0800669b 	.word	0x0800669b
 8006560:	080065c7 	.word	0x080065c7
 8006564:	08006655 	.word	0x08006655
 8006568:	08006519 	.word	0x08006519
 800656c:	08006519 	.word	0x08006519
 8006570:	080066bd 	.word	0x080066bd
 8006574:	08006519 	.word	0x08006519
 8006578:	080065c7 	.word	0x080065c7
 800657c:	08006519 	.word	0x08006519
 8006580:	08006519 	.word	0x08006519
 8006584:	0800665d 	.word	0x0800665d
 8006588:	6833      	ldr	r3, [r6, #0]
 800658a:	1d1a      	adds	r2, r3, #4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6032      	str	r2, [r6, #0]
 8006590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006594:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006598:	2301      	movs	r3, #1
 800659a:	e09c      	b.n	80066d6 <_printf_i+0x1e6>
 800659c:	6833      	ldr	r3, [r6, #0]
 800659e:	6820      	ldr	r0, [r4, #0]
 80065a0:	1d19      	adds	r1, r3, #4
 80065a2:	6031      	str	r1, [r6, #0]
 80065a4:	0606      	lsls	r6, r0, #24
 80065a6:	d501      	bpl.n	80065ac <_printf_i+0xbc>
 80065a8:	681d      	ldr	r5, [r3, #0]
 80065aa:	e003      	b.n	80065b4 <_printf_i+0xc4>
 80065ac:	0645      	lsls	r5, r0, #25
 80065ae:	d5fb      	bpl.n	80065a8 <_printf_i+0xb8>
 80065b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065b4:	2d00      	cmp	r5, #0
 80065b6:	da03      	bge.n	80065c0 <_printf_i+0xd0>
 80065b8:	232d      	movs	r3, #45	@ 0x2d
 80065ba:	426d      	negs	r5, r5
 80065bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065c0:	4858      	ldr	r0, [pc, #352]	@ (8006724 <_printf_i+0x234>)
 80065c2:	230a      	movs	r3, #10
 80065c4:	e011      	b.n	80065ea <_printf_i+0xfa>
 80065c6:	6821      	ldr	r1, [r4, #0]
 80065c8:	6833      	ldr	r3, [r6, #0]
 80065ca:	0608      	lsls	r0, r1, #24
 80065cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80065d0:	d402      	bmi.n	80065d8 <_printf_i+0xe8>
 80065d2:	0649      	lsls	r1, r1, #25
 80065d4:	bf48      	it	mi
 80065d6:	b2ad      	uxthmi	r5, r5
 80065d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80065da:	4852      	ldr	r0, [pc, #328]	@ (8006724 <_printf_i+0x234>)
 80065dc:	6033      	str	r3, [r6, #0]
 80065de:	bf14      	ite	ne
 80065e0:	230a      	movne	r3, #10
 80065e2:	2308      	moveq	r3, #8
 80065e4:	2100      	movs	r1, #0
 80065e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065ea:	6866      	ldr	r6, [r4, #4]
 80065ec:	60a6      	str	r6, [r4, #8]
 80065ee:	2e00      	cmp	r6, #0
 80065f0:	db05      	blt.n	80065fe <_printf_i+0x10e>
 80065f2:	6821      	ldr	r1, [r4, #0]
 80065f4:	432e      	orrs	r6, r5
 80065f6:	f021 0104 	bic.w	r1, r1, #4
 80065fa:	6021      	str	r1, [r4, #0]
 80065fc:	d04b      	beq.n	8006696 <_printf_i+0x1a6>
 80065fe:	4616      	mov	r6, r2
 8006600:	fbb5 f1f3 	udiv	r1, r5, r3
 8006604:	fb03 5711 	mls	r7, r3, r1, r5
 8006608:	5dc7      	ldrb	r7, [r0, r7]
 800660a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800660e:	462f      	mov	r7, r5
 8006610:	42bb      	cmp	r3, r7
 8006612:	460d      	mov	r5, r1
 8006614:	d9f4      	bls.n	8006600 <_printf_i+0x110>
 8006616:	2b08      	cmp	r3, #8
 8006618:	d10b      	bne.n	8006632 <_printf_i+0x142>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	07df      	lsls	r7, r3, #31
 800661e:	d508      	bpl.n	8006632 <_printf_i+0x142>
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	6861      	ldr	r1, [r4, #4]
 8006624:	4299      	cmp	r1, r3
 8006626:	bfde      	ittt	le
 8006628:	2330      	movle	r3, #48	@ 0x30
 800662a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800662e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006632:	1b92      	subs	r2, r2, r6
 8006634:	6122      	str	r2, [r4, #16]
 8006636:	f8cd a000 	str.w	sl, [sp]
 800663a:	464b      	mov	r3, r9
 800663c:	aa03      	add	r2, sp, #12
 800663e:	4621      	mov	r1, r4
 8006640:	4640      	mov	r0, r8
 8006642:	f7ff fee7 	bl	8006414 <_printf_common>
 8006646:	3001      	adds	r0, #1
 8006648:	d14a      	bne.n	80066e0 <_printf_i+0x1f0>
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	b004      	add	sp, #16
 8006650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	f043 0320 	orr.w	r3, r3, #32
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	4832      	ldr	r0, [pc, #200]	@ (8006728 <_printf_i+0x238>)
 800665e:	2778      	movs	r7, #120	@ 0x78
 8006660:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	6831      	ldr	r1, [r6, #0]
 8006668:	061f      	lsls	r7, r3, #24
 800666a:	f851 5b04 	ldr.w	r5, [r1], #4
 800666e:	d402      	bmi.n	8006676 <_printf_i+0x186>
 8006670:	065f      	lsls	r7, r3, #25
 8006672:	bf48      	it	mi
 8006674:	b2ad      	uxthmi	r5, r5
 8006676:	6031      	str	r1, [r6, #0]
 8006678:	07d9      	lsls	r1, r3, #31
 800667a:	bf44      	itt	mi
 800667c:	f043 0320 	orrmi.w	r3, r3, #32
 8006680:	6023      	strmi	r3, [r4, #0]
 8006682:	b11d      	cbz	r5, 800668c <_printf_i+0x19c>
 8006684:	2310      	movs	r3, #16
 8006686:	e7ad      	b.n	80065e4 <_printf_i+0xf4>
 8006688:	4826      	ldr	r0, [pc, #152]	@ (8006724 <_printf_i+0x234>)
 800668a:	e7e9      	b.n	8006660 <_printf_i+0x170>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	f023 0320 	bic.w	r3, r3, #32
 8006692:	6023      	str	r3, [r4, #0]
 8006694:	e7f6      	b.n	8006684 <_printf_i+0x194>
 8006696:	4616      	mov	r6, r2
 8006698:	e7bd      	b.n	8006616 <_printf_i+0x126>
 800669a:	6833      	ldr	r3, [r6, #0]
 800669c:	6825      	ldr	r5, [r4, #0]
 800669e:	6961      	ldr	r1, [r4, #20]
 80066a0:	1d18      	adds	r0, r3, #4
 80066a2:	6030      	str	r0, [r6, #0]
 80066a4:	062e      	lsls	r6, r5, #24
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	d501      	bpl.n	80066ae <_printf_i+0x1be>
 80066aa:	6019      	str	r1, [r3, #0]
 80066ac:	e002      	b.n	80066b4 <_printf_i+0x1c4>
 80066ae:	0668      	lsls	r0, r5, #25
 80066b0:	d5fb      	bpl.n	80066aa <_printf_i+0x1ba>
 80066b2:	8019      	strh	r1, [r3, #0]
 80066b4:	2300      	movs	r3, #0
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	4616      	mov	r6, r2
 80066ba:	e7bc      	b.n	8006636 <_printf_i+0x146>
 80066bc:	6833      	ldr	r3, [r6, #0]
 80066be:	1d1a      	adds	r2, r3, #4
 80066c0:	6032      	str	r2, [r6, #0]
 80066c2:	681e      	ldr	r6, [r3, #0]
 80066c4:	6862      	ldr	r2, [r4, #4]
 80066c6:	2100      	movs	r1, #0
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7f9 fda1 	bl	8000210 <memchr>
 80066ce:	b108      	cbz	r0, 80066d4 <_printf_i+0x1e4>
 80066d0:	1b80      	subs	r0, r0, r6
 80066d2:	6060      	str	r0, [r4, #4]
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	6123      	str	r3, [r4, #16]
 80066d8:	2300      	movs	r3, #0
 80066da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066de:	e7aa      	b.n	8006636 <_printf_i+0x146>
 80066e0:	6923      	ldr	r3, [r4, #16]
 80066e2:	4632      	mov	r2, r6
 80066e4:	4649      	mov	r1, r9
 80066e6:	4640      	mov	r0, r8
 80066e8:	47d0      	blx	sl
 80066ea:	3001      	adds	r0, #1
 80066ec:	d0ad      	beq.n	800664a <_printf_i+0x15a>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	079b      	lsls	r3, r3, #30
 80066f2:	d413      	bmi.n	800671c <_printf_i+0x22c>
 80066f4:	68e0      	ldr	r0, [r4, #12]
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	4298      	cmp	r0, r3
 80066fa:	bfb8      	it	lt
 80066fc:	4618      	movlt	r0, r3
 80066fe:	e7a6      	b.n	800664e <_printf_i+0x15e>
 8006700:	2301      	movs	r3, #1
 8006702:	4632      	mov	r2, r6
 8006704:	4649      	mov	r1, r9
 8006706:	4640      	mov	r0, r8
 8006708:	47d0      	blx	sl
 800670a:	3001      	adds	r0, #1
 800670c:	d09d      	beq.n	800664a <_printf_i+0x15a>
 800670e:	3501      	adds	r5, #1
 8006710:	68e3      	ldr	r3, [r4, #12]
 8006712:	9903      	ldr	r1, [sp, #12]
 8006714:	1a5b      	subs	r3, r3, r1
 8006716:	42ab      	cmp	r3, r5
 8006718:	dcf2      	bgt.n	8006700 <_printf_i+0x210>
 800671a:	e7eb      	b.n	80066f4 <_printf_i+0x204>
 800671c:	2500      	movs	r5, #0
 800671e:	f104 0619 	add.w	r6, r4, #25
 8006722:	e7f5      	b.n	8006710 <_printf_i+0x220>
 8006724:	08006996 	.word	0x08006996
 8006728:	080069a7 	.word	0x080069a7

0800672c <memmove>:
 800672c:	4288      	cmp	r0, r1
 800672e:	b510      	push	{r4, lr}
 8006730:	eb01 0402 	add.w	r4, r1, r2
 8006734:	d902      	bls.n	800673c <memmove+0x10>
 8006736:	4284      	cmp	r4, r0
 8006738:	4623      	mov	r3, r4
 800673a:	d807      	bhi.n	800674c <memmove+0x20>
 800673c:	1e43      	subs	r3, r0, #1
 800673e:	42a1      	cmp	r1, r4
 8006740:	d008      	beq.n	8006754 <memmove+0x28>
 8006742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800674a:	e7f8      	b.n	800673e <memmove+0x12>
 800674c:	4402      	add	r2, r0
 800674e:	4601      	mov	r1, r0
 8006750:	428a      	cmp	r2, r1
 8006752:	d100      	bne.n	8006756 <memmove+0x2a>
 8006754:	bd10      	pop	{r4, pc}
 8006756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800675a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800675e:	e7f7      	b.n	8006750 <memmove+0x24>

08006760 <_sbrk_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d06      	ldr	r5, [pc, #24]	@ (800677c <_sbrk_r+0x1c>)
 8006764:	2300      	movs	r3, #0
 8006766:	4604      	mov	r4, r0
 8006768:	4608      	mov	r0, r1
 800676a:	602b      	str	r3, [r5, #0]
 800676c:	f7fa f946 	bl	80009fc <_sbrk>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_sbrk_r+0x1a>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	b103      	cbz	r3, 800677a <_sbrk_r+0x1a>
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	20000400 	.word	0x20000400

08006780 <memcpy>:
 8006780:	440a      	add	r2, r1
 8006782:	4291      	cmp	r1, r2
 8006784:	f100 33ff 	add.w	r3, r0, #4294967295
 8006788:	d100      	bne.n	800678c <memcpy+0xc>
 800678a:	4770      	bx	lr
 800678c:	b510      	push	{r4, lr}
 800678e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006792:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006796:	4291      	cmp	r1, r2
 8006798:	d1f9      	bne.n	800678e <memcpy+0xe>
 800679a:	bd10      	pop	{r4, pc}

0800679c <_realloc_r>:
 800679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a0:	4607      	mov	r7, r0
 80067a2:	4614      	mov	r4, r2
 80067a4:	460d      	mov	r5, r1
 80067a6:	b921      	cbnz	r1, 80067b2 <_realloc_r+0x16>
 80067a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ac:	4611      	mov	r1, r2
 80067ae:	f7ff bc4d 	b.w	800604c <_malloc_r>
 80067b2:	b92a      	cbnz	r2, 80067c0 <_realloc_r+0x24>
 80067b4:	f7ff fbde 	bl	8005f74 <_free_r>
 80067b8:	4625      	mov	r5, r4
 80067ba:	4628      	mov	r0, r5
 80067bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c0:	f000 f81a 	bl	80067f8 <_malloc_usable_size_r>
 80067c4:	4284      	cmp	r4, r0
 80067c6:	4606      	mov	r6, r0
 80067c8:	d802      	bhi.n	80067d0 <_realloc_r+0x34>
 80067ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067ce:	d8f4      	bhi.n	80067ba <_realloc_r+0x1e>
 80067d0:	4621      	mov	r1, r4
 80067d2:	4638      	mov	r0, r7
 80067d4:	f7ff fc3a 	bl	800604c <_malloc_r>
 80067d8:	4680      	mov	r8, r0
 80067da:	b908      	cbnz	r0, 80067e0 <_realloc_r+0x44>
 80067dc:	4645      	mov	r5, r8
 80067de:	e7ec      	b.n	80067ba <_realloc_r+0x1e>
 80067e0:	42b4      	cmp	r4, r6
 80067e2:	4622      	mov	r2, r4
 80067e4:	4629      	mov	r1, r5
 80067e6:	bf28      	it	cs
 80067e8:	4632      	movcs	r2, r6
 80067ea:	f7ff ffc9 	bl	8006780 <memcpy>
 80067ee:	4629      	mov	r1, r5
 80067f0:	4638      	mov	r0, r7
 80067f2:	f7ff fbbf 	bl	8005f74 <_free_r>
 80067f6:	e7f1      	b.n	80067dc <_realloc_r+0x40>

080067f8 <_malloc_usable_size_r>:
 80067f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067fc:	1f18      	subs	r0, r3, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bfbc      	itt	lt
 8006802:	580b      	ldrlt	r3, [r1, r0]
 8006804:	18c0      	addlt	r0, r0, r3
 8006806:	4770      	bx	lr

08006808 <_init>:
 8006808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680a:	bf00      	nop
 800680c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680e:	bc08      	pop	{r3}
 8006810:	469e      	mov	lr, r3
 8006812:	4770      	bx	lr

08006814 <_fini>:
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006816:	bf00      	nop
 8006818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681a:	bc08      	pop	{r3}
 800681c:	469e      	mov	lr, r3
 800681e:	4770      	bx	lr
