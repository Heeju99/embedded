
250701_TimeWatch_StopWatch_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005844  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080059e4  080059e4  000069e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab0  08005ab0  00007080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ab0  08005ab0  00006ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ab8  08005ab8  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab8  08005ab8  00006ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005abc  08005abc  00006abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08005ac0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000413c  20000080  08005b40  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041bc  08005b40  000071bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f36  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000418c  00000000  00000000  0001efe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00023178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001171  00000000  00000000  00024808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4b7  00000000  00000000  00025979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc63  00000000  00000000  0003fe30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d05  00000000  00000000  0005da93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7798  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b7c  00000000  00000000  000f77dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000fd358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059cc 	.word	0x080059cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080059cc 	.word	0x080059cc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac
 800053c:	20000100 	.word	0x20000100

08000540 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b09c      	sub	sp, #112	@ 0x70
 8000544:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000546:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <MX_FREERTOS_Init+0xa4>)
 8000548:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800054c:	461d      	mov	r5, r3
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000552:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800055a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f003 ffc4 	bl	80044ee <osThreadCreate>
 8000566:	4603      	mov	r3, r0
 8000568:	4a1f      	ldr	r2, [pc, #124]	@ (80005e8 <MX_FREERTOS_Init+0xa8>)
 800056a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Listener */
  osThreadDef(Listener, ListenerThread, osPriorityNormal, 0, 128);
 800056c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <MX_FREERTOS_Init+0xac>)
 800056e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ListenerHandle = osThreadCreate(osThread(Listener), NULL);
 8000580:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 ffb1 	bl	80044ee <osThreadCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a18      	ldr	r2, [pc, #96]	@ (80005f0 <MX_FREERTOS_Init+0xb0>)
 8000590:	6013      	str	r3, [r2, #0]

  /* definition and creation of Controller */
  osThreadDef(Controller, ControllerThread, osPriorityNormal, 0, 128);
 8000592:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <MX_FREERTOS_Init+0xb4>)
 8000594:	f107 041c 	add.w	r4, r7, #28
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControllerHandle = osThreadCreate(osThread(Controller), NULL);
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 ff9e 	bl	80044ee <osThreadCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a10      	ldr	r2, [pc, #64]	@ (80005f8 <MX_FREERTOS_Init+0xb8>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Presenter */
  osThreadDef(Presenter, PresenterThread, osPriorityNormal, 0, 128);
 80005b8:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <MX_FREERTOS_Init+0xbc>)
 80005ba:	463c      	mov	r4, r7
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PresenterHandle = osThreadCreate(osThread(Presenter), NULL);
 80005ca:	463b      	mov	r3, r7
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 ff8d 	bl	80044ee <osThreadCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000600 <MX_FREERTOS_Init+0xc0>)
 80005d8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005da:	bf00      	nop
 80005dc:	3770      	adds	r7, #112	@ 0x70
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}
 80005e2:	bf00      	nop
 80005e4:	080059f0 	.word	0x080059f0
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	08005a18 	.word	0x08005a18
 80005f0:	200000a0 	.word	0x200000a0
 80005f4:	08005a40 	.word	0x08005a40
 80005f8:	200000a4 	.word	0x200000a4
 80005fc:	08005a68 	.word	0x08005a68
 8000600:	200000a8 	.word	0x200000a8

08000604 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f003 ffba 	bl	8004586 <osDelay>
 8000612:	e7fb      	b.n	800060c <StartDefaultTask+0x8>

08000614 <ListenerThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ListenerThread */
void ListenerThread(void const * argument)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ListenerThread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f003 ffb2 	bl	8004586 <osDelay>
 8000622:	e7fb      	b.n	800061c <ListenerThread+0x8>

08000624 <ControllerThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControllerThread */
void ControllerThread(void const * argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControllerThread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f003 ffaa 	bl	8004586 <osDelay>
 8000632:	e7fb      	b.n	800062c <ControllerThread+0x8>

08000634 <PresenterThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PresenterThread */
void PresenterThread(void const * argument)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PresenterThread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f003 ffa2 	bl	8004586 <osDelay>
 8000642:	e7fb      	b.n	800063c <PresenterThread+0x8>

08000644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b49      	ldr	r3, [pc, #292]	@ (8000784 <MX_GPIO_Init+0x140>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a48      	ldr	r2, [pc, #288]	@ (8000784 <MX_GPIO_Init+0x140>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b46      	ldr	r3, [pc, #280]	@ (8000784 <MX_GPIO_Init+0x140>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b42      	ldr	r3, [pc, #264]	@ (8000784 <MX_GPIO_Init+0x140>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a41      	ldr	r2, [pc, #260]	@ (8000784 <MX_GPIO_Init+0x140>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b3f      	ldr	r3, [pc, #252]	@ (8000784 <MX_GPIO_Init+0x140>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b3b      	ldr	r3, [pc, #236]	@ (8000784 <MX_GPIO_Init+0x140>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a3a      	ldr	r2, [pc, #232]	@ (8000784 <MX_GPIO_Init+0x140>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b38      	ldr	r3, [pc, #224]	@ (8000784 <MX_GPIO_Init+0x140>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b34      	ldr	r3, [pc, #208]	@ (8000784 <MX_GPIO_Init+0x140>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a33      	ldr	r2, [pc, #204]	@ (8000784 <MX_GPIO_Init+0x140>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <MX_GPIO_Init+0x140>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 80006ca:	2200      	movs	r2, #0
 80006cc:	f641 0113 	movw	r1, #6163	@ 0x1813
 80006d0:	482d      	ldr	r0, [pc, #180]	@ (8000788 <MX_GPIO_Init+0x144>)
 80006d2:	f001 fa05 	bl	8001ae0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 80006dc:	482b      	ldr	r0, [pc, #172]	@ (800078c <MX_GPIO_Init+0x148>)
 80006de:	f001 f9ff 	bl	8001ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80006e2:	2200      	movs	r2, #0
 80006e4:	f24f 0106 	movw	r1, #61446	@ 0xf006
 80006e8:	4829      	ldr	r0, [pc, #164]	@ (8000790 <MX_GPIO_Init+0x14c>)
 80006ea:	f001 f9f9 	bl	8001ae0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 80006ee:	f641 0313 	movw	r3, #6163	@ 0x1813
 80006f2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4820      	ldr	r0, [pc, #128]	@ (8000788 <MX_GPIO_Init+0x144>)
 8000708:	f001 f866 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 800070c:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4819      	ldr	r0, [pc, #100]	@ (800078c <MX_GPIO_Init+0x148>)
 8000726:	f001 f857 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800072a:	f24f 0306 	movw	r3, #61446	@ 0xf006
 800072e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4813      	ldr	r0, [pc, #76]	@ (8000790 <MX_GPIO_Init+0x14c>)
 8000744:	f001 f848 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000748:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480a      	ldr	r0, [pc, #40]	@ (8000788 <MX_GPIO_Init+0x144>)
 800075e:	f001 f83b 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000762:	2328      	movs	r3, #40	@ 0x28
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_GPIO_Init+0x14c>)
 8000776:	f001 f82f 	bl	80017d8 <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	@ 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40020000 	.word	0x40020000
 800078c:	40020800 	.word	0x40020800
 8000790:	40020400 	.word	0x40020400

08000794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	@ (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f001 f99f 	bl	8001b14 <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 f8d0 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000300 	.word	0x20000300
 80007e8:	40005400 	.word	0x40005400
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a19      	ldr	r2, [pc, #100]	@ (8000874 <HAL_I2C_MspInit+0x84>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12c      	bne.n	800086c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <HAL_I2C_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a17      	ldr	r2, [pc, #92]	@ (8000878 <HAL_I2C_MspInit+0x88>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <HAL_I2C_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800082e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000834:	2312      	movs	r3, #18
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000840:	2304      	movs	r3, #4
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	480c      	ldr	r0, [pc, #48]	@ (800087c <HAL_I2C_MspInit+0x8c>)
 800084c:	f000 ffc4 	bl	80017d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_I2C_MspInit+0x88>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a07      	ldr	r2, [pc, #28]	@ (8000878 <HAL_I2C_MspInit+0x88>)
 800085a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <HAL_I2C_MspInit+0x88>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	@ 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40005400 	.word	0x40005400
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 fde2 	bl	800144c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f812 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f7ff feda 	bl	8000644 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000890:	f000 f966 	bl	8000b60 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000894:	f000 f9d6 	bl	8000c44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000898:	f7ff ff7c 	bl	8000794 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 800089c:	f000 fab9 	bl	8000e12 <ap_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80008a0:	f7ff fe4e 	bl	8000540 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008a4:	f003 fe1c 	bl	80044e0 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 80008a8:	f000 faaf 	bl	8000e0a <ap_main>
 80008ac:	e7fc      	b.n	80008a8 <main+0x28>
	...

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2230      	movs	r2, #48	@ 0x30
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f005 f858 	bl	8005974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <SystemClock_Config+0xc8>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	4a26      	ldr	r2, [pc, #152]	@ (8000978 <SystemClock_Config+0xc8>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e4:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <SystemClock_Config+0xc8>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4b21      	ldr	r3, [pc, #132]	@ (800097c <SystemClock_Config+0xcc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a20      	ldr	r2, [pc, #128]	@ (800097c <SystemClock_Config+0xcc>)
 80008fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <SystemClock_Config+0xcc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000910:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000916:	2302      	movs	r3, #2
 8000918:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800091e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000920:	2304      	movs	r3, #4
 8000922:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000924:	2364      	movs	r3, #100	@ 0x64
 8000926:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800092c:	2304      	movs	r3, #4
 800092e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0320 	add.w	r3, r7, #32
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fd8b 	bl	8002450 <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000940:	f000 f81e 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	230f      	movs	r3, #15
 8000946:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2302      	movs	r3, #2
 800094a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2103      	movs	r1, #3
 8000960:	4618      	mov	r0, r3
 8000962:	f001 ffed 	bl	8002940 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800096c:	f000 f808 	bl	8000980 <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3750      	adds	r7, #80	@ 0x50
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <HAL_MspInit+0x54>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_MspInit+0x54>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f000 fe45 	bl	8001660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08c      	sub	sp, #48	@ 0x30
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab4 <HAL_InitTick+0xd0>)
 80009fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fc:	4a2d      	ldr	r2, [pc, #180]	@ (8000ab4 <HAL_InitTick+0xd0>)
 80009fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a02:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a04:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab4 <HAL_InitTick+0xd0>)
 8000a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a10:	f107 020c 	add.w	r2, r7, #12
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 f9b0 	bl	8002d80 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a20:	f002 f99a 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8000a24:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a28:	4a23      	ldr	r2, [pc, #140]	@ (8000ab8 <HAL_InitTick+0xd4>)
 8000a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2e:	0c9b      	lsrs	r3, r3, #18
 8000a30:	3b01      	subs	r3, #1
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000a34:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <HAL_InitTick+0xd8>)
 8000a36:	4a22      	ldr	r2, [pc, #136]	@ (8000ac0 <HAL_InitTick+0xdc>)
 8000a38:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000a3a:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <HAL_InitTick+0xd8>)
 8000a3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a40:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000a42:	4a1e      	ldr	r2, [pc, #120]	@ (8000abc <HAL_InitTick+0xd8>)
 8000a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a46:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <HAL_InitTick+0xd8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <HAL_InitTick+0xd8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_InitTick+0xd8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000a5a:	4818      	ldr	r0, [pc, #96]	@ (8000abc <HAL_InitTick+0xd8>)
 8000a5c:	f002 f9c2 	bl	8002de4 <HAL_TIM_Base_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d11b      	bne.n	8000aa6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000a6e:	4813      	ldr	r0, [pc, #76]	@ (8000abc <HAL_InitTick+0xd8>)
 8000a70:	f002 fa08 	bl	8002e84 <HAL_TIM_Base_Start_IT>
 8000a74:	4603      	mov	r3, r0
 8000a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d111      	bne.n	8000aa6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000a82:	201a      	movs	r0, #26
 8000a84:	f000 fe08 	bl	8001698 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	d808      	bhi.n	8000aa0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	201a      	movs	r0, #26
 8000a94:	f000 fde4 	bl	8001660 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <HAL_InitTick+0xe0>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	e002      	b.n	8000aa6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3730      	adds	r7, #48	@ 0x30
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	431bde83 	.word	0x431bde83
 8000abc:	20000354 	.word	0x20000354
 8000ac0:	40014800 	.word	0x40014800
 8000ac4:	20000074 	.word	0x20000074

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <NMI_Handler+0x4>

08000ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <MemManage_Handler+0x4>

08000ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <UsageFault_Handler+0x4>

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000b06:	f002 fa1f 	bl	8002f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000354 	.word	0x20000354

08000b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <TIM2_IRQHandler+0x10>)
 8000b1a:	f002 fa15 	bl	8002f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000039c 	.word	0x2000039c

08000b28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <USART2_IRQHandler+0x10>)
 8000b2e:	f002 fddd 	bl	80036ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200003e4 	.word	0x200003e4

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <MX_TIM2_Init+0x94>)
 8000b7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <MX_TIM2_Init+0x94>)
 8000b86:	220f      	movs	r2, #15
 8000b88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_TIM2_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <MX_TIM2_Init+0x94>)
 8000b92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_TIM2_Init+0x94>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_TIM2_Init+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ba4:	4813      	ldr	r0, [pc, #76]	@ (8000bf4 <MX_TIM2_Init+0x94>)
 8000ba6:	f002 f91d 	bl	8002de4 <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bb0:	f7ff fee6 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480c      	ldr	r0, [pc, #48]	@ (8000bf4 <MX_TIM2_Init+0x94>)
 8000bc2:	f002 fab1 	bl	8003128 <HAL_TIM_ConfigClockSource>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f7ff fed8 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_TIM2_Init+0x94>)
 8000bde:	f002 fcb3 	bl	8003548 <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000be8:	f7ff feca 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000039c 	.word	0x2000039c

08000bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c08:	d115      	bne.n	8000c36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <HAL_TIM_Base_MspInit+0x48>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <HAL_TIM_Base_MspInit+0x48>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <HAL_TIM_Base_MspInit+0x48>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2105      	movs	r1, #5
 8000c2a:	201c      	movs	r0, #28
 8000c2c:	f000 fd18 	bl	8001660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c30:	201c      	movs	r0, #28
 8000c32:	f000 fd31 	bl	8001698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <MX_USART2_UART_Init+0x50>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	f002 fce6 	bl	800364c <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c86:	f7ff fe7b 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200003e4 	.word	0x200003e4
 8000c94:	40004400 	.word	0x40004400

08000c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d2c <HAL_UART_MspInit+0x94>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d133      	bne.n	8000d22 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <HAL_UART_MspInit+0x9c>)
 8000d0e:	f000 fd63 	bl	80017d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2105      	movs	r1, #5
 8000d16:	2026      	movs	r0, #38	@ 0x26
 8000d18:	f000 fca2 	bl	8001660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d1c:	2026      	movs	r0, #38	@ 0x26
 8000d1e:	f000 fcbb 	bl	8001698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	@ 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3c:	f7ff fefe 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f004 fe0d 	bl	8005984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fd89 	bl	8000880 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d7c:	08005ac0 	.word	0x08005ac0
  ldr r2, =_sbss
 8000d80:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d84:	200041bc 	.word	0x200041bc

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <Listener_Init>:
//static Que_TypeDef uartRxQue;

static button_t btnWatch = {0};

void Listener_Init()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 8000d90:	2220      	movs	r2, #32
 8000d92:	4908      	ldr	r1, [pc, #32]	@ (8000db4 <Listener_Init+0x28>)
 8000d94:	4808      	ldr	r0, [pc, #32]	@ (8000db8 <Listener_Init+0x2c>)
 8000d96:	f000 f8d5 	bl	8000f44 <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	4905      	ldr	r1, [pc, #20]	@ (8000db4 <Listener_Init+0x28>)
 8000d9e:	4807      	ldr	r0, [pc, #28]	@ (8000dbc <Listener_Init+0x30>)
 8000da0:	f000 f8d0 	bl	8000f44 <Button_Init>
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 8000da4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000da8:	4905      	ldr	r1, [pc, #20]	@ (8000dc0 <Listener_Init+0x34>)
 8000daa:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <Listener_Init+0x38>)
 8000dac:	f000 f8ca 	bl	8000f44 <Button_Init>
//	Que_Init(&uartRxQue, sizeof(uint8_t));
//	HAL_UART_Receive_IT(&huart2, &rcvData, 1); //uart recv interrupt enable
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40020400 	.word	0x40020400
 8000db8:	20000430 	.word	0x20000430
 8000dbc:	2000043c 	.word	0x2000043c
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	20000448 	.word	0x20000448

08000dc8 <Presenter_Init>:


static Watch_t dispData = {TIME_WATCH, 12, 0, 0, 0};

void Presenter_Init()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <Presenter_Init+0x14>)
 8000dce:	f000 fa61 	bl	8001294 <LCD_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8000dd2:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <Presenter_Init+0x18>)
 8000dd4:	f002 f856 	bl	8002e84 <HAL_TIM_Base_Start_IT>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000300 	.word	0x20000300
 8000de0:	2000039c 	.word	0x2000039c

08000de4 <HAL_TIM_PeriodElapsedCallback>:

volatile uint8_t dotBlink = 0;
volatile uint16_t blinkTick = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df4:	d105      	bne.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x1e>
		FND_DispDataCallBack();
 8000df6:	f000 f8bb 	bl	8000f70 <FND_DispDataCallBack>

		TimeWatch_IncTimeCallBack();
 8000dfa:	f000 f861 	bl	8000ec0 <TimeWatch_IncTimeCallBack>
		StopWatch_IncstopCallBack();
 8000dfe:	f000 f811 	bl	8000e24 <StopWatch_IncstopCallBack>
	}
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <ap_main>:
//		Listener_UartCallBack();
//	}
//}

int ap_main()
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0


	while (1) {
 8000e0e:	bf00      	nop
 8000e10:	e7fd      	b.n	8000e0e <ap_main+0x4>

08000e12 <ap_init>:
	}
	return 0;
}

void ap_init(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
	Listener_Init();
 8000e16:	f7ff ffb9 	bl	8000d8c <Listener_Init>
	Presenter_Init();
 8000e1a:	f7ff ffd5 	bl	8000dc8 <Presenter_Init>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <StopWatch_IncstopCallBack>:

extern inputData_TypeDef controlData;
static stopWatch_s stopWatchstate = STOP;
Watch_t stopWatch = {STOP_WATCH, 0, 0, 0, 0};

void StopWatch_IncstopCallBack(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	if (stopWatchstate == RUN) {
 8000e28:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <StopWatch_IncstopCallBack+0x14>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <StopWatch_IncstopCallBack+0x10>
		StopWatch_Incstop();
 8000e30:	f000 f804 	bl	8000e3c <StopWatch_Incstop>
	}
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000042c 	.word	0x2000042c

08000e3c <StopWatch_Incstop>:

void StopWatch_Incstop()
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	if (stopWatch.msec < 1000 - 1) {
 8000e40:	4b1e      	ldr	r3, [pc, #120]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e42:	889b      	ldrh	r3, [r3, #4]
 8000e44:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d806      	bhi.n	8000e5a <StopWatch_Incstop+0x1e>
		stopWatch.msec++;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e4e:	889b      	ldrh	r3, [r3, #4]
 8000e50:	3301      	adds	r3, #1
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e56:	809a      	strh	r2, [r3, #4]
		return;
 8000e58:	e02c      	b.n	8000eb4 <StopWatch_Incstop+0x78>
	} else {
		stopWatch.msec = 0;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	809a      	strh	r2, [r3, #4]
	}
	if (stopWatch.sec < 60 - 1) {
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e62:	78db      	ldrb	r3, [r3, #3]
 8000e64:	2b3a      	cmp	r3, #58	@ 0x3a
 8000e66:	d806      	bhi.n	8000e76 <StopWatch_Incstop+0x3a>
		stopWatch.sec++;
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e6a:	78db      	ldrb	r3, [r3, #3]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e72:	70da      	strb	r2, [r3, #3]
		return;
 8000e74:	e01e      	b.n	8000eb4 <StopWatch_Incstop+0x78>
	} else{
		stopWatch.sec = 0;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	70da      	strb	r2, [r3, #3]
	}

	if (stopWatch.min < 60 - 1) {
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e7e:	789b      	ldrb	r3, [r3, #2]
 8000e80:	2b3a      	cmp	r3, #58	@ 0x3a
 8000e82:	d806      	bhi.n	8000e92 <StopWatch_Incstop+0x56>
		stopWatch.min++;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e8e:	709a      	strb	r2, [r3, #2]
		return;
 8000e90:	e010      	b.n	8000eb4 <StopWatch_Incstop+0x78>
	}
	stopWatch.min = 0;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	709a      	strb	r2, [r3, #2]

	if (stopWatch.hour < 24 - 1) {
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000e9a:	785b      	ldrb	r3, [r3, #1]
 8000e9c:	2b16      	cmp	r3, #22
 8000e9e:	d806      	bhi.n	8000eae <StopWatch_Incstop+0x72>
		stopWatch.hour++;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000ea2:	785b      	ldrb	r3, [r3, #1]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000eaa:	705a      	strb	r2, [r3, #1]
		return;
 8000eac:	e002      	b.n	8000eb4 <StopWatch_Incstop+0x78>
	}
	stopWatch.hour = 0;
 8000eae:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <StopWatch_Incstop+0x80>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	705a      	strb	r2, [r3, #1]
}
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

Watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack() //interrupt에 들어가는 함수(interrupt로 인하여 갑자기 실행됨?)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	if (timeWatch.msec < 1000 - 1) {
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000ec6:	889b      	ldrh	r3, [r3, #4]
 8000ec8:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d806      	bhi.n	8000ede <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000ed2:	889b      	ldrh	r3, [r3, #4]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000eda:	809a      	strh	r2, [r3, #4]
		return;
 8000edc:	e02c      	b.n	8000f38 <TimeWatch_IncTimeCallBack+0x78>
	} else {
		timeWatch.msec = 0;
 8000ede:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	809a      	strh	r2, [r3, #4]
	}
	if (timeWatch.sec < 60 - 1) {
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000ee6:	78db      	ldrb	r3, [r3, #3]
 8000ee8:	2b3a      	cmp	r3, #58	@ 0x3a
 8000eea:	d806      	bhi.n	8000efa <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000eee:	78db      	ldrb	r3, [r3, #3]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000ef6:	70da      	strb	r2, [r3, #3]
		return;
 8000ef8:	e01e      	b.n	8000f38 <TimeWatch_IncTimeCallBack+0x78>
	} else{
		timeWatch.sec = 0;
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	70da      	strb	r2, [r3, #3]
	}

	if (timeWatch.min < 60 - 1) {
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000f02:	789b      	ldrb	r3, [r3, #2]
 8000f04:	2b3a      	cmp	r3, #58	@ 0x3a
 8000f06:	d806      	bhi.n	8000f16 <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 8000f08:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000f0a:	789b      	ldrb	r3, [r3, #2]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000f12:	709a      	strb	r2, [r3, #2]
		return;
 8000f14:	e010      	b.n	8000f38 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	709a      	strb	r2, [r3, #2]

	if (timeWatch.hour < 24 - 1) {
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	2b16      	cmp	r3, #22
 8000f22:	d806      	bhi.n	8000f32 <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000f2e:	705a      	strb	r2, [r3, #1]
		return;
 8000f30:	e002      	b.n	8000f38 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <TimeWatch_IncTimeCallBack+0x80>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	705a      	strb	r2, [r3, #1]
}
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	2000000c 	.word	0x2000000c

08000f44 <Button_Init>:
Button_Handler_t hBtnMode;
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	88fa      	ldrh	r2, [r7, #6]
 8000f5c:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2201      	movs	r2, #1
 8000f62:	609a      	str	r2, [r3, #8]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDisNum
void FND_DispDataCallBack()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	static int digitPos = 0; // digit 자리 표현 변수
	// interrupt 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos + 1) % 8; // 0~3까지 출력 반복
 8000f74:	4b80      	ldr	r3, [pc, #512]	@ (8001178 <FND_DispDataCallBack+0x208>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	425a      	negs	r2, r3
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	f002 0207 	and.w	r2, r2, #7
 8000f84:	bf58      	it	pl
 8000f86:	4253      	negpl	r3, r2
 8000f88:	4a7b      	ldr	r2, [pc, #492]	@ (8001178 <FND_DispDataCallBack+0x208>)
 8000f8a:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 8000f8c:	4b7a      	ldr	r3, [pc, #488]	@ (8001178 <FND_DispDataCallBack+0x208>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	f200 80ee 	bhi.w	8001172 <FND_DispDataCallBack+0x202>
 8000f96:	a201      	add	r2, pc, #4	@ (adr r2, 8000f9c <FND_DispDataCallBack+0x2c>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fbd 	.word	0x08000fbd
 8000fa0:	08000feb 	.word	0x08000feb
 8000fa4:	08001023 	.word	0x08001023
 8000fa8:	0800105b 	.word	0x0800105b
 8000fac:	08001093 	.word	0x08001093
 8000fb0:	080010cb 	.word	0x080010cb
 8000fb4:	08001103 	.word	0x08001103
 8000fb8:	0800113b 	.word	0x0800113b
	{
	// 계속 켜져있으면 FND 켜져있을 때 데이터가 바뀌면서 잔상이 생긴다
	// -> FND를 끄고 데이터를 바꾸고 다시 킨다.
	case DIGIT_1:
		FND_DispOffALL();
 8000fbc:	f000 f900 	bl	80011c0 <FND_DispOffALL>
		FND_DispDigit(fndDispNum%10);
 8000fc0:	4b6e      	ldr	r3, [pc, #440]	@ (800117c <FND_DispDataCallBack+0x20c>)
 8000fc2:	881a      	ldrh	r2, [r3, #0]
 8000fc4:	4b6e      	ldr	r3, [pc, #440]	@ (8001180 <FND_DispDataCallBack+0x210>)
 8000fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8000fca:	08d9      	lsrs	r1, r3, #3
 8000fcc:	460b      	mov	r3, r1
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f913 	bl	8001204 <FND_DispDigit>
		FND_DispOn(digitPos);
 8000fde:	4b66      	ldr	r3, [pc, #408]	@ (8001178 <FND_DispDataCallBack+0x208>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f8d4 	bl	8001190 <FND_DispOn>
		break;
 8000fe8:	e0c3      	b.n	8001172 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffALL();
 8000fea:	f000 f8e9 	bl	80011c0 <FND_DispOffALL>
		FND_DispDigit((fndDispNum/10)%10);
 8000fee:	4b63      	ldr	r3, [pc, #396]	@ (800117c <FND_DispDataCallBack+0x20c>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	4a63      	ldr	r2, [pc, #396]	@ (8001180 <FND_DispDataCallBack+0x210>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b60      	ldr	r3, [pc, #384]	@ (8001180 <FND_DispDataCallBack+0x210>)
 8000ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8001002:	08d9      	lsrs	r1, r3, #3
 8001004:	460b      	mov	r3, r1
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f8f7 	bl	8001204 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001016:	4b58      	ldr	r3, [pc, #352]	@ (8001178 <FND_DispDataCallBack+0x208>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f8b8 	bl	8001190 <FND_DispOn>
		break;
 8001020:	e0a7      	b.n	8001172 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffALL();
 8001022:	f000 f8cd 	bl	80011c0 <FND_DispOffALL>
		FND_DispDigit((fndDispNum /100)%10);
 8001026:	4b55      	ldr	r3, [pc, #340]	@ (800117c <FND_DispDataCallBack+0x20c>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	4a56      	ldr	r2, [pc, #344]	@ (8001184 <FND_DispDataCallBack+0x214>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	095b      	lsrs	r3, r3, #5
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b52      	ldr	r3, [pc, #328]	@ (8001180 <FND_DispDataCallBack+0x210>)
 8001036:	fba3 1302 	umull	r1, r3, r3, r2
 800103a:	08d9      	lsrs	r1, r3, #3
 800103c:	460b      	mov	r3, r1
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	b29b      	uxth	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f8db 	bl	8001204 <FND_DispDigit>
		FND_DispOn(digitPos);
 800104e:	4b4a      	ldr	r3, [pc, #296]	@ (8001178 <FND_DispDataCallBack+0x208>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f89c 	bl	8001190 <FND_DispOn>
		break;
 8001058:	e08b      	b.n	8001172 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffALL();
 800105a:	f000 f8b1 	bl	80011c0 <FND_DispOffALL>
		FND_DispDigit((fndDispNum/1000)%10);
 800105e:	4b47      	ldr	r3, [pc, #284]	@ (800117c <FND_DispDataCallBack+0x20c>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	4a49      	ldr	r2, [pc, #292]	@ (8001188 <FND_DispDataCallBack+0x218>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	099b      	lsrs	r3, r3, #6
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b44      	ldr	r3, [pc, #272]	@ (8001180 <FND_DispDataCallBack+0x210>)
 800106e:	fba3 1302 	umull	r1, r3, r3, r2
 8001072:	08d9      	lsrs	r1, r3, #3
 8001074:	460b      	mov	r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f8bf 	bl	8001204 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001086:	4b3c      	ldr	r3, [pc, #240]	@ (8001178 <FND_DispDataCallBack+0x208>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f880 	bl	8001190 <FND_DispOn>
		break;
 8001090:	e06f      	b.n	8001172 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		FND_DispOffALL();
 8001092:	f000 f895 	bl	80011c0 <FND_DispOffALL>
		if (fndDispDp & (1<<0)) {
 8001096:	4b3d      	ldr	r3, [pc, #244]	@ (800118c <FND_DispDataCallBack+0x21c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 80010a2:	200a      	movs	r0, #10
 80010a4:	f000 f8ae 	bl	8001204 <FND_DispDigit>
 80010a8:	e002      	b.n	80010b0 <FND_DispDataCallBack+0x140>
		}else {
			FND_DispDigit(11);
 80010aa:	200b      	movs	r0, #11
 80010ac:	f000 f8aa 	bl	8001204 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80010b0:	4b31      	ldr	r3, [pc, #196]	@ (8001178 <FND_DispDataCallBack+0x208>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	425a      	negs	r2, r3
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	f002 0203 	and.w	r2, r2, #3
 80010be:	bf58      	it	pl
 80010c0:	4253      	negpl	r3, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f864 	bl	8001190 <FND_DispOn>
		break;
 80010c8:	e053      	b.n	8001172 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		FND_DispOffALL();
 80010ca:	f000 f879 	bl	80011c0 <FND_DispOffALL>
		if (fndDispDp & (1<<1)) {
 80010ce:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <FND_DispDataCallBack+0x21c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 80010da:	200a      	movs	r0, #10
 80010dc:	f000 f892 	bl	8001204 <FND_DispDigit>
 80010e0:	e002      	b.n	80010e8 <FND_DispDataCallBack+0x178>
		}else {
			FND_DispDigit(11);
 80010e2:	200b      	movs	r0, #11
 80010e4:	f000 f88e 	bl	8001204 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80010e8:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <FND_DispDataCallBack+0x208>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	425a      	negs	r2, r3
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	bf58      	it	pl
 80010f8:	4253      	negpl	r3, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f848 	bl	8001190 <FND_DispOn>
		break;
 8001100:	e037      	b.n	8001172 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		FND_DispOffALL();
 8001102:	f000 f85d 	bl	80011c0 <FND_DispOffALL>
		if (fndDispDp & (1<<2)) {
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <FND_DispDataCallBack+0x21c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 8001112:	200a      	movs	r0, #10
 8001114:	f000 f876 	bl	8001204 <FND_DispDigit>
 8001118:	e002      	b.n	8001120 <FND_DispDataCallBack+0x1b0>
		}else {
			FND_DispDigit(11);
 800111a:	200b      	movs	r0, #11
 800111c:	f000 f872 	bl	8001204 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <FND_DispDataCallBack+0x208>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	425a      	negs	r2, r3
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	bf58      	it	pl
 8001130:	4253      	negpl	r3, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f82c 	bl	8001190 <FND_DispOn>
		break;
 8001138:	e01b      	b.n	8001172 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		FND_DispOffALL();
 800113a:	f000 f841 	bl	80011c0 <FND_DispOffALL>
		if (fndDispDp & (1<<3)) {
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <FND_DispDataCallBack+0x21c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 800114a:	200a      	movs	r0, #10
 800114c:	f000 f85a 	bl	8001204 <FND_DispDigit>
 8001150:	e002      	b.n	8001158 <FND_DispDataCallBack+0x1e8>
		}else {
			FND_DispDigit(11);
 8001152:	200b      	movs	r0, #11
 8001154:	f000 f856 	bl	8001204 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <FND_DispDataCallBack+0x208>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	425a      	negs	r2, r3
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	bf58      	it	pl
 8001168:	4253      	negpl	r3, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f810 	bl	8001190 <FND_DispOn>
		break;
 8001170:	bf00      	nop
	}
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000458 	.word	0x20000458
 800117c:	20000456 	.word	0x20000456
 8001180:	cccccccd 	.word	0xcccccccd
 8001184:	51eb851f 	.word	0x51eb851f
 8001188:	10624dd3 	.word	0x10624dd3
 800118c:	20000454 	.word	0x20000454

08001190 <FND_DispOn>:
//   // GPIO_WritePin(GPIOx, PiNum, SET); - Cathode type(Anode type은 반대)
//   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
//}

void FND_DispOn(int fndPos)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	// GPIO_WritePin(GPIOx, PiNum, RESET); - Cathode type(Anode type은 반대)
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8001198:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <FND_DispOn+0x2c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80011a0:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <FND_DispOn+0x2c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	f000 fc96 	bl	8001ae0 <HAL_GPIO_WritePin>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000014 	.word	0x20000014

080011c0 <FND_DispOffALL>:

void FND_DispOffALL()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
	for(int i=0; i<4; i++){
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	e010      	b.n	80011ee <FND_DispOffALL+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 80011cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001200 <FND_DispOffALL+0x40>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <FND_DispOffALL+0x40>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2201      	movs	r2, #1
 80011e2:	4619      	mov	r1, r3
 80011e4:	f000 fc7c 	bl	8001ae0 <HAL_GPIO_WritePin>
	for(int i=0; i<4; i++){
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3301      	adds	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	ddeb      	ble.n	80011cc <FND_DispOffALL+0xc>
	}
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000014 	.word	0x20000014

08001204 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 800120e:	4a1f      	ldr	r2, [pc, #124]	@ (800128c <FND_DispDigit+0x88>)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	ca07      	ldmia	r2, {r0, r1, r2}
 8001216:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x7F, // 8
			0x6F,  // 9
			0x80, //dp => 10000000
			0x00 // dp => 00000000
	};
	for(int i=0; i<8; i++){
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e02c      	b.n	800127a <FND_DispDigit+0x76>
		if(!(segFont[digit] & (1<<i))){
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	3318      	adds	r3, #24
 8001224:	443b      	add	r3, r7
 8001226:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800122a:	461a      	mov	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa42 f303 	asr.w	r3, r2, r3
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10e      	bne.n	8001258 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);    // data = 0 -> offCathode type(Anode type은 반대)
 800123a:	4a15      	ldr	r2, [pc, #84]	@ (8001290 <FND_DispDigit+0x8c>)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001242:	4a13      	ldr	r2, [pc, #76]	@ (8001290 <FND_DispDigit+0x8c>)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	b29b      	uxth	r3, r3
 800124e:	2200      	movs	r2, #0
 8001250:	4619      	mov	r1, r3
 8001252:	f000 fc45 	bl	8001ae0 <HAL_GPIO_WritePin>
 8001256:	e00d      	b.n	8001274 <FND_DispDigit+0x70>
		}
		else{
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);      // data = 1 -> onCathode type(Anode type은 반대)
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <FND_DispDigit+0x8c>)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001260:	4a0b      	ldr	r2, [pc, #44]	@ (8001290 <FND_DispDigit+0x8c>)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	b29b      	uxth	r3, r3
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	f000 fc36 	bl	8001ae0 <HAL_GPIO_WritePin>
	for(int i=0; i<8; i++){
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b07      	cmp	r3, #7
 800127e:	ddcf      	ble.n	8001220 <FND_DispDigit+0x1c>
		}
	}
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	08005a84 	.word	0x08005a84
 8001290:	20000034 	.word	0x20000034

08001294 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
   hLcdI2C = hI2C;
 800129c:	4a18      	ldr	r2, [pc, #96]	@ (8001300 <LCD_Init+0x6c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
   HAL_Delay(50);
 80012a2:	2032      	movs	r0, #50	@ 0x32
 80012a4:	f000 f900 	bl	80014a8 <HAL_Delay>
   LCD_cmdMode();
 80012a8:	f000 f850 	bl	800134c <LCD_cmdMode>
   LCD_writeMode();
 80012ac:	f000 f860 	bl	8001370 <LCD_writeMode>
   LCD_sendNibbleData(0x30);
 80012b0:	2030      	movs	r0, #48	@ 0x30
 80012b2:	f000 f893 	bl	80013dc <LCD_sendNibbleData>
   HAL_Delay(5); // wait over 4.1ms
 80012b6:	2005      	movs	r0, #5
 80012b8:	f000 f8f6 	bl	80014a8 <HAL_Delay>
   LCD_sendNibbleData(0x30);
 80012bc:	2030      	movs	r0, #48	@ 0x30
 80012be:	f000 f88d 	bl	80013dc <LCD_sendNibbleData>
   HAL_Delay(1); // wait over 100us
 80012c2:	2001      	movs	r0, #1
 80012c4:	f000 f8f0 	bl	80014a8 <HAL_Delay>
   LCD_sendNibbleData(0x30);
 80012c8:	2030      	movs	r0, #48	@ 0x30
 80012ca:	f000 f887 	bl	80013dc <LCD_sendNibbleData>
   LCD_sendNibbleData(0x20);
 80012ce:	2020      	movs	r0, #32
 80012d0:	f000 f884 	bl	80013dc <LCD_sendNibbleData>
   LCD_sendData(LCD_4BIT_FUNC_SET);
 80012d4:	2028      	movs	r0, #40	@ 0x28
 80012d6:	f000 f8a5 	bl	8001424 <LCD_sendData>
   LCD_sendData(LCD_DISP_OFF);
 80012da:	2008      	movs	r0, #8
 80012dc:	f000 f8a2 	bl	8001424 <LCD_sendData>
   LCD_sendData(LCD_DISP_CLEAR);
 80012e0:	2001      	movs	r0, #1
 80012e2:	f000 f89f 	bl	8001424 <LCD_sendData>
   LCD_sendData(LCD_ENTRY_MODE_SET);
 80012e6:	2006      	movs	r0, #6
 80012e8:	f000 f89c 	bl	8001424 <LCD_sendData>
   LCD_sendData(LCD_DISP_ON);
 80012ec:	200c      	movs	r0, #12
 80012ee:	f000 f899 	bl	8001424 <LCD_sendData>
   LCD_backLightOn();
 80012f2:	f000 f81b 	bl	800132c <LCD_backLightOn>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000460 	.word	0x20000460

08001304 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
   HAL_I2C_Master_Transmit(hLcdI2C, (LCD_DEV_ADDR<<1), &data, 1, 10);
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <LCD_sendI2C+0x24>)
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	1dfa      	adds	r2, r7, #7
 8001314:	230a      	movs	r3, #10
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	214e      	movs	r1, #78	@ 0x4e
 800131c:	f000 fd3e 	bl	8001d9c <HAL_I2C_Master_Transmit>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000460 	.word	0x20000460

0800132c <LCD_backLightOn>:

void LCD_backLightOn()
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
   lcdData |= (1<<LCD_BL);
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <LCD_backLightOn+0x1c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <LCD_backLightOn+0x1c>)
 800133c:	701a      	strb	r2, [r3, #0]
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	2000045c 	.word	0x2000045c

0800134c <LCD_cmdMode>:
{
   lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
   lcdData &= ~(1<<LCD_RS);
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <LCD_cmdMode+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b04      	ldr	r3, [pc, #16]	@ (800136c <LCD_cmdMode+0x20>)
 800135c:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 800135e:	4b03      	ldr	r3, [pc, #12]	@ (800136c <LCD_cmdMode+0x20>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ffce 	bl	8001304 <LCD_sendI2C>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000045c 	.word	0x2000045c

08001370 <LCD_writeMode>:
   lcdData |= (1<<LCD_RS);
   LCD_sendI2C(lcdData);
}

void LCD_writeMode()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
   lcdData &= ~(1<<LCD_RW);
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <LCD_writeMode+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	f023 0302 	bic.w	r3, r3, #2
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <LCD_writeMode+0x20>)
 8001380:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 8001382:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <LCD_writeMode+0x20>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ffbc 	bl	8001304 <LCD_sendI2C>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000045c 	.word	0x2000045c

08001394 <LCD_E_High>:

void LCD_E_High()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
   lcdData |= (1<<LCD_E);
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <LCD_E_High+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <LCD_E_High+0x20>)
 80013a4:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 80013a6:	4b03      	ldr	r3, [pc, #12]	@ (80013b4 <LCD_E_High+0x20>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ffaa 	bl	8001304 <LCD_sendI2C>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000045c 	.word	0x2000045c

080013b8 <LCD_E_Low>:

void LCD_E_Low()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
   lcdData &= ~(1<<LCD_E);
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <LCD_E_Low+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <LCD_E_Low+0x20>)
 80013c8:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 80013ca:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <LCD_E_Low+0x20>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff98 	bl	8001304 <LCD_sendI2C>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000045c 	.word	0x2000045c

080013dc <LCD_sendNibbleData>:

// Nibble -> 4bit data를 전송
void LCD_sendNibbleData(uint8_t data)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
   LCD_E_High();
 80013e6:	f7ff ffd5 	bl	8001394 <LCD_E_High>
   lcdData = (data & 0xf0) | (lcdData & 0x0f);
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	f023 030f 	bic.w	r3, r3, #15
 80013f2:	b25a      	sxtb	r2, r3
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <LCD_sendNibbleData+0x44>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b25b      	sxtb	r3, r3
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <LCD_sendNibbleData+0x44>)
 8001408:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 800140a:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <LCD_sendNibbleData+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff78 	bl	8001304 <LCD_sendI2C>
   LCD_E_Low();
 8001414:	f7ff ffd0 	bl	80013b8 <LCD_E_Low>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000045c 	.word	0x2000045c

08001424 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
   // High 4bit
   LCD_sendNibbleData(data);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ffd3 	bl	80013dc <LCD_sendNibbleData>

   data = data << 4;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	71fb      	strb	r3, [r7, #7]
   // Low 4bit
   LCD_sendNibbleData(data);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ffcc 	bl	80013dc <LCD_sendNibbleData>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001450:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <HAL_Init+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <HAL_Init+0x40>)
 8001456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800145a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800145c:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <HAL_Init+0x40>)
 8001462:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a07      	ldr	r2, [pc, #28]	@ (800148c <HAL_Init+0x40>)
 800146e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001474:	2003      	movs	r0, #3
 8001476:	f000 f8e8 	bl	800164a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147a:	200f      	movs	r0, #15
 800147c:	f7ff fab2 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001480:	f7ff fa84 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023c00 	.word	0x40023c00

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000464 	.word	0x20000464

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000078 	.word	0x20000078

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	@ (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	@ (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	@ (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	@ 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	@ 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff4c 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001672:	f7ff ff61 	bl	8001538 <__NVIC_GetPriorityGrouping>
 8001676:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7ff ffb1 	bl	80015e4 <NVIC_EncodePriority>
 8001682:	4602      	mov	r2, r0
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff80 	bl	8001590 <__NVIC_SetPriority>
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff54 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016c2:	f7ff fee5 	bl	8001490 <HAL_GetTick>
 80016c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d008      	beq.n	80016e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e052      	b.n	800178c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0216 	bic.w	r2, r2, #22
 80016f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001704:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <HAL_DMA_Abort+0x62>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0208 	bic.w	r2, r2, #8
 8001724:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001736:	e013      	b.n	8001760 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001738:	f7ff feaa 	bl	8001490 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b05      	cmp	r3, #5
 8001744:	d90c      	bls.n	8001760 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2203      	movs	r2, #3
 8001750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e015      	b.n	800178c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1e4      	bne.n	8001738 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	223f      	movs	r2, #63	@ 0x3f
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d004      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2280      	movs	r2, #128	@ 0x80
 80017ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00c      	b.n	80017cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2205      	movs	r2, #5
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0201 	bic.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	@ 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e159      	b.n	8001aa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8148 	bne.w	8001aa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	2b02      	cmp	r3, #2
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d017      	beq.n	80018c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a2 	beq.w	8001aa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b57      	ldr	r3, [pc, #348]	@ (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a56      	ldr	r2, [pc, #344]	@ (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b54      	ldr	r3, [pc, #336]	@ (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <HAL_GPIO_Init+0x2ec>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a49      	ldr	r2, [pc, #292]	@ (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x202>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a48      	ldr	r2, [pc, #288]	@ (8001acc <HAL_GPIO_Init+0x2f4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x1fe>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a47      	ldr	r2, [pc, #284]	@ (8001ad0 <HAL_GPIO_Init+0x2f8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a46      	ldr	r2, [pc, #280]	@ (8001ad4 <HAL_GPIO_Init+0x2fc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x1f6>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a45      	ldr	r2, [pc, #276]	@ (8001ad8 <HAL_GPIO_Init+0x300>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x1f2>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019ca:	2307      	movs	r3, #7
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4935      	ldr	r1, [pc, #212]	@ (8001ac4 <HAL_GPIO_Init+0x2ec>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fa:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <HAL_GPIO_Init+0x304>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a24:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a48:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a72:	4a1a      	ldr	r2, [pc, #104]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f aea2 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40013c00 	.word	0x40013c00

08001ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	807b      	strh	r3, [r7, #2]
 8001aec:	4613      	mov	r3, r2
 8001aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af0:	787b      	ldrb	r3, [r7, #1]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001afc:	e003      	b.n	8001b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	041a      	lsls	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	619a      	str	r2, [r3, #24]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e12b      	b.n	8001d7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7fe fe58 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2224      	movs	r2, #36	@ 0x24
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b78:	f001 f8da 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8001b7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a81      	ldr	r2, [pc, #516]	@ (8001d88 <HAL_I2C_Init+0x274>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d807      	bhi.n	8001b98 <HAL_I2C_Init+0x84>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a80      	ldr	r2, [pc, #512]	@ (8001d8c <HAL_I2C_Init+0x278>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	bf94      	ite	ls
 8001b90:	2301      	movls	r3, #1
 8001b92:	2300      	movhi	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e006      	b.n	8001ba6 <HAL_I2C_Init+0x92>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d90 <HAL_I2C_Init+0x27c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	bf94      	ite	ls
 8001ba0:	2301      	movls	r3, #1
 8001ba2:	2300      	movhi	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0e7      	b.n	8001d7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4a78      	ldr	r2, [pc, #480]	@ (8001d94 <HAL_I2C_Init+0x280>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0c9b      	lsrs	r3, r3, #18
 8001bb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8001d88 <HAL_I2C_Init+0x274>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d802      	bhi.n	8001be8 <HAL_I2C_Init+0xd4>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	3301      	adds	r3, #1
 8001be6:	e009      	b.n	8001bfc <HAL_I2C_Init+0xe8>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	4a69      	ldr	r2, [pc, #420]	@ (8001d98 <HAL_I2C_Init+0x284>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	099b      	lsrs	r3, r3, #6
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	495c      	ldr	r1, [pc, #368]	@ (8001d88 <HAL_I2C_Init+0x274>)
 8001c18:	428b      	cmp	r3, r1
 8001c1a:	d819      	bhi.n	8001c50 <HAL_I2C_Init+0x13c>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1e59      	subs	r1, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c2a:	1c59      	adds	r1, r3, #1
 8001c2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c30:	400b      	ands	r3, r1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <HAL_I2C_Init+0x138>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1e59      	subs	r1, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c44:	3301      	adds	r3, #1
 8001c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4a:	e051      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	e04f      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d111      	bne.n	8001c7c <HAL_I2C_Init+0x168>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1e58      	subs	r0, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	440b      	add	r3, r1
 8001c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e012      	b.n	8001ca2 <HAL_I2C_Init+0x18e>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	0099      	lsls	r1, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Init+0x196>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e022      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_I2C_Init+0x1bc>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1e58      	subs	r0, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	440b      	add	r3, r1
 8001cc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cce:	e00f      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e58      	subs	r0, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	0099      	lsls	r1, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	6809      	ldr	r1, [r1, #0]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6911      	ldr	r1, [r2, #16]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68d2      	ldr	r2, [r2, #12]
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	000186a0 	.word	0x000186a0
 8001d8c:	001e847f 	.word	0x001e847f
 8001d90:	003d08ff 	.word	0x003d08ff
 8001d94:	431bde83 	.word	0x431bde83
 8001d98:	10624dd3 	.word	0x10624dd3

08001d9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	461a      	mov	r2, r3
 8001da8:	460b      	mov	r3, r1
 8001daa:	817b      	strh	r3, [r7, #10]
 8001dac:	4613      	mov	r3, r2
 8001dae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7ff fb6e 	bl	8001490 <HAL_GetTick>
 8001db4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	f040 80e0 	bne.w	8001f84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2319      	movs	r3, #25
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4970      	ldr	r1, [pc, #448]	@ (8001f90 <HAL_I2C_Master_Transmit+0x1f4>)
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f964 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e0d3      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_I2C_Master_Transmit+0x50>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0cc      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d007      	beq.n	8001e12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2221      	movs	r2, #33	@ 0x21
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	893a      	ldrh	r2, [r7, #8]
 8001e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a50      	ldr	r2, [pc, #320]	@ (8001f94 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e54:	8979      	ldrh	r1, [r7, #10]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	6a3a      	ldr	r2, [r7, #32]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f89c 	bl	8001f98 <I2C_MasterRequestWrite>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e08d      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e80:	e066      	b.n	8001f50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	6a39      	ldr	r1, [r7, #32]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fa22 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00d      	beq.n	8001eae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d107      	bne.n	8001eaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06b      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d11b      	bne.n	8001f24 <HAL_I2C_Master_Transmit+0x188>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d017      	beq.n	8001f24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	6a39      	ldr	r1, [r7, #32]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 fa19 	bl	8002360 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d107      	bne.n	8001f4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e01a      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d194      	bne.n	8001e82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e000      	b.n	8001f86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	00100002 	.word	0x00100002
 8001f94:	ffff0000 	.word	0xffff0000

08001f98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d006      	beq.n	8001fc2 <I2C_MasterRequestWrite+0x2a>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d003      	beq.n	8001fc2 <I2C_MasterRequestWrite+0x2a>
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fc0:	d108      	bne.n	8001fd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e00b      	b.n	8001fec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	2b12      	cmp	r3, #18
 8001fda:	d107      	bne.n	8001fec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f84f 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00d      	beq.n	8002020 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002012:	d103      	bne.n	800201c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e035      	b.n	800208c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002028:	d108      	bne.n	800203c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800202a:	897b      	ldrh	r3, [r7, #10]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002038:	611a      	str	r2, [r3, #16]
 800203a:	e01b      	b.n	8002074 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800203c:	897b      	ldrh	r3, [r7, #10]
 800203e:	11db      	asrs	r3, r3, #7
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f003 0306 	and.w	r3, r3, #6
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f063 030f 	orn	r3, r3, #15
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	490e      	ldr	r1, [pc, #56]	@ (8002094 <I2C_MasterRequestWrite+0xfc>)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f898 	bl	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e010      	b.n	800208c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800206a:	897b      	ldrh	r3, [r7, #10]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4907      	ldr	r1, [pc, #28]	@ (8002098 <I2C_MasterRequestWrite+0x100>)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f888 	bl	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	00010008 	.word	0x00010008
 8002098:	00010002 	.word	0x00010002

0800209c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ac:	e048      	b.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d044      	beq.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b6:	f7ff f9eb 	bl	8001490 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d302      	bcc.n	80020cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d139      	bne.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10d      	bne.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	43da      	mvns	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4013      	ands	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	e00c      	b.n	800210c <I2C_WaitOnFlagUntilTimeout+0x70>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	429a      	cmp	r2, r3
 8002110:	d116      	bne.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e023      	b.n	8002188 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	0c1b      	lsrs	r3, r3, #16
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10d      	bne.n	8002166 <I2C_WaitOnFlagUntilTimeout+0xca>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	43da      	mvns	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4013      	ands	r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	e00c      	b.n	8002180 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	43da      	mvns	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4013      	ands	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	429a      	cmp	r2, r3
 8002184:	d093      	beq.n	80020ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800219e:	e071      	b.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ae:	d123      	bne.n	80021f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f043 0204 	orr.w	r2, r3, #4
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e067      	b.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fe:	d041      	beq.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002200:	f7ff f946 	bl	8001490 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	429a      	cmp	r2, r3
 800220e:	d302      	bcc.n	8002216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d136      	bne.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10c      	bne.n	800223a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4013      	ands	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	e00b      	b.n	8002252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	43da      	mvns	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4013      	ands	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	f043 0220 	orr.w	r2, r3, #32
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e021      	b.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	0c1b      	lsrs	r3, r3, #16
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d10c      	bne.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	43da      	mvns	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e00b      	b.n	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4013      	ands	r3, r2
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bf14      	ite	ne
 80022ba:	2301      	movne	r3, #1
 80022bc:	2300      	moveq	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f47f af6d 	bne.w	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022dc:	e034      	b.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f886 	bl	80023f0 <I2C_IsAcknowledgeFailed>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e034      	b.n	8002358 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d028      	beq.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f6:	f7ff f8cb 	bl	8001490 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	429a      	cmp	r2, r3
 8002304:	d302      	bcc.n	800230c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11d      	bne.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002316:	2b80      	cmp	r3, #128	@ 0x80
 8002318:	d016      	beq.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e007      	b.n	8002358 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002352:	2b80      	cmp	r3, #128	@ 0x80
 8002354:	d1c3      	bne.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800236c:	e034      	b.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f83e 	bl	80023f0 <I2C_IsAcknowledgeFailed>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e034      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d028      	beq.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7ff f883 	bl	8001490 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11d      	bne.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d016      	beq.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e007      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d1c3      	bne.n	800236e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002406:	d11b      	bne.n	8002440 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002410:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e267      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d075      	beq.n	800255a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800246e:	4b88      	ldr	r3, [pc, #544]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b04      	cmp	r3, #4
 8002478:	d00c      	beq.n	8002494 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4b85      	ldr	r3, [pc, #532]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002482:	2b08      	cmp	r3, #8
 8002484:	d112      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002486:	4b82      	ldr	r3, [pc, #520]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002492:	d10b      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	4b7e      	ldr	r3, [pc, #504]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d05b      	beq.n	8002558 <HAL_RCC_OscConfig+0x108>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d157      	bne.n	8002558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e242      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b4:	d106      	bne.n	80024c4 <HAL_RCC_OscConfig+0x74>
 80024b6:	4b76      	ldr	r3, [pc, #472]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a75      	ldr	r2, [pc, #468]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x98>
 80024ce:	4b70      	ldr	r3, [pc, #448]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6f      	ldr	r2, [pc, #444]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b6d      	ldr	r3, [pc, #436]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6c      	ldr	r2, [pc, #432]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024e8:	4b69      	ldr	r3, [pc, #420]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a68      	ldr	r2, [pc, #416]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b66      	ldr	r3, [pc, #408]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a65      	ldr	r2, [pc, #404]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe ffc2 	bl	8001490 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe ffbe 	bl	8001490 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e207      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b5b      	ldr	r3, [pc, #364]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xc0>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe ffae 	bl	8001490 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe ffaa 	bl	8001490 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	@ 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1f3      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	4b51      	ldr	r3, [pc, #324]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0xe8>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d063      	beq.n	800262e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002566:	4b4a      	ldr	r3, [pc, #296]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800257a:	2b08      	cmp	r3, #8
 800257c:	d11c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b44      	ldr	r3, [pc, #272]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d116      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1c7      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4937      	ldr	r1, [pc, #220]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	e03a      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c0:	4b34      	ldr	r3, [pc, #208]	@ (8002694 <HAL_RCC_OscConfig+0x244>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7fe ff63 	bl	8001490 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ce:	f7fe ff5f 	bl	8001490 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1a8      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4925      	ldr	r1, [pc, #148]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <HAL_RCC_OscConfig+0x244>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe ff42 	bl	8001490 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002610:	f7fe ff3e 	bl	8001490 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e187      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d036      	beq.n	80026a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_RCC_OscConfig+0x248>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe ff22 	bl	8001490 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002650:	f7fe ff1e 	bl	8001490 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e167      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x200>
 800266e:	e01b      	b.n	80026a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_RCC_OscConfig+0x248>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7fe ff0b 	bl	8001490 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	e00e      	b.n	800269c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267e:	f7fe ff07 	bl	8001490 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d907      	bls.n	800269c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e150      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
 8002690:	40023800 	.word	0x40023800
 8002694:	42470000 	.word	0x42470000
 8002698:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	4b88      	ldr	r3, [pc, #544]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800269e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ea      	bne.n	800267e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8097 	beq.w	80027e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b81      	ldr	r3, [pc, #516]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	4b7d      	ldr	r3, [pc, #500]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	4a7c      	ldr	r2, [pc, #496]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d6:	4b7a      	ldr	r3, [pc, #488]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b77      	ldr	r3, [pc, #476]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d118      	bne.n	8002724 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f2:	4b74      	ldr	r3, [pc, #464]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a73      	ldr	r2, [pc, #460]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fe:	f7fe fec7 	bl	8001490 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002706:	f7fe fec3 	bl	8001490 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e10c      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4b6a      	ldr	r3, [pc, #424]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x2ea>
 800272c:	4b64      	ldr	r3, [pc, #400]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a63      	ldr	r2, [pc, #396]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x324>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x30c>
 8002742:	4b5f      	ldr	r3, [pc, #380]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002746:	4a5e      	ldr	r2, [pc, #376]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6713      	str	r3, [r2, #112]	@ 0x70
 800274e:	4b5c      	ldr	r3, [pc, #368]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	4a5b      	ldr	r2, [pc, #364]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6713      	str	r3, [r2, #112]	@ 0x70
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0x324>
 800275c:	4b58      	ldr	r3, [pc, #352]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002760:	4a57      	ldr	r2, [pc, #348]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	@ 0x70
 8002768:	4b55      	ldr	r3, [pc, #340]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276c:	4a54      	ldr	r2, [pc, #336]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800276e:	f023 0304 	bic.w	r3, r3, #4
 8002772:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d015      	beq.n	80027a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe fe88 	bl	8001490 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe fe84 	bl	8001490 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0cb      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ee      	beq.n	8002784 <HAL_RCC_OscConfig+0x334>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7fe fe72 	bl	8001490 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe fe6e 	bl	8001490 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0b5      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c6:	4b3e      	ldr	r3, [pc, #248]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ee      	bne.n	80027b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d8:	4b39      	ldr	r3, [pc, #228]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	4a38      	ldr	r2, [pc, #224]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a1 	beq.w	8002930 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d05c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d141      	bne.n	8002886 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002802:	4b31      	ldr	r3, [pc, #196]	@ (80028c8 <HAL_RCC_OscConfig+0x478>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe fe42 	bl	8001490 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe fe3e 	bl	8001490 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e087      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	4b27      	ldr	r3, [pc, #156]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	3b01      	subs	r3, #1
 8002848:	041b      	lsls	r3, r3, #16
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	491b      	ldr	r1, [pc, #108]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_RCC_OscConfig+0x478>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe fe17 	bl	8001490 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fe13 	bl	8001490 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e05c      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x416>
 8002884:	e054      	b.n	8002930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <HAL_RCC_OscConfig+0x478>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fe00 	bl	8001490 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fdfc 	bl	8001490 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e045      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x444>
 80028b2:	e03d      	b.n	8002930 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e038      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000
 80028c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_RCC_OscConfig+0x4ec>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d028      	beq.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d121      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d11a      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002904:	4293      	cmp	r3, r2
 8002906:	d111      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d107      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0cc      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b68      	ldr	r3, [pc, #416]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d90c      	bls.n	800297c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b65      	ldr	r3, [pc, #404]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b63      	ldr	r3, [pc, #396]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0b8      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d020      	beq.n	80029ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b59      	ldr	r3, [pc, #356]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a58      	ldr	r2, [pc, #352]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800299e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ac:	4b53      	ldr	r3, [pc, #332]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a52      	ldr	r2, [pc, #328]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b50      	ldr	r3, [pc, #320]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	494d      	ldr	r1, [pc, #308]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d044      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d119      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d003      	beq.n	80029fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fe:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e06f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e067      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1e:	4b37      	ldr	r3, [pc, #220]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4934      	ldr	r1, [pc, #208]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a30:	f7fe fd2e 	bl	8001490 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7fe fd2a 	bl	8001490 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e04f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 020c 	and.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d1eb      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d20c      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b22      	ldr	r3, [pc, #136]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e032      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4916      	ldr	r1, [pc, #88]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	490e      	ldr	r1, [pc, #56]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ac6:	f000 f821 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490a      	ldr	r1, [pc, #40]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a09      	ldr	r2, [pc, #36]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd ff7c 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08005a98 	.word	0x08005a98
 8002b04:	20000000 	.word	0x20000000
 8002b08:	20000074 	.word	0x20000074

08002b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b10:	b094      	sub	sp, #80	@ 0x50
 8002b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b24:	4b79      	ldr	r3, [pc, #484]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x40>
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	f200 80e1 	bhi.w	8002cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3e:	e0db      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b73      	ldr	r3, [pc, #460]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b44:	e0db      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b46:	4b73      	ldr	r3, [pc, #460]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b4a:	e0d8      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b56:	4b6d      	ldr	r3, [pc, #436]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d063      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b62:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	2200      	movs	r2, #0
 8002b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b76:	2300      	movs	r3, #0
 8002b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b7e:	4622      	mov	r2, r4
 8002b80:	462b      	mov	r3, r5
 8002b82:	f04f 0000 	mov.w	r0, #0
 8002b86:	f04f 0100 	mov.w	r1, #0
 8002b8a:	0159      	lsls	r1, r3, #5
 8002b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b90:	0150      	lsls	r0, r2, #5
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4621      	mov	r1, r4
 8002b98:	1a51      	subs	r1, r2, r1
 8002b9a:	6139      	str	r1, [r7, #16]
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb0:	4659      	mov	r1, fp
 8002bb2:	018b      	lsls	r3, r1, #6
 8002bb4:	4651      	mov	r1, sl
 8002bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bba:	4651      	mov	r1, sl
 8002bbc:	018a      	lsls	r2, r1, #6
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bc4:	4659      	mov	r1, fp
 8002bc6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bde:	4690      	mov	r8, r2
 8002be0:	4699      	mov	r9, r3
 8002be2:	4623      	mov	r3, r4
 8002be4:	eb18 0303 	adds.w	r3, r8, r3
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	462b      	mov	r3, r5
 8002bec:	eb49 0303 	adc.w	r3, r9, r3
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bfe:	4629      	mov	r1, r5
 8002c00:	024b      	lsls	r3, r1, #9
 8002c02:	4621      	mov	r1, r4
 8002c04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c08:	4621      	mov	r1, r4
 8002c0a:	024a      	lsls	r2, r1, #9
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c12:	2200      	movs	r2, #0
 8002c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c1c:	f7fd fae0 	bl	80001e0 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c28:	e058      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2a:	4b38      	ldr	r3, [pc, #224]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	099b      	lsrs	r3, r3, #6
 8002c30:	2200      	movs	r2, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	4611      	mov	r1, r2
 8002c36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c3a:	623b      	str	r3, [r7, #32]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c44:	4642      	mov	r2, r8
 8002c46:	464b      	mov	r3, r9
 8002c48:	f04f 0000 	mov.w	r0, #0
 8002c4c:	f04f 0100 	mov.w	r1, #0
 8002c50:	0159      	lsls	r1, r3, #5
 8002c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c56:	0150      	lsls	r0, r2, #5
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c62:	4649      	mov	r1, r9
 8002c64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c80:	eb63 050b 	sbc.w	r5, r3, fp
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	00eb      	lsls	r3, r5, #3
 8002c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c92:	00e2      	lsls	r2, r4, #3
 8002c94:	4614      	mov	r4, r2
 8002c96:	461d      	mov	r5, r3
 8002c98:	4643      	mov	r3, r8
 8002c9a:	18e3      	adds	r3, r4, r3
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	eb45 0303 	adc.w	r3, r5, r3
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	028b      	lsls	r3, r1, #10
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	028a      	lsls	r2, r1, #10
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	61fa      	str	r2, [r7, #28]
 8002ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd0:	f7fd fa86 	bl	80001e0 <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3750      	adds	r7, #80	@ 0x50
 8002d04:	46bd      	mov	sp, r7
 8002d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	@ (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000000 	.word	0x20000000

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0a9b      	lsrs	r3, r3, #10
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	@ (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	08005aa8 	.word	0x08005aa8

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d5c:	f7ff ffdc 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0b5b      	lsrs	r3, r3, #13
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	@ (8002d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	08005aa8 	.word	0x08005aa8

08002d80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d90:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0203 	and.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002da8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002db4:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	08db      	lsrs	r3, r3, #3
 8002dba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dc2:	4b07      	ldr	r3, [pc, #28]	@ (8002de0 <HAL_RCC_GetClockConfig+0x60>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0207 	and.w	r2, r3, #7
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e041      	b.n	8002e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd fef4 	bl	8000bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f000 fa70 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d001      	beq.n	8002e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e044      	b.n	8002f26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f34 <HAL_TIM_Base_Start_IT+0xb0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec6:	d013      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8002f38 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a19      	ldr	r2, [pc, #100]	@ (8002f3c <HAL_TIM_Base_Start_IT+0xb8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a17      	ldr	r2, [pc, #92]	@ (8002f40 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a16      	ldr	r2, [pc, #88]	@ (8002f44 <HAL_TIM_Base_Start_IT+0xc0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d111      	bne.n	8002f14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d010      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0201 	orr.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f12:	e007      	b.n	8002f24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40000c00 	.word	0x40000c00
 8002f44:	40014000 	.word	0x40014000

08002f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0202 	mvn.w	r2, #2
 8002f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f999 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f98b 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f99c 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d020      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0204 	mvn.w	r2, #4
 8002fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f973 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f965 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f976 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0208 	mvn.w	r2, #8
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2204      	movs	r2, #4
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f94d 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f93f 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f950 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d020      	beq.n	8003090 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0210 	mvn.w	r2, #16
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2208      	movs	r2, #8
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f927 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f919 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f92a 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0201 	mvn.w	r2, #1
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fe98 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fab0 	bl	8003638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8fb 	bl	80032f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00c      	beq.n	8003120 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0220 	mvn.w	r2, #32
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa82 	bl	8003624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIM_ConfigClockSource+0x1c>
 8003140:	2302      	movs	r3, #2
 8003142:	e0b4      	b.n	80032ae <HAL_TIM_ConfigClockSource+0x186>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800316a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800317c:	d03e      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0xd4>
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003182:	f200 8087 	bhi.w	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318a:	f000 8086 	beq.w	800329a <HAL_TIM_ConfigClockSource+0x172>
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003192:	d87f      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b70      	cmp	r3, #112	@ 0x70
 8003196:	d01a      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0xa6>
 8003198:	2b70      	cmp	r3, #112	@ 0x70
 800319a:	d87b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b60      	cmp	r3, #96	@ 0x60
 800319e:	d050      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x11a>
 80031a0:	2b60      	cmp	r3, #96	@ 0x60
 80031a2:	d877      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b50      	cmp	r3, #80	@ 0x50
 80031a6:	d03c      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0xfa>
 80031a8:	2b50      	cmp	r3, #80	@ 0x50
 80031aa:	d873      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b40      	cmp	r3, #64	@ 0x40
 80031ae:	d058      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x13a>
 80031b0:	2b40      	cmp	r3, #64	@ 0x40
 80031b2:	d86f      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b30      	cmp	r3, #48	@ 0x30
 80031b6:	d064      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031b8:	2b30      	cmp	r3, #48	@ 0x30
 80031ba:	d86b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d060      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d867      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d05c      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d05a      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031cc:	e062      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031de:	f000 f993 	bl	8003508 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	609a      	str	r2, [r3, #8]
      break;
 80031fa:	e04f      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800320c:	f000 f97c 	bl	8003508 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800321e:	609a      	str	r2, [r3, #8]
      break;
 8003220:	e03c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322e:	461a      	mov	r2, r3
 8003230:	f000 f8f0 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2150      	movs	r1, #80	@ 0x50
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f949 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8003240:	e02c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800324e:	461a      	mov	r2, r3
 8003250:	f000 f90f 	bl	8003472 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2160      	movs	r1, #96	@ 0x60
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f939 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8003260:	e01c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	461a      	mov	r2, r3
 8003270:	f000 f8d0 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2140      	movs	r1, #64	@ 0x40
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f929 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8003280:	e00c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f000 f920 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8003292:	e003      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e000      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800329a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a37      	ldr	r2, [pc, #220]	@ (80033f8 <TIM_Base_SetConfig+0xf0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a34      	ldr	r2, [pc, #208]	@ (80033fc <TIM_Base_SetConfig+0xf4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a33      	ldr	r2, [pc, #204]	@ (8003400 <TIM_Base_SetConfig+0xf8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a32      	ldr	r2, [pc, #200]	@ (8003404 <TIM_Base_SetConfig+0xfc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d108      	bne.n	8003352 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a28      	ldr	r2, [pc, #160]	@ (80033f8 <TIM_Base_SetConfig+0xf0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01b      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003360:	d017      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a25      	ldr	r2, [pc, #148]	@ (80033fc <TIM_Base_SetConfig+0xf4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a24      	ldr	r2, [pc, #144]	@ (8003400 <TIM_Base_SetConfig+0xf8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a23      	ldr	r2, [pc, #140]	@ (8003404 <TIM_Base_SetConfig+0xfc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a22      	ldr	r2, [pc, #136]	@ (8003408 <TIM_Base_SetConfig+0x100>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a21      	ldr	r2, [pc, #132]	@ (800340c <TIM_Base_SetConfig+0x104>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a20      	ldr	r2, [pc, #128]	@ (8003410 <TIM_Base_SetConfig+0x108>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a0c      	ldr	r2, [pc, #48]	@ (80033f8 <TIM_Base_SetConfig+0xf0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d103      	bne.n	80033d2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f043 0204 	orr.w	r2, r3, #4
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40014000 	.word	0x40014000
 800340c:	40014400 	.word	0x40014400
 8003410:	40014800 	.word	0x40014800

08003414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0201 	bic.w	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800343e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 030a 	bic.w	r3, r3, #10
 8003450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003472:	b480      	push	{r7}
 8003474:	b087      	sub	sp, #28
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f023 0210 	bic.w	r2, r3, #16
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800349c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	031b      	lsls	r3, r3, #12
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f043 0307 	orr.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	021a      	lsls	r2, r3, #8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	431a      	orrs	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800355c:	2302      	movs	r3, #2
 800355e:	e050      	b.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	@ (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ac:	d013      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a18      	ldr	r2, [pc, #96]	@ (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a15      	ldr	r2, [pc, #84]	@ (800361c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a13      	ldr	r2, [pc, #76]	@ (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10c      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40014000 	.word	0x40014000

08003624 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e042      	b.n	80036e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fb10 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800368e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fc99 	bl	8003fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b0ba      	sub	sp, #232	@ 0xe8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800372a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10f      	bne.n	8003752 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_UART_IRQHandler+0x66>
 800373e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fb7e 	bl	8003e4c <UART_Receive_IT>
      return;
 8003750:	e273      	b.n	8003c3a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80de 	beq.w	8003918 <HAL_UART_IRQHandler+0x22c>
 800375c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d106      	bne.n	8003776 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80d1 	beq.w	8003918 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_UART_IRQHandler+0xae>
 8003782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800379a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_UART_IRQHandler+0xd2>
 80037a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	f043 0202 	orr.w	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_UART_IRQHandler+0xf6>
 80037ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f043 0204 	orr.w	r2, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d011      	beq.n	8003812 <HAL_UART_IRQHandler+0x126>
 80037ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d105      	bne.n	8003806 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	f043 0208 	orr.w	r2, r3, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 820a 	beq.w	8003c30 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_UART_IRQHandler+0x14e>
 8003828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fb09 	bl	8003e4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003844:	2b40      	cmp	r3, #64	@ 0x40
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <HAL_UART_IRQHandler+0x17a>
 800385e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d04f      	beq.n	8003906 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa14 	bl	8003c94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003876:	2b40      	cmp	r3, #64	@ 0x40
 8003878:	d141      	bne.n	80038fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3314      	adds	r3, #20
 8003880:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003890:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003898:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3314      	adds	r3, #20
 80038a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1d9      	bne.n	800387a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d013      	beq.n	80038f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d2:	4a8a      	ldr	r2, [pc, #552]	@ (8003afc <HAL_UART_IRQHandler+0x410>)
 80038d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd ff5a 	bl	8001794 <HAL_DMA_Abort_IT>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d016      	beq.n	8003914 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038f0:	4610      	mov	r0, r2
 80038f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	e00e      	b.n	8003914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9b6 	bl	8003c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	e00a      	b.n	8003914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f9b2 	bl	8003c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	e006      	b.n	8003914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f9ae 	bl	8003c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003912:	e18d      	b.n	8003c30 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003914:	bf00      	nop
    return;
 8003916:	e18b      	b.n	8003c30 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 8167 	bne.w	8003bf0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8160 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8159 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395e:	2b40      	cmp	r3, #64	@ 0x40
 8003960:	f040 80ce 	bne.w	8003b00 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003970:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a9 	beq.w	8003acc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800397e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003982:	429a      	cmp	r2, r3
 8003984:	f080 80a2 	bcs.w	8003acc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800398e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800399a:	f000 8088 	beq.w	8003aae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1d9      	bne.n	800399e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3314      	adds	r3, #20
 8003a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e1      	bne.n	80039ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3314      	adds	r3, #20
 8003a46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e3      	bne.n	8003a26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a7e:	f023 0310 	bic.w	r3, r3, #16
 8003a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a98:	e841 2300 	strex	r3, r2, [r1]
 8003a9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e3      	bne.n	8003a6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fd fe03 	bl	80016b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f8d9 	bl	8003c7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003aca:	e0b3      	b.n	8003c34 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ad0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	f040 80ad 	bne.w	8003c34 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ae4:	f040 80a6 	bne.w	8003c34 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003af2:	4619      	mov	r1, r3
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f8c1 	bl	8003c7c <HAL_UARTEx_RxEventCallback>
      return;
 8003afa:	e09b      	b.n	8003c34 <HAL_UART_IRQHandler+0x548>
 8003afc:	08003d5b 	.word	0x08003d5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 808e 	beq.w	8003c38 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8089 	beq.w	8003c38 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e3      	bne.n	8003b26 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3314      	adds	r3, #20
 8003b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b82:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e3      	bne.n	8003b5e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0310 	bic.w	r3, r3, #16
 8003bba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003bc8:	61fa      	str	r2, [r7, #28]
 8003bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e3      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f847 	bl	8003c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bee:	e023      	b.n	8003c38 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_UART_IRQHandler+0x524>
 8003bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8b7 	bl	8003d7c <UART_Transmit_IT>
    return;
 8003c0e:	e014      	b.n	8003c3a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00e      	beq.n	8003c3a <HAL_UART_IRQHandler+0x54e>
 8003c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f8f7 	bl	8003e1c <UART_EndTransmit_IT>
    return;
 8003c2e:	e004      	b.n	8003c3a <HAL_UART_IRQHandler+0x54e>
    return;
 8003c30:	bf00      	nop
 8003c32:	e002      	b.n	8003c3a <HAL_UART_IRQHandler+0x54e>
      return;
 8003c34:	bf00      	nop
 8003c36:	e000      	b.n	8003c3a <HAL_UART_IRQHandler+0x54e>
      return;
 8003c38:	bf00      	nop
  }
}
 8003c3a:	37e8      	adds	r7, #232	@ 0xe8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b095      	sub	sp, #84	@ 0x54
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e5      	bne.n	8003c9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3314      	adds	r3, #20
 8003cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3314      	adds	r3, #20
 8003cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d119      	bne.n	8003d40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f023 0310 	bic.w	r3, r3, #16
 8003d22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d2c:	61ba      	str	r2, [r7, #24]
 8003d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e5      	bne.n	8003d0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d4e:	bf00      	nop
 8003d50:	3754      	adds	r7, #84	@ 0x54
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f7ff ff7a 	bl	8003c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b21      	cmp	r3, #33	@ 0x21
 8003d8e:	d13e      	bne.n	8003e0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d98:	d114      	bne.n	8003dc4 <UART_Transmit_IT+0x48>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d110      	bne.n	8003dc4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	1c9a      	adds	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	621a      	str	r2, [r3, #32]
 8003dc2:	e008      	b.n	8003dd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	1c59      	adds	r1, r3, #1
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6211      	str	r1, [r2, #32]
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4619      	mov	r1, r3
 8003de4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003df8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e000      	b.n	8003e10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e0e:	2302      	movs	r3, #2
  }
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff feff 	bl	8003c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08c      	sub	sp, #48	@ 0x30
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b22      	cmp	r3, #34	@ 0x22
 8003e66:	f040 80aa 	bne.w	8003fbe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e72:	d115      	bne.n	8003ea0 <UART_Receive_IT+0x54>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d111      	bne.n	8003ea0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e9e:	e024      	b.n	8003eea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eae:	d007      	beq.n	8003ec0 <UART_Receive_IT+0x74>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <UART_Receive_IT+0x82>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eca:	701a      	strb	r2, [r3, #0]
 8003ecc:	e008      	b.n	8003ee0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ede:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d15d      	bne.n	8003fba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0220 	bic.w	r2, r2, #32
 8003f0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d135      	bne.n	8003fb0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f023 0310 	bic.w	r3, r3, #16
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6a:	623a      	str	r2, [r7, #32]
 8003f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	69f9      	ldr	r1, [r7, #28]
 8003f70:	6a3a      	ldr	r2, [r7, #32]
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e5      	bne.n	8003f4a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d10a      	bne.n	8003fa2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff fe67 	bl	8003c7c <HAL_UARTEx_RxEventCallback>
 8003fae:	e002      	b.n	8003fb6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fe4f 	bl	8003c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e002      	b.n	8003fc0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e000      	b.n	8003fc0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
  }
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3730      	adds	r7, #48	@ 0x30
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b0c0      	sub	sp, #256	@ 0x100
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	68d9      	ldr	r1, [r3, #12]
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	ea40 0301 	orr.w	r3, r0, r1
 8003ff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	431a      	orrs	r2, r3
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004020:	f021 010c 	bic.w	r1, r1, #12
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800402e:	430b      	orrs	r3, r1
 8004030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004042:	6999      	ldr	r1, [r3, #24]
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	ea40 0301 	orr.w	r3, r0, r1
 800404e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4b8f      	ldr	r3, [pc, #572]	@ (8004294 <UART_SetConfig+0x2cc>)
 8004058:	429a      	cmp	r2, r3
 800405a:	d005      	beq.n	8004068 <UART_SetConfig+0xa0>
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b8d      	ldr	r3, [pc, #564]	@ (8004298 <UART_SetConfig+0x2d0>)
 8004064:	429a      	cmp	r2, r3
 8004066:	d104      	bne.n	8004072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004068:	f7fe fe76 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 800406c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004070:	e003      	b.n	800407a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004072:	f7fe fe5d 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8004076:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004084:	f040 810c 	bne.w	80042a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800408c:	2200      	movs	r2, #0
 800408e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004092:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040a2:	415b      	adcs	r3, r3
 80040a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040aa:	4621      	mov	r1, r4
 80040ac:	eb12 0801 	adds.w	r8, r2, r1
 80040b0:	4629      	mov	r1, r5
 80040b2:	eb43 0901 	adc.w	r9, r3, r1
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ca:	4690      	mov	r8, r2
 80040cc:	4699      	mov	r9, r3
 80040ce:	4623      	mov	r3, r4
 80040d0:	eb18 0303 	adds.w	r3, r8, r3
 80040d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040d8:	462b      	mov	r3, r5
 80040da:	eb49 0303 	adc.w	r3, r9, r3
 80040de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040f6:	460b      	mov	r3, r1
 80040f8:	18db      	adds	r3, r3, r3
 80040fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80040fc:	4613      	mov	r3, r2
 80040fe:	eb42 0303 	adc.w	r3, r2, r3
 8004102:	657b      	str	r3, [r7, #84]	@ 0x54
 8004104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800410c:	f7fc f868 	bl	80001e0 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4b61      	ldr	r3, [pc, #388]	@ (800429c <UART_SetConfig+0x2d4>)
 8004116:	fba3 2302 	umull	r2, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	011c      	lsls	r4, r3, #4
 800411e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004122:	2200      	movs	r2, #0
 8004124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004128:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800412c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	1891      	adds	r1, r2, r2
 8004136:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004138:	415b      	adcs	r3, r3
 800413a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800413c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004140:	4641      	mov	r1, r8
 8004142:	eb12 0a01 	adds.w	sl, r2, r1
 8004146:	4649      	mov	r1, r9
 8004148:	eb43 0b01 	adc.w	fp, r3, r1
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800415c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004160:	4692      	mov	sl, r2
 8004162:	469b      	mov	fp, r3
 8004164:	4643      	mov	r3, r8
 8004166:	eb1a 0303 	adds.w	r3, sl, r3
 800416a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800416e:	464b      	mov	r3, r9
 8004170:	eb4b 0303 	adc.w	r3, fp, r3
 8004174:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004184:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800418c:	460b      	mov	r3, r1
 800418e:	18db      	adds	r3, r3, r3
 8004190:	643b      	str	r3, [r7, #64]	@ 0x40
 8004192:	4613      	mov	r3, r2
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	647b      	str	r3, [r7, #68]	@ 0x44
 800419a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800419e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041a2:	f7fc f81d 	bl	80001e0 <__aeabi_uldivmod>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4611      	mov	r1, r2
 80041ac:	4b3b      	ldr	r3, [pc, #236]	@ (800429c <UART_SetConfig+0x2d4>)
 80041ae:	fba3 2301 	umull	r2, r3, r3, r1
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2264      	movs	r2, #100	@ 0x64
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	1acb      	subs	r3, r1, r3
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041c2:	4b36      	ldr	r3, [pc, #216]	@ (800429c <UART_SetConfig+0x2d4>)
 80041c4:	fba3 2302 	umull	r2, r3, r3, r2
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041d0:	441c      	add	r4, r3
 80041d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041e4:	4642      	mov	r2, r8
 80041e6:	464b      	mov	r3, r9
 80041e8:	1891      	adds	r1, r2, r2
 80041ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041ec:	415b      	adcs	r3, r3
 80041ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041f4:	4641      	mov	r1, r8
 80041f6:	1851      	adds	r1, r2, r1
 80041f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80041fa:	4649      	mov	r1, r9
 80041fc:	414b      	adcs	r3, r1
 80041fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800420c:	4659      	mov	r1, fp
 800420e:	00cb      	lsls	r3, r1, #3
 8004210:	4651      	mov	r1, sl
 8004212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004216:	4651      	mov	r1, sl
 8004218:	00ca      	lsls	r2, r1, #3
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	4603      	mov	r3, r0
 8004220:	4642      	mov	r2, r8
 8004222:	189b      	adds	r3, r3, r2
 8004224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004228:	464b      	mov	r3, r9
 800422a:	460a      	mov	r2, r1
 800422c:	eb42 0303 	adc.w	r3, r2, r3
 8004230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004240:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004248:	460b      	mov	r3, r1
 800424a:	18db      	adds	r3, r3, r3
 800424c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800424e:	4613      	mov	r3, r2
 8004250:	eb42 0303 	adc.w	r3, r2, r3
 8004254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800425a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800425e:	f7fb ffbf 	bl	80001e0 <__aeabi_uldivmod>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <UART_SetConfig+0x2d4>)
 8004268:	fba3 1302 	umull	r1, r3, r3, r2
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	2164      	movs	r1, #100	@ 0x64
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	3332      	adds	r3, #50	@ 0x32
 800427a:	4a08      	ldr	r2, [pc, #32]	@ (800429c <UART_SetConfig+0x2d4>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	f003 0207 	and.w	r2, r3, #7
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4422      	add	r2, r4
 800428e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004290:	e106      	b.n	80044a0 <UART_SetConfig+0x4d8>
 8004292:	bf00      	nop
 8004294:	40011000 	.word	0x40011000
 8004298:	40011400 	.word	0x40011400
 800429c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042b2:	4642      	mov	r2, r8
 80042b4:	464b      	mov	r3, r9
 80042b6:	1891      	adds	r1, r2, r2
 80042b8:	6239      	str	r1, [r7, #32]
 80042ba:	415b      	adcs	r3, r3
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042c2:	4641      	mov	r1, r8
 80042c4:	1854      	adds	r4, r2, r1
 80042c6:	4649      	mov	r1, r9
 80042c8:	eb43 0501 	adc.w	r5, r3, r1
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	00eb      	lsls	r3, r5, #3
 80042d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042da:	00e2      	lsls	r2, r4, #3
 80042dc:	4614      	mov	r4, r2
 80042de:	461d      	mov	r5, r3
 80042e0:	4643      	mov	r3, r8
 80042e2:	18e3      	adds	r3, r4, r3
 80042e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042e8:	464b      	mov	r3, r9
 80042ea:	eb45 0303 	adc.w	r3, r5, r3
 80042ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800430e:	4629      	mov	r1, r5
 8004310:	008b      	lsls	r3, r1, #2
 8004312:	4621      	mov	r1, r4
 8004314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004318:	4621      	mov	r1, r4
 800431a:	008a      	lsls	r2, r1, #2
 800431c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004320:	f7fb ff5e 	bl	80001e0 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4b60      	ldr	r3, [pc, #384]	@ (80044ac <UART_SetConfig+0x4e4>)
 800432a:	fba3 2302 	umull	r2, r3, r3, r2
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	011c      	lsls	r4, r3, #4
 8004332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800433c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	1891      	adds	r1, r2, r2
 800434a:	61b9      	str	r1, [r7, #24]
 800434c:	415b      	adcs	r3, r3
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004354:	4641      	mov	r1, r8
 8004356:	1851      	adds	r1, r2, r1
 8004358:	6139      	str	r1, [r7, #16]
 800435a:	4649      	mov	r1, r9
 800435c:	414b      	adcs	r3, r1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800436c:	4659      	mov	r1, fp
 800436e:	00cb      	lsls	r3, r1, #3
 8004370:	4651      	mov	r1, sl
 8004372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004376:	4651      	mov	r1, sl
 8004378:	00ca      	lsls	r2, r1, #3
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	4603      	mov	r3, r0
 8004380:	4642      	mov	r2, r8
 8004382:	189b      	adds	r3, r3, r2
 8004384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004388:	464b      	mov	r3, r9
 800438a:	460a      	mov	r2, r1
 800438c:	eb42 0303 	adc.w	r3, r2, r3
 8004390:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800439e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043ac:	4649      	mov	r1, r9
 80043ae:	008b      	lsls	r3, r1, #2
 80043b0:	4641      	mov	r1, r8
 80043b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043b6:	4641      	mov	r1, r8
 80043b8:	008a      	lsls	r2, r1, #2
 80043ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043be:	f7fb ff0f 	bl	80001e0 <__aeabi_uldivmod>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4611      	mov	r1, r2
 80043c8:	4b38      	ldr	r3, [pc, #224]	@ (80044ac <UART_SetConfig+0x4e4>)
 80043ca:	fba3 2301 	umull	r2, r3, r3, r1
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2264      	movs	r2, #100	@ 0x64
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	1acb      	subs	r3, r1, r3
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	3332      	adds	r3, #50	@ 0x32
 80043dc:	4a33      	ldr	r2, [pc, #204]	@ (80044ac <UART_SetConfig+0x4e4>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043e8:	441c      	add	r4, r3
 80043ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ee:	2200      	movs	r2, #0
 80043f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80043f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80043f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	1891      	adds	r1, r2, r2
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	415b      	adcs	r3, r3
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004408:	4641      	mov	r1, r8
 800440a:	1851      	adds	r1, r2, r1
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	4649      	mov	r1, r9
 8004410:	414b      	adcs	r3, r1
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004420:	4659      	mov	r1, fp
 8004422:	00cb      	lsls	r3, r1, #3
 8004424:	4651      	mov	r1, sl
 8004426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800442a:	4651      	mov	r1, sl
 800442c:	00ca      	lsls	r2, r1, #3
 800442e:	4610      	mov	r0, r2
 8004430:	4619      	mov	r1, r3
 8004432:	4603      	mov	r3, r0
 8004434:	4642      	mov	r2, r8
 8004436:	189b      	adds	r3, r3, r2
 8004438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800443a:	464b      	mov	r3, r9
 800443c:	460a      	mov	r2, r1
 800443e:	eb42 0303 	adc.w	r3, r2, r3
 8004442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	663b      	str	r3, [r7, #96]	@ 0x60
 800444e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800445c:	4649      	mov	r1, r9
 800445e:	008b      	lsls	r3, r1, #2
 8004460:	4641      	mov	r1, r8
 8004462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004466:	4641      	mov	r1, r8
 8004468:	008a      	lsls	r2, r1, #2
 800446a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800446e:	f7fb feb7 	bl	80001e0 <__aeabi_uldivmod>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4b0d      	ldr	r3, [pc, #52]	@ (80044ac <UART_SetConfig+0x4e4>)
 8004478:	fba3 1302 	umull	r1, r3, r3, r2
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	2164      	movs	r1, #100	@ 0x64
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	3332      	adds	r3, #50	@ 0x32
 800448a:	4a08      	ldr	r2, [pc, #32]	@ (80044ac <UART_SetConfig+0x4e4>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	f003 020f 	and.w	r2, r3, #15
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4422      	add	r2, r4
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044a6:	46bd      	mov	sp, r7
 80044a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ac:	51eb851f 	.word	0x51eb851f

080044b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044c2:	2b84      	cmp	r3, #132	@ 0x84
 80044c4:	d005      	beq.n	80044d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	3303      	adds	r3, #3
 80044d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044e4:	f000 fae4 	bl	8004ab0 <vTaskStartScheduler>
  
  return osOK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	bd80      	pop	{r7, pc}

080044ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f0:	b089      	sub	sp, #36	@ 0x24
 80044f2:	af04      	add	r7, sp, #16
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <osThreadCreate+0x54>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01c      	beq.n	8004542 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685c      	ldr	r4, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691e      	ldr	r6, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ffc8 	bl	80044b0 <makeFreeRtosPriority>
 8004520:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800452a:	9202      	str	r2, [sp, #8]
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	9100      	str	r1, [sp, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	4632      	mov	r2, r6
 8004534:	4629      	mov	r1, r5
 8004536:	4620      	mov	r0, r4
 8004538:	f000 f8ed 	bl	8004716 <xTaskCreateStatic>
 800453c:	4603      	mov	r3, r0
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e01c      	b.n	800457c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685c      	ldr	r4, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800454e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ffaa 	bl	80044b0 <makeFreeRtosPriority>
 800455c:	4602      	mov	r2, r0
 800455e:	f107 030c 	add.w	r3, r7, #12
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	9200      	str	r2, [sp, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	4632      	mov	r2, r6
 800456a:	4629      	mov	r1, r5
 800456c:	4620      	mov	r0, r4
 800456e:	f000 f932 	bl	80047d6 <xTaskCreate>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d001      	beq.n	800457c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800457c:	68fb      	ldr	r3, [r7, #12]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004586 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <osDelay+0x16>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	e000      	b.n	800459e <osDelay+0x18>
 800459c:	2301      	movs	r3, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fa50 	bl	8004a44 <vTaskDelay>
  
  return osOK;
 80045a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f103 0208 	add.w	r2, r3, #8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f04f 32ff 	mov.w	r2, #4294967295
 80045c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f103 0208 	add.w	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f103 0208 	add.w	r2, r3, #8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d103      	bne.n	8004670 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	e00c      	b.n	800468a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3308      	adds	r3, #8
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e002      	b.n	800467e <vListInsert+0x2e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d2f6      	bcs.n	8004678 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046c2:	b480      	push	{r7}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6892      	ldr	r2, [r2, #8]
 80046d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6852      	ldr	r2, [r2, #4]
 80046e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d103      	bne.n	80046f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	1e5a      	subs	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004716:	b580      	push	{r7, lr}
 8004718:	b08e      	sub	sp, #56	@ 0x38
 800471a:	af04      	add	r7, sp, #16
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	61fb      	str	r3, [r7, #28]
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	e7fd      	b.n	800475c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004760:	2354      	movs	r3, #84	@ 0x54
 8004762:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b54      	cmp	r3, #84	@ 0x54
 8004768:	d00b      	beq.n	8004782 <xTaskCreateStatic+0x6c>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	61bb      	str	r3, [r7, #24]
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	e7fd      	b.n	800477e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01e      	beq.n	80047c8 <xTaskCreateStatic+0xb2>
 800478a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01b      	beq.n	80047c8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004798:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	2202      	movs	r2, #2
 800479e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047a2:	2300      	movs	r3, #0
 80047a4:	9303      	str	r3, [sp, #12]
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	9302      	str	r3, [sp, #8]
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f850 	bl	8004860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047c2:	f000 f8d5 	bl	8004970 <prvAddNewTaskToReadyList>
 80047c6:	e001      	b.n	80047cc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047cc:	697b      	ldr	r3, [r7, #20]
	}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3728      	adds	r7, #40	@ 0x28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b08c      	sub	sp, #48	@ 0x30
 80047da:	af04      	add	r7, sp, #16
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fed4 	bl	8005598 <pvPortMalloc>
 80047f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00e      	beq.n	8004816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047f8:	2054      	movs	r0, #84	@ 0x54
 80047fa:	f000 fecd 	bl	8005598 <pvPortMalloc>
 80047fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30
 800480c:	e005      	b.n	800481a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f000 ff90 	bl	8005734 <vPortFree>
 8004814:	e001      	b.n	800481a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004828:	88fa      	ldrh	r2, [r7, #6]
 800482a:	2300      	movs	r3, #0
 800482c:	9303      	str	r3, [sp, #12]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	9302      	str	r3, [sp, #8]
 8004832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f80e 	bl	8004860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004844:	69f8      	ldr	r0, [r7, #28]
 8004846:	f000 f893 	bl	8004970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800484a:	2301      	movs	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e002      	b.n	8004856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004850:	f04f 33ff 	mov.w	r3, #4294967295
 8004854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004856:	69bb      	ldr	r3, [r7, #24]
	}
 8004858:	4618      	mov	r0, r3
 800485a:	3720      	adds	r7, #32
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004878:	3b01      	subs	r3, #1
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f023 0307 	bic.w	r3, r3, #7
 8004886:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	617b      	str	r3, [r7, #20]
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	e7fd      	b.n	80048a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01f      	beq.n	80048f0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e012      	b.n	80048dc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	7819      	ldrb	r1, [r3, #0]
 80048be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	3334      	adds	r3, #52	@ 0x34
 80048c6:	460a      	mov	r2, r1
 80048c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	4413      	add	r3, r2
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3301      	adds	r3, #1
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	d9e9      	bls.n	80048b6 <prvInitialiseNewTask+0x56>
 80048e2:	e000      	b.n	80048e6 <prvInitialiseNewTask+0x86>
			{
				break;
 80048e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048ee:	e003      	b.n	80048f8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d901      	bls.n	8004902 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048fe:	2306      	movs	r3, #6
 8004900:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004906:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800490c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	2200      	movs	r2, #0
 8004912:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	3304      	adds	r3, #4
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fe68 	bl	80045ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004920:	3318      	adds	r3, #24
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fe63 	bl	80045ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800492c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	f1c3 0207 	rsb	r2, r3, #7
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800493c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	2200      	movs	r2, #0
 8004942:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	69b8      	ldr	r0, [r7, #24]
 8004952:	f000 fc0d 	bl	8005170 <pxPortInitialiseStack>
 8004956:	4602      	mov	r2, r0
 8004958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004966:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004968:	bf00      	nop
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004978:	f000 fd2e 	bl	80053d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800497c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a28 <prvAddNewTaskToReadyList+0xb8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	4a29      	ldr	r2, [pc, #164]	@ (8004a28 <prvAddNewTaskToReadyList+0xb8>)
 8004984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004986:	4b29      	ldr	r3, [pc, #164]	@ (8004a2c <prvAddNewTaskToReadyList+0xbc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800498e:	4a27      	ldr	r2, [pc, #156]	@ (8004a2c <prvAddNewTaskToReadyList+0xbc>)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004994:	4b24      	ldr	r3, [pc, #144]	@ (8004a28 <prvAddNewTaskToReadyList+0xb8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d110      	bne.n	80049be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800499c:	f000 fac4 	bl	8004f28 <prvInitialiseTaskLists>
 80049a0:	e00d      	b.n	80049be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049a2:	4b23      	ldr	r3, [pc, #140]	@ (8004a30 <prvAddNewTaskToReadyList+0xc0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049aa:	4b20      	ldr	r3, [pc, #128]	@ (8004a2c <prvAddNewTaskToReadyList+0xbc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d802      	bhi.n	80049be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049b8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a2c <prvAddNewTaskToReadyList+0xbc>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049be:	4b1d      	ldr	r3, [pc, #116]	@ (8004a34 <prvAddNewTaskToReadyList+0xc4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a34 <prvAddNewTaskToReadyList+0xc4>)
 80049c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	2201      	movs	r2, #1
 80049ce:	409a      	lsls	r2, r3
 80049d0:	4b19      	ldr	r3, [pc, #100]	@ (8004a38 <prvAddNewTaskToReadyList+0xc8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	4a18      	ldr	r2, [pc, #96]	@ (8004a38 <prvAddNewTaskToReadyList+0xc8>)
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4a15      	ldr	r2, [pc, #84]	@ (8004a3c <prvAddNewTaskToReadyList+0xcc>)
 80049e8:	441a      	add	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7ff fe09 	bl	8004608 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049f6:	f000 fd21 	bl	800543c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <prvAddNewTaskToReadyList+0xc0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00e      	beq.n	8004a20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a02:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <prvAddNewTaskToReadyList+0xbc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d207      	bcs.n	8004a20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a10:	4b0b      	ldr	r3, [pc, #44]	@ (8004a40 <prvAddNewTaskToReadyList+0xd0>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000568 	.word	0x20000568
 8004a2c:	20000468 	.word	0x20000468
 8004a30:	20000574 	.word	0x20000574
 8004a34:	20000584 	.word	0x20000584
 8004a38:	20000570 	.word	0x20000570
 8004a3c:	2000046c 	.word	0x2000046c
 8004a40:	e000ed04 	.word	0xe000ed04

08004a44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d018      	beq.n	8004a88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a56:	4b14      	ldr	r3, [pc, #80]	@ (8004aa8 <vTaskDelay+0x64>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <vTaskDelay+0x32>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	60bb      	str	r3, [r7, #8]
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	e7fd      	b.n	8004a72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a76:	f000 f87d 	bl	8004b74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fb11 	bl	80050a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a82:	f000 f885 	bl	8004b90 <xTaskResumeAll>
 8004a86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d107      	bne.n	8004a9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a8e:	4b07      	ldr	r3, [pc, #28]	@ (8004aac <vTaskDelay+0x68>)
 8004a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000590 	.word	0x20000590
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	@ 0x28
 8004ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004abe:	463a      	mov	r2, r7
 8004ac0:	1d39      	adds	r1, r7, #4
 8004ac2:	f107 0308 	add.w	r3, r7, #8
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fb fd20 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	9202      	str	r2, [sp, #8]
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	2300      	movs	r3, #0
 8004adc:	460a      	mov	r2, r1
 8004ade:	491f      	ldr	r1, [pc, #124]	@ (8004b5c <vTaskStartScheduler+0xac>)
 8004ae0:	481f      	ldr	r0, [pc, #124]	@ (8004b60 <vTaskStartScheduler+0xb0>)
 8004ae2:	f7ff fe18 	bl	8004716 <xTaskCreateStatic>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b64 <vTaskStartScheduler+0xb4>)
 8004aea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004aec:	4b1d      	ldr	r3, [pc, #116]	@ (8004b64 <vTaskStartScheduler+0xb4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004af4:	2301      	movs	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e001      	b.n	8004afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d116      	bne.n	8004b32 <vTaskStartScheduler+0x82>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	613b      	str	r3, [r7, #16]
}
 8004b16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b18:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <vTaskStartScheduler+0xb8>)
 8004b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b20:	4b12      	ldr	r3, [pc, #72]	@ (8004b6c <vTaskStartScheduler+0xbc>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b26:	4b12      	ldr	r3, [pc, #72]	@ (8004b70 <vTaskStartScheduler+0xc0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b2c:	f000 fbb0 	bl	8005290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b30:	e00f      	b.n	8004b52 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d10b      	bne.n	8004b52 <vTaskStartScheduler+0xa2>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	60fb      	str	r3, [r7, #12]
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	e7fd      	b.n	8004b4e <vTaskStartScheduler+0x9e>
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	08005a90 	.word	0x08005a90
 8004b60:	08004ef9 	.word	0x08004ef9
 8004b64:	2000058c 	.word	0x2000058c
 8004b68:	20000588 	.word	0x20000588
 8004b6c:	20000574 	.word	0x20000574
 8004b70:	2000056c 	.word	0x2000056c

08004b74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b78:	4b04      	ldr	r3, [pc, #16]	@ (8004b8c <vTaskSuspendAll+0x18>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	4a03      	ldr	r2, [pc, #12]	@ (8004b8c <vTaskSuspendAll+0x18>)
 8004b80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b82:	bf00      	nop
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	20000590 	.word	0x20000590

08004b90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b9e:	4b42      	ldr	r3, [pc, #264]	@ (8004ca8 <xTaskResumeAll+0x118>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <xTaskResumeAll+0x2e>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	603b      	str	r3, [r7, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	e7fd      	b.n	8004bba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bbe:	f000 fc0b 	bl	80053d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bc2:	4b39      	ldr	r3, [pc, #228]	@ (8004ca8 <xTaskResumeAll+0x118>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	4a37      	ldr	r2, [pc, #220]	@ (8004ca8 <xTaskResumeAll+0x118>)
 8004bca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bcc:	4b36      	ldr	r3, [pc, #216]	@ (8004ca8 <xTaskResumeAll+0x118>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d161      	bne.n	8004c98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bd4:	4b35      	ldr	r3, [pc, #212]	@ (8004cac <xTaskResumeAll+0x11c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d05d      	beq.n	8004c98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bdc:	e02e      	b.n	8004c3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bde:	4b34      	ldr	r3, [pc, #208]	@ (8004cb0 <xTaskResumeAll+0x120>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3318      	adds	r3, #24
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fd69 	bl	80046c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fd64 	bl	80046c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	2201      	movs	r2, #1
 8004c00:	409a      	lsls	r2, r3
 8004c02:	4b2c      	ldr	r3, [pc, #176]	@ (8004cb4 <xTaskResumeAll+0x124>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb4 <xTaskResumeAll+0x124>)
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4a27      	ldr	r2, [pc, #156]	@ (8004cb8 <xTaskResumeAll+0x128>)
 8004c1a:	441a      	add	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4619      	mov	r1, r3
 8004c22:	4610      	mov	r0, r2
 8004c24:	f7ff fcf0 	bl	8004608 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2c:	4b23      	ldr	r3, [pc, #140]	@ (8004cbc <xTaskResumeAll+0x12c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c36:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <xTaskResumeAll+0x130>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004cb0 <xTaskResumeAll+0x120>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1cc      	bne.n	8004bde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c4a:	f000 fa0b 	bl	8005064 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc4 <xTaskResumeAll+0x134>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d010      	beq.n	8004c7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c5a:	f000 f837 	bl	8004ccc <xTaskIncrementTick>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c64:	4b16      	ldr	r3, [pc, #88]	@ (8004cc0 <xTaskResumeAll+0x130>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f1      	bne.n	8004c5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c76:	4b13      	ldr	r3, [pc, #76]	@ (8004cc4 <xTaskResumeAll+0x134>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c7c:	4b10      	ldr	r3, [pc, #64]	@ (8004cc0 <xTaskResumeAll+0x130>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c88:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc8 <xTaskResumeAll+0x138>)
 8004c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c98:	f000 fbd0 	bl	800543c <vPortExitCritical>

	return xAlreadyYielded;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000590 	.word	0x20000590
 8004cac:	20000568 	.word	0x20000568
 8004cb0:	20000528 	.word	0x20000528
 8004cb4:	20000570 	.word	0x20000570
 8004cb8:	2000046c 	.word	0x2000046c
 8004cbc:	20000468 	.word	0x20000468
 8004cc0:	2000057c 	.word	0x2000057c
 8004cc4:	20000578 	.word	0x20000578
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8004e14 <xTaskIncrementTick+0x148>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f040 808f 	bne.w	8004dfe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8004e18 <xTaskIncrementTick+0x14c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ce8:	4a4b      	ldr	r2, [pc, #300]	@ (8004e18 <xTaskIncrementTick+0x14c>)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d121      	bne.n	8004d38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cf4:	4b49      	ldr	r3, [pc, #292]	@ (8004e1c <xTaskIncrementTick+0x150>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	603b      	str	r3, [r7, #0]
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	e7fd      	b.n	8004d12 <xTaskIncrementTick+0x46>
 8004d16:	4b41      	ldr	r3, [pc, #260]	@ (8004e1c <xTaskIncrementTick+0x150>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	4b40      	ldr	r3, [pc, #256]	@ (8004e20 <xTaskIncrementTick+0x154>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a3e      	ldr	r2, [pc, #248]	@ (8004e1c <xTaskIncrementTick+0x150>)
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	4a3e      	ldr	r2, [pc, #248]	@ (8004e20 <xTaskIncrementTick+0x154>)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e24 <xTaskIncrementTick+0x158>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	4a3c      	ldr	r2, [pc, #240]	@ (8004e24 <xTaskIncrementTick+0x158>)
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	f000 f996 	bl	8005064 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d38:	4b3b      	ldr	r3, [pc, #236]	@ (8004e28 <xTaskIncrementTick+0x15c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d348      	bcc.n	8004dd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d42:	4b36      	ldr	r3, [pc, #216]	@ (8004e1c <xTaskIncrementTick+0x150>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d104      	bne.n	8004d56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4c:	4b36      	ldr	r3, [pc, #216]	@ (8004e28 <xTaskIncrementTick+0x15c>)
 8004d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d52:	601a      	str	r2, [r3, #0]
					break;
 8004d54:	e03e      	b.n	8004dd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d56:	4b31      	ldr	r3, [pc, #196]	@ (8004e1c <xTaskIncrementTick+0x150>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d203      	bcs.n	8004d76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8004e28 <xTaskIncrementTick+0x15c>)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d74:	e02e      	b.n	8004dd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff fca1 	bl	80046c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	3318      	adds	r3, #24
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fc98 	bl	80046c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	2201      	movs	r2, #1
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	4b24      	ldr	r3, [pc, #144]	@ (8004e2c <xTaskIncrementTick+0x160>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	4a22      	ldr	r2, [pc, #136]	@ (8004e2c <xTaskIncrementTick+0x160>)
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4a1f      	ldr	r2, [pc, #124]	@ (8004e30 <xTaskIncrementTick+0x164>)
 8004db2:	441a      	add	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7ff fc24 	bl	8004608 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e34 <xTaskIncrementTick+0x168>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d3b9      	bcc.n	8004d42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dd2:	e7b6      	b.n	8004d42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004dd4:	4b17      	ldr	r3, [pc, #92]	@ (8004e34 <xTaskIncrementTick+0x168>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dda:	4915      	ldr	r1, [pc, #84]	@ (8004e30 <xTaskIncrementTick+0x164>)
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d901      	bls.n	8004df0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004dec:	2301      	movs	r3, #1
 8004dee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004df0:	4b11      	ldr	r3, [pc, #68]	@ (8004e38 <xTaskIncrementTick+0x16c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e004      	b.n	8004e08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004e3c <xTaskIncrementTick+0x170>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3301      	adds	r3, #1
 8004e04:	4a0d      	ldr	r2, [pc, #52]	@ (8004e3c <xTaskIncrementTick+0x170>)
 8004e06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e08:	697b      	ldr	r3, [r7, #20]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000590 	.word	0x20000590
 8004e18:	2000056c 	.word	0x2000056c
 8004e1c:	20000520 	.word	0x20000520
 8004e20:	20000524 	.word	0x20000524
 8004e24:	20000580 	.word	0x20000580
 8004e28:	20000588 	.word	0x20000588
 8004e2c:	20000570 	.word	0x20000570
 8004e30:	2000046c 	.word	0x2000046c
 8004e34:	20000468 	.word	0x20000468
 8004e38:	2000057c 	.word	0x2000057c
 8004e3c:	20000578 	.word	0x20000578

08004e40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e46:	4b27      	ldr	r3, [pc, #156]	@ (8004ee4 <vTaskSwitchContext+0xa4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e4e:	4b26      	ldr	r3, [pc, #152]	@ (8004ee8 <vTaskSwitchContext+0xa8>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e54:	e040      	b.n	8004ed8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004e56:	4b24      	ldr	r3, [pc, #144]	@ (8004ee8 <vTaskSwitchContext+0xa8>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e5c:	4b23      	ldr	r3, [pc, #140]	@ (8004eec <vTaskSwitchContext+0xac>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	fab3 f383 	clz	r3, r3
 8004e68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
 8004e6c:	f1c3 031f 	rsb	r3, r3, #31
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	491f      	ldr	r1, [pc, #124]	@ (8004ef0 <vTaskSwitchContext+0xb0>)
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	607b      	str	r3, [r7, #4]
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <vTaskSwitchContext+0x5a>
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4a11      	ldr	r2, [pc, #68]	@ (8004ef0 <vTaskSwitchContext+0xb0>)
 8004eaa:	4413      	add	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	605a      	str	r2, [r3, #4]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d104      	bne.n	8004ece <vTaskSwitchContext+0x8e>
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a07      	ldr	r2, [pc, #28]	@ (8004ef4 <vTaskSwitchContext+0xb4>)
 8004ed6:	6013      	str	r3, [r2, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	20000590 	.word	0x20000590
 8004ee8:	2000057c 	.word	0x2000057c
 8004eec:	20000570 	.word	0x20000570
 8004ef0:	2000046c 	.word	0x2000046c
 8004ef4:	20000468 	.word	0x20000468

08004ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f00:	f000 f852 	bl	8004fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f04:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <prvIdleTask+0x28>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d9f9      	bls.n	8004f00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f0c:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <prvIdleTask+0x2c>)
 8004f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f1c:	e7f0      	b.n	8004f00 <prvIdleTask+0x8>
 8004f1e:	bf00      	nop
 8004f20:	2000046c 	.word	0x2000046c
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f2e:	2300      	movs	r3, #0
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	e00c      	b.n	8004f4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4a12      	ldr	r2, [pc, #72]	@ (8004f88 <prvInitialiseTaskLists+0x60>)
 8004f40:	4413      	add	r3, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fb33 	bl	80045ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b06      	cmp	r3, #6
 8004f52:	d9ef      	bls.n	8004f34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f54:	480d      	ldr	r0, [pc, #52]	@ (8004f8c <prvInitialiseTaskLists+0x64>)
 8004f56:	f7ff fb2a 	bl	80045ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f5a:	480d      	ldr	r0, [pc, #52]	@ (8004f90 <prvInitialiseTaskLists+0x68>)
 8004f5c:	f7ff fb27 	bl	80045ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f60:	480c      	ldr	r0, [pc, #48]	@ (8004f94 <prvInitialiseTaskLists+0x6c>)
 8004f62:	f7ff fb24 	bl	80045ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f66:	480c      	ldr	r0, [pc, #48]	@ (8004f98 <prvInitialiseTaskLists+0x70>)
 8004f68:	f7ff fb21 	bl	80045ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f6c:	480b      	ldr	r0, [pc, #44]	@ (8004f9c <prvInitialiseTaskLists+0x74>)
 8004f6e:	f7ff fb1e 	bl	80045ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f72:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa0 <prvInitialiseTaskLists+0x78>)
 8004f74:	4a05      	ldr	r2, [pc, #20]	@ (8004f8c <prvInitialiseTaskLists+0x64>)
 8004f76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f78:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <prvInitialiseTaskLists+0x7c>)
 8004f7a:	4a05      	ldr	r2, [pc, #20]	@ (8004f90 <prvInitialiseTaskLists+0x68>)
 8004f7c:	601a      	str	r2, [r3, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	2000046c 	.word	0x2000046c
 8004f8c:	200004f8 	.word	0x200004f8
 8004f90:	2000050c 	.word	0x2000050c
 8004f94:	20000528 	.word	0x20000528
 8004f98:	2000053c 	.word	0x2000053c
 8004f9c:	20000554 	.word	0x20000554
 8004fa0:	20000520 	.word	0x20000520
 8004fa4:	20000524 	.word	0x20000524

08004fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fae:	e019      	b.n	8004fe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fb0:	f000 fa12 	bl	80053d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb4:	4b10      	ldr	r3, [pc, #64]	@ (8004ff8 <prvCheckTasksWaitingTermination+0x50>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fb7e 	bl	80046c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <prvCheckTasksWaitingTermination+0x54>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8004ffc <prvCheckTasksWaitingTermination+0x54>)
 8004fce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005000 <prvCheckTasksWaitingTermination+0x58>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8005000 <prvCheckTasksWaitingTermination+0x58>)
 8004fd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fda:	f000 fa2f 	bl	800543c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f810 	bl	8005004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fe4:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <prvCheckTasksWaitingTermination+0x58>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e1      	bne.n	8004fb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	2000053c 	.word	0x2000053c
 8004ffc:	20000568 	.word	0x20000568
 8005000:	20000550 	.word	0x20000550

08005004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005012:	2b00      	cmp	r3, #0
 8005014:	d108      	bne.n	8005028 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fb8a 	bl	8005734 <vPortFree>
				vPortFree( pxTCB );
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fb87 	bl	8005734 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005026:	e019      	b.n	800505c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800502e:	2b01      	cmp	r3, #1
 8005030:	d103      	bne.n	800503a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fb7e 	bl	8005734 <vPortFree>
	}
 8005038:	e010      	b.n	800505c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005040:	2b02      	cmp	r3, #2
 8005042:	d00b      	beq.n	800505c <prvDeleteTCB+0x58>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	60fb      	str	r3, [r7, #12]
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <prvDeleteTCB+0x54>
	}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800506a:	4b0c      	ldr	r3, [pc, #48]	@ (800509c <prvResetNextTaskUnblockTime+0x38>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005074:	4b0a      	ldr	r3, [pc, #40]	@ (80050a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005076:	f04f 32ff 	mov.w	r2, #4294967295
 800507a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800507c:	e008      	b.n	8005090 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800507e:	4b07      	ldr	r3, [pc, #28]	@ (800509c <prvResetNextTaskUnblockTime+0x38>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4a04      	ldr	r2, [pc, #16]	@ (80050a0 <prvResetNextTaskUnblockTime+0x3c>)
 800508e:	6013      	str	r3, [r2, #0]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	20000520 	.word	0x20000520
 80050a0:	20000588 	.word	0x20000588

080050a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050ae:	4b29      	ldr	r3, [pc, #164]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b4:	4b28      	ldr	r3, [pc, #160]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3304      	adds	r3, #4
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fb01 	bl	80046c2 <uxListRemove>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10b      	bne.n	80050de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050c6:	4b24      	ldr	r3, [pc, #144]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	2201      	movs	r2, #1
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43da      	mvns	r2, r3
 80050d4:	4b21      	ldr	r3, [pc, #132]	@ (800515c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4013      	ands	r3, r2
 80050da:	4a20      	ldr	r2, [pc, #128]	@ (800515c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d10a      	bne.n	80050fc <prvAddCurrentTaskToDelayedList+0x58>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4619      	mov	r1, r3
 80050f4:	481a      	ldr	r0, [pc, #104]	@ (8005160 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050f6:	f7ff fa87 	bl	8004608 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050fa:	e026      	b.n	800514a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4413      	add	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005104:	4b14      	ldr	r3, [pc, #80]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	429a      	cmp	r2, r3
 8005112:	d209      	bcs.n	8005128 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005114:	4b13      	ldr	r3, [pc, #76]	@ (8005164 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4b0f      	ldr	r3, [pc, #60]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xb4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3304      	adds	r3, #4
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f7ff fa95 	bl	8004650 <vListInsert>
}
 8005126:	e010      	b.n	800514a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005128:	4b0f      	ldr	r3, [pc, #60]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xc4>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xb4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f7ff fa8b 	bl	8004650 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800513a:	4b0c      	ldr	r3, [pc, #48]	@ (800516c <prvAddCurrentTaskToDelayedList+0xc8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	d202      	bcs.n	800514a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005144:	4a09      	ldr	r2, [pc, #36]	@ (800516c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6013      	str	r3, [r2, #0]
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	2000056c 	.word	0x2000056c
 8005158:	20000468 	.word	0x20000468
 800515c:	20000570 	.word	0x20000570
 8005160:	20000554 	.word	0x20000554
 8005164:	20000524 	.word	0x20000524
 8005168:	20000520 	.word	0x20000520
 800516c:	20000588 	.word	0x20000588

08005170 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3b04      	subs	r3, #4
 8005180:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3b04      	subs	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f023 0201 	bic.w	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3b04      	subs	r3, #4
 800519e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051a0:	4a0c      	ldr	r2, [pc, #48]	@ (80051d4 <pxPortInitialiseStack+0x64>)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3b14      	subs	r3, #20
 80051aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3b04      	subs	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f06f 0202 	mvn.w	r2, #2
 80051be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3b20      	subs	r3, #32
 80051c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051c6:	68fb      	ldr	r3, [r7, #12]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	080051d9 	.word	0x080051d9

080051d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051e2:	4b13      	ldr	r3, [pc, #76]	@ (8005230 <prvTaskExitError+0x58>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ea:	d00b      	beq.n	8005204 <prvTaskExitError+0x2c>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	60fb      	str	r3, [r7, #12]
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	e7fd      	b.n	8005200 <prvTaskExitError+0x28>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60bb      	str	r3, [r7, #8]
}
 8005216:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005218:	bf00      	nop
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0fc      	beq.n	800521a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	2000007c 	.word	0x2000007c
	...

08005240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005240:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <pxCurrentTCBConst2>)
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	f380 8809 	msr	PSP, r0
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	4770      	bx	lr
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst2>:
 8005260:	20000468 	.word	0x20000468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005268:	4808      	ldr	r0, [pc, #32]	@ (800528c <prvPortStartFirstTask+0x24>)
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	6800      	ldr	r0, [r0, #0]
 800526e:	f380 8808 	msr	MSP, r0
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8814 	msr	CONTROL, r0
 800527a:	b662      	cpsie	i
 800527c:	b661      	cpsie	f
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	df00      	svc	0
 8005288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800528a:	bf00      	nop
 800528c:	e000ed08 	.word	0xe000ed08

08005290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005296:	4b47      	ldr	r3, [pc, #284]	@ (80053b4 <xPortStartScheduler+0x124>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a47      	ldr	r2, [pc, #284]	@ (80053b8 <xPortStartScheduler+0x128>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10b      	bne.n	80052b8 <xPortStartScheduler+0x28>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	60fb      	str	r3, [r7, #12]
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052b8:	4b3e      	ldr	r3, [pc, #248]	@ (80053b4 <xPortStartScheduler+0x124>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a3f      	ldr	r2, [pc, #252]	@ (80053bc <xPortStartScheduler+0x12c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10b      	bne.n	80052da <xPortStartScheduler+0x4a>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	613b      	str	r3, [r7, #16]
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052da:	4b39      	ldr	r3, [pc, #228]	@ (80053c0 <xPortStartScheduler+0x130>)
 80052dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	22ff      	movs	r2, #255	@ 0xff
 80052ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	4b31      	ldr	r3, [pc, #196]	@ (80053c4 <xPortStartScheduler+0x134>)
 8005300:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005302:	4b31      	ldr	r3, [pc, #196]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005304:	2207      	movs	r2, #7
 8005306:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005308:	e009      	b.n	800531e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800530a:	4b2f      	ldr	r3, [pc, #188]	@ (80053c8 <xPortStartScheduler+0x138>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3b01      	subs	r3, #1
 8005310:	4a2d      	ldr	r2, [pc, #180]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005312:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d0ef      	beq.n	800530a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800532a:	4b27      	ldr	r3, [pc, #156]	@ (80053c8 <xPortStartScheduler+0x138>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1c3 0307 	rsb	r3, r3, #7
 8005332:	2b04      	cmp	r3, #4
 8005334:	d00b      	beq.n	800534e <xPortStartScheduler+0xbe>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60bb      	str	r3, [r7, #8]
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	e7fd      	b.n	800534a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800534e:	4b1e      	ldr	r3, [pc, #120]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005358:	4b1b      	ldr	r3, [pc, #108]	@ (80053c8 <xPortStartScheduler+0x138>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005360:	4a19      	ldr	r2, [pc, #100]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800536c:	4b17      	ldr	r3, [pc, #92]	@ (80053cc <xPortStartScheduler+0x13c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a16      	ldr	r2, [pc, #88]	@ (80053cc <xPortStartScheduler+0x13c>)
 8005372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005378:	4b14      	ldr	r3, [pc, #80]	@ (80053cc <xPortStartScheduler+0x13c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a13      	ldr	r2, [pc, #76]	@ (80053cc <xPortStartScheduler+0x13c>)
 800537e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005384:	f000 f8da 	bl	800553c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005388:	4b11      	ldr	r3, [pc, #68]	@ (80053d0 <xPortStartScheduler+0x140>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800538e:	f000 f8f9 	bl	8005584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005392:	4b10      	ldr	r3, [pc, #64]	@ (80053d4 <xPortStartScheduler+0x144>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a0f      	ldr	r2, [pc, #60]	@ (80053d4 <xPortStartScheduler+0x144>)
 8005398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800539c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800539e:	f7ff ff63 	bl	8005268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053a2:	f7ff fd4d 	bl	8004e40 <vTaskSwitchContext>
	prvTaskExitError();
 80053a6:	f7ff ff17 	bl	80051d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	e000ed00 	.word	0xe000ed00
 80053b8:	410fc271 	.word	0x410fc271
 80053bc:	410fc270 	.word	0x410fc270
 80053c0:	e000e400 	.word	0xe000e400
 80053c4:	20000594 	.word	0x20000594
 80053c8:	20000598 	.word	0x20000598
 80053cc:	e000ed20 	.word	0xe000ed20
 80053d0:	2000007c 	.word	0x2000007c
 80053d4:	e000ef34 	.word	0xe000ef34

080053d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	607b      	str	r3, [r7, #4]
}
 80053f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053f2:	4b10      	ldr	r3, [pc, #64]	@ (8005434 <vPortEnterCritical+0x5c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005434 <vPortEnterCritical+0x5c>)
 80053fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005434 <vPortEnterCritical+0x5c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d110      	bne.n	8005426 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005404:	4b0c      	ldr	r3, [pc, #48]	@ (8005438 <vPortEnterCritical+0x60>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <vPortEnterCritical+0x4e>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	603b      	str	r3, [r7, #0]
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <vPortEnterCritical+0x4a>
	}
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2000007c 	.word	0x2000007c
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005442:	4b12      	ldr	r3, [pc, #72]	@ (800548c <vPortExitCritical+0x50>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10b      	bne.n	8005462 <vPortExitCritical+0x26>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	607b      	str	r3, [r7, #4]
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	e7fd      	b.n	800545e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005462:	4b0a      	ldr	r3, [pc, #40]	@ (800548c <vPortExitCritical+0x50>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3b01      	subs	r3, #1
 8005468:	4a08      	ldr	r2, [pc, #32]	@ (800548c <vPortExitCritical+0x50>)
 800546a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800546c:	4b07      	ldr	r3, [pc, #28]	@ (800548c <vPortExitCritical+0x50>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <vPortExitCritical+0x44>
 8005474:	2300      	movs	r3, #0
 8005476:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800547e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	2000007c 	.word	0x2000007c

08005490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005490:	f3ef 8009 	mrs	r0, PSP
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4b15      	ldr	r3, [pc, #84]	@ (80054f0 <pxCurrentTCBConst>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	f01e 0f10 	tst.w	lr, #16
 80054a0:	bf08      	it	eq
 80054a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054aa:	6010      	str	r0, [r2, #0]
 80054ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054b4:	f380 8811 	msr	BASEPRI, r0
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f7ff fcbe 	bl	8004e40 <vTaskSwitchContext>
 80054c4:	f04f 0000 	mov.w	r0, #0
 80054c8:	f380 8811 	msr	BASEPRI, r0
 80054cc:	bc09      	pop	{r0, r3}
 80054ce:	6819      	ldr	r1, [r3, #0]
 80054d0:	6808      	ldr	r0, [r1, #0]
 80054d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d6:	f01e 0f10 	tst.w	lr, #16
 80054da:	bf08      	it	eq
 80054dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054e0:	f380 8809 	msr	PSP, r0
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	f3af 8000 	nop.w

080054f0 <pxCurrentTCBConst>:
 80054f0:	20000468 	.word	0x20000468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop

080054f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	607b      	str	r3, [r7, #4]
}
 8005510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005512:	f7ff fbdb 	bl	8004ccc <xTaskIncrementTick>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <SysTick_Handler+0x40>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	2300      	movs	r3, #0
 8005526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f383 8811 	msr	BASEPRI, r3
}
 800552e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005540:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <vPortSetupTimerInterrupt+0x34>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <vPortSetupTimerInterrupt+0x38>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800554c:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <vPortSetupTimerInterrupt+0x3c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a0a      	ldr	r2, [pc, #40]	@ (800557c <vPortSetupTimerInterrupt+0x40>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	099b      	lsrs	r3, r3, #6
 8005558:	4a09      	ldr	r2, [pc, #36]	@ (8005580 <vPortSetupTimerInterrupt+0x44>)
 800555a:	3b01      	subs	r3, #1
 800555c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800555e:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <vPortSetupTimerInterrupt+0x34>)
 8005560:	2207      	movs	r2, #7
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	e000e010 	.word	0xe000e010
 8005574:	e000e018 	.word	0xe000e018
 8005578:	20000000 	.word	0x20000000
 800557c:	10624dd3 	.word	0x10624dd3
 8005580:	e000e014 	.word	0xe000e014

08005584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005584:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005594 <vPortEnableVFP+0x10>
 8005588:	6801      	ldr	r1, [r0, #0]
 800558a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800558e:	6001      	str	r1, [r0, #0]
 8005590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005592:	bf00      	nop
 8005594:	e000ed88 	.word	0xe000ed88

08005598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	@ 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055a4:	f7ff fae6 	bl	8004b74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055a8:	4b5c      	ldr	r3, [pc, #368]	@ (800571c <pvPortMalloc+0x184>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055b0:	f000 f924 	bl	80057fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005720 <pvPortMalloc+0x188>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f040 8095 	bne.w	80056ec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01e      	beq.n	8005606 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055c8:	2208      	movs	r2, #8
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d015      	beq.n	8005606 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f023 0307 	bic.w	r3, r3, #7
 80055e0:	3308      	adds	r3, #8
 80055e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00b      	beq.n	8005606 <pvPortMalloc+0x6e>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	617b      	str	r3, [r7, #20]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d06f      	beq.n	80056ec <pvPortMalloc+0x154>
 800560c:	4b45      	ldr	r3, [pc, #276]	@ (8005724 <pvPortMalloc+0x18c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	d86a      	bhi.n	80056ec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005616:	4b44      	ldr	r3, [pc, #272]	@ (8005728 <pvPortMalloc+0x190>)
 8005618:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800561a:	4b43      	ldr	r3, [pc, #268]	@ (8005728 <pvPortMalloc+0x190>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005620:	e004      	b.n	800562c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	d903      	bls.n	800563e <pvPortMalloc+0xa6>
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f1      	bne.n	8005622 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800563e:	4b37      	ldr	r3, [pc, #220]	@ (800571c <pvPortMalloc+0x184>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005644:	429a      	cmp	r2, r3
 8005646:	d051      	beq.n	80056ec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2208      	movs	r2, #8
 800564e:	4413      	add	r3, r2
 8005650:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	1ad2      	subs	r2, r2, r3
 8005662:	2308      	movs	r3, #8
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	429a      	cmp	r2, r3
 8005668:	d920      	bls.n	80056ac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800566a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4413      	add	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00b      	beq.n	8005694 <pvPortMalloc+0xfc>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	613b      	str	r3, [r7, #16]
}
 800568e:	bf00      	nop
 8005690:	bf00      	nop
 8005692:	e7fd      	b.n	8005690 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	1ad2      	subs	r2, r2, r3
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056a6:	69b8      	ldr	r0, [r7, #24]
 80056a8:	f000 f90a 	bl	80058c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005724 <pvPortMalloc+0x18c>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005724 <pvPortMalloc+0x18c>)
 80056b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005724 <pvPortMalloc+0x18c>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b1b      	ldr	r3, [pc, #108]	@ (800572c <pvPortMalloc+0x194>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d203      	bcs.n	80056ce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056c6:	4b17      	ldr	r3, [pc, #92]	@ (8005724 <pvPortMalloc+0x18c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a18      	ldr	r2, [pc, #96]	@ (800572c <pvPortMalloc+0x194>)
 80056cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <pvPortMalloc+0x188>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056e2:	4b13      	ldr	r3, [pc, #76]	@ (8005730 <pvPortMalloc+0x198>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3301      	adds	r3, #1
 80056e8:	4a11      	ldr	r2, [pc, #68]	@ (8005730 <pvPortMalloc+0x198>)
 80056ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056ec:	f7ff fa50 	bl	8004b90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <pvPortMalloc+0x17a>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	60fb      	str	r3, [r7, #12]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <pvPortMalloc+0x176>
	return pvReturn;
 8005712:	69fb      	ldr	r3, [r7, #28]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3728      	adds	r7, #40	@ 0x28
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	200041a4 	.word	0x200041a4
 8005720:	200041b8 	.word	0x200041b8
 8005724:	200041a8 	.word	0x200041a8
 8005728:	2000419c 	.word	0x2000419c
 800572c:	200041ac 	.word	0x200041ac
 8005730:	200041b0 	.word	0x200041b0

08005734 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d04f      	beq.n	80057e6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005746:	2308      	movs	r3, #8
 8005748:	425b      	negs	r3, r3
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4413      	add	r3, r2
 800574e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	4b25      	ldr	r3, [pc, #148]	@ (80057f0 <vPortFree+0xbc>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4013      	ands	r3, r2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <vPortFree+0x46>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	60fb      	str	r3, [r7, #12]
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop
 8005778:	e7fd      	b.n	8005776 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <vPortFree+0x66>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60bb      	str	r3, [r7, #8]
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	e7fd      	b.n	8005796 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	4b14      	ldr	r3, [pc, #80]	@ (80057f0 <vPortFree+0xbc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01e      	beq.n	80057e6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d11a      	bne.n	80057e6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	4b0e      	ldr	r3, [pc, #56]	@ (80057f0 <vPortFree+0xbc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	401a      	ands	r2, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057c0:	f7ff f9d8 	bl	8004b74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	4b0a      	ldr	r3, [pc, #40]	@ (80057f4 <vPortFree+0xc0>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4413      	add	r3, r2
 80057ce:	4a09      	ldr	r2, [pc, #36]	@ (80057f4 <vPortFree+0xc0>)
 80057d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057d2:	6938      	ldr	r0, [r7, #16]
 80057d4:	f000 f874 	bl	80058c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057d8:	4b07      	ldr	r3, [pc, #28]	@ (80057f8 <vPortFree+0xc4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	4a06      	ldr	r2, [pc, #24]	@ (80057f8 <vPortFree+0xc4>)
 80057e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057e2:	f7ff f9d5 	bl	8004b90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057e6:	bf00      	nop
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200041b8 	.word	0x200041b8
 80057f4:	200041a8 	.word	0x200041a8
 80057f8:	200041b4 	.word	0x200041b4

080057fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005802:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005806:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005808:	4b27      	ldr	r3, [pc, #156]	@ (80058a8 <prvHeapInit+0xac>)
 800580a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00c      	beq.n	8005830 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3307      	adds	r3, #7
 800581a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0307 	bic.w	r3, r3, #7
 8005822:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	4a1f      	ldr	r2, [pc, #124]	@ (80058a8 <prvHeapInit+0xac>)
 800582c:	4413      	add	r3, r2
 800582e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005834:	4a1d      	ldr	r2, [pc, #116]	@ (80058ac <prvHeapInit+0xb0>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800583a:	4b1c      	ldr	r3, [pc, #112]	@ (80058ac <prvHeapInit+0xb0>)
 800583c:	2200      	movs	r2, #0
 800583e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4413      	add	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005848:	2208      	movs	r2, #8
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0307 	bic.w	r3, r3, #7
 8005856:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4a15      	ldr	r2, [pc, #84]	@ (80058b0 <prvHeapInit+0xb4>)
 800585c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800585e:	4b14      	ldr	r3, [pc, #80]	@ (80058b0 <prvHeapInit+0xb4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005866:	4b12      	ldr	r3, [pc, #72]	@ (80058b0 <prvHeapInit+0xb4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	1ad2      	subs	r2, r2, r3
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800587c:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <prvHeapInit+0xb4>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4a0a      	ldr	r2, [pc, #40]	@ (80058b4 <prvHeapInit+0xb8>)
 800588a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a09      	ldr	r2, [pc, #36]	@ (80058b8 <prvHeapInit+0xbc>)
 8005892:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005894:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <prvHeapInit+0xc0>)
 8005896:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800589a:	601a      	str	r2, [r3, #0]
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	2000059c 	.word	0x2000059c
 80058ac:	2000419c 	.word	0x2000419c
 80058b0:	200041a4 	.word	0x200041a4
 80058b4:	200041ac 	.word	0x200041ac
 80058b8:	200041a8 	.word	0x200041a8
 80058bc:	200041b8 	.word	0x200041b8

080058c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058c8:	4b28      	ldr	r3, [pc, #160]	@ (800596c <prvInsertBlockIntoFreeList+0xac>)
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e002      	b.n	80058d4 <prvInsertBlockIntoFreeList+0x14>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d8f7      	bhi.n	80058ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4413      	add	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d108      	bne.n	8005902 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	441a      	add	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	441a      	add	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d118      	bne.n	8005948 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	4b15      	ldr	r3, [pc, #84]	@ (8005970 <prvInsertBlockIntoFreeList+0xb0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d00d      	beq.n	800593e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	441a      	add	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e008      	b.n	8005950 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800593e:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <prvInsertBlockIntoFreeList+0xb0>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e003      	b.n	8005950 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d002      	beq.n	800595e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	2000419c 	.word	0x2000419c
 8005970:	200041a4 	.word	0x200041a4

08005974 <memset>:
 8005974:	4402      	add	r2, r0
 8005976:	4603      	mov	r3, r0
 8005978:	4293      	cmp	r3, r2
 800597a:	d100      	bne.n	800597e <memset+0xa>
 800597c:	4770      	bx	lr
 800597e:	f803 1b01 	strb.w	r1, [r3], #1
 8005982:	e7f9      	b.n	8005978 <memset+0x4>

08005984 <__libc_init_array>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4d0d      	ldr	r5, [pc, #52]	@ (80059bc <__libc_init_array+0x38>)
 8005988:	4c0d      	ldr	r4, [pc, #52]	@ (80059c0 <__libc_init_array+0x3c>)
 800598a:	1b64      	subs	r4, r4, r5
 800598c:	10a4      	asrs	r4, r4, #2
 800598e:	2600      	movs	r6, #0
 8005990:	42a6      	cmp	r6, r4
 8005992:	d109      	bne.n	80059a8 <__libc_init_array+0x24>
 8005994:	4d0b      	ldr	r5, [pc, #44]	@ (80059c4 <__libc_init_array+0x40>)
 8005996:	4c0c      	ldr	r4, [pc, #48]	@ (80059c8 <__libc_init_array+0x44>)
 8005998:	f000 f818 	bl	80059cc <_init>
 800599c:	1b64      	subs	r4, r4, r5
 800599e:	10a4      	asrs	r4, r4, #2
 80059a0:	2600      	movs	r6, #0
 80059a2:	42a6      	cmp	r6, r4
 80059a4:	d105      	bne.n	80059b2 <__libc_init_array+0x2e>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ac:	4798      	blx	r3
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7ee      	b.n	8005990 <__libc_init_array+0xc>
 80059b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b6:	4798      	blx	r3
 80059b8:	3601      	adds	r6, #1
 80059ba:	e7f2      	b.n	80059a2 <__libc_init_array+0x1e>
 80059bc:	08005ab8 	.word	0x08005ab8
 80059c0:	08005ab8 	.word	0x08005ab8
 80059c4:	08005ab8 	.word	0x08005ab8
 80059c8:	08005abc 	.word	0x08005abc

080059cc <_init>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	bf00      	nop
 80059d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d2:	bc08      	pop	{r3}
 80059d4:	469e      	mov	lr, r3
 80059d6:	4770      	bx	lr

080059d8 <_fini>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	bf00      	nop
 80059dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059de:	bc08      	pop	{r3}
 80059e0:	469e      	mov	lr, r3
 80059e2:	4770      	bx	lr
