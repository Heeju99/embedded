
250620_FND_TIM_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007b8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000950  08000950  00001950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800095c  0800095c  000020a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800095c  0800095c  000020a0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800095c  0800095c  000020a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800095c  0800095c  0000195c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000960  08000960  00001960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08000964  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  200000a0  08000a04  000020a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08000a04  000020e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001189  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000091b  00000000  00000000  00003259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00003b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ef  00000000  00000000  00003ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e203  00000000  00000000  00003dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002806  00000000  00000000  00011fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050226  00000000  00000000  000147e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00064a06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000358  00000000  00000000  00064a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00064da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000938 	.word	0x08000938

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	08000938 	.word	0x08000938

080001d8 <ap_main>:
Button_Handler_t hBtnOnOff;

enum {OFF, LEFT, RIGHT};

int ap_main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0

   uint8_t data = 1;
 80001de:	2301      	movs	r3, #1
 80001e0:	71fb      	strb	r3, [r7, #7]
   int led_state = OFF;
 80001e2:	2300      	movs	r3, #0
 80001e4:	603b      	str	r3, [r7, #0]
   FND_WriteData(1234);
 80001e6:	f240 40d2 	movw	r0, #1234	@ 0x4d2
 80001ea:	f000 f91b 	bl	8000424 <FND_WriteData>

   while(1)
   {
      FND_DisplayData();
 80001ee:	f000 f929 	bl	8000444 <FND_DisplayData>
      switch(led_state)
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	d03f      	beq.n	8000278 <ap_main+0xa0>
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	dc5f      	bgt.n	80002be <ap_main+0xe6>
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d003      	beq.n	800020c <ap_main+0x34>
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d015      	beq.n	8000236 <ap_main+0x5e>
 800020a:	e058      	b.n	80002be <ap_main+0xe6>
      {
      case OFF:
         if(Button_GetState(&hBtnLeft) == ACT_PUSHED){
 800020c:	482e      	ldr	r0, [pc, #184]	@ (80002c8 <ap_main+0xf0>)
 800020e:	f000 f8a0 	bl	8000352 <Button_GetState>
 8000212:	4603      	mov	r3, r0
 8000214:	2b01      	cmp	r3, #1
 8000216:	d102      	bne.n	800021e <ap_main+0x46>
            led_state = LEFT;
 8000218:	2301      	movs	r3, #1
 800021a:	603b      	str	r3, [r7, #0]
 800021c:	e007      	b.n	800022e <ap_main+0x56>
         }
         else if(Button_GetState(&hBtnRight) == ACT_PUSHED){
 800021e:	482b      	ldr	r0, [pc, #172]	@ (80002cc <ap_main+0xf4>)
 8000220:	f000 f897 	bl	8000352 <Button_GetState>
 8000224:	4603      	mov	r3, r0
 8000226:	2b01      	cmp	r3, #1
 8000228:	d101      	bne.n	800022e <ap_main+0x56>
            led_state = RIGHT;
 800022a:	2302      	movs	r3, #2
 800022c:	603b      	str	r3, [r7, #0]
         }
         LEDBar_Write(0);
 800022e:	2000      	movs	r0, #0
 8000230:	f000 faba 	bl	80007a8 <LEDBar_Write>
         break;
 8000234:	e043      	b.n	80002be <ap_main+0xe6>
      case LEFT:
         data = (data << 1) | (data >> 7);
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	b25a      	sxtb	r2, r3
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	09db      	lsrs	r3, r3, #7
 8000242:	b2db      	uxtb	r3, r3
 8000244:	b25b      	sxtb	r3, r3
 8000246:	4313      	orrs	r3, r2
 8000248:	b25b      	sxtb	r3, r3
 800024a:	71fb      	strb	r3, [r7, #7]
         if(Button_GetState(&hBtnOnOff) == ACT_PUSHED){
 800024c:	4820      	ldr	r0, [pc, #128]	@ (80002d0 <ap_main+0xf8>)
 800024e:	f000 f880 	bl	8000352 <Button_GetState>
 8000252:	4603      	mov	r3, r0
 8000254:	2b01      	cmp	r3, #1
 8000256:	d102      	bne.n	800025e <ap_main+0x86>
            led_state = OFF;
 8000258:	2300      	movs	r3, #0
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	e007      	b.n	800026e <ap_main+0x96>
         }
         else if(Button_GetState(&hBtnRight) == ACT_PUSHED){
 800025e:	481b      	ldr	r0, [pc, #108]	@ (80002cc <ap_main+0xf4>)
 8000260:	f000 f877 	bl	8000352 <Button_GetState>
 8000264:	4603      	mov	r3, r0
 8000266:	2b01      	cmp	r3, #1
 8000268:	d101      	bne.n	800026e <ap_main+0x96>
            led_state = RIGHT;
 800026a:	2302      	movs	r3, #2
 800026c:	603b      	str	r3, [r7, #0]
         }
         LEDBar_Write(data);
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fa99 	bl	80007a8 <LEDBar_Write>
         break;
 8000276:	e022      	b.n	80002be <ap_main+0xe6>
      case RIGHT:
         data = (data >> 1) | (data << 7);
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	085b      	lsrs	r3, r3, #1
 800027c:	b2db      	uxtb	r3, r3
 800027e:	b25a      	sxtb	r2, r3
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	01db      	lsls	r3, r3, #7
 8000286:	b25b      	sxtb	r3, r3
 8000288:	4313      	orrs	r3, r2
 800028a:	b25b      	sxtb	r3, r3
 800028c:	71fb      	strb	r3, [r7, #7]
         if(Button_GetState(&hBtnOnOff) == ACT_PUSHED){
 800028e:	4810      	ldr	r0, [pc, #64]	@ (80002d0 <ap_main+0xf8>)
 8000290:	f000 f85f 	bl	8000352 <Button_GetState>
 8000294:	4603      	mov	r3, r0
 8000296:	2b01      	cmp	r3, #1
 8000298:	d102      	bne.n	80002a0 <ap_main+0xc8>
            led_state = OFF;
 800029a:	2300      	movs	r3, #0
 800029c:	603b      	str	r3, [r7, #0]
 800029e:	e009      	b.n	80002b4 <ap_main+0xdc>
         }
         else if(Button_GetState(&hBtnLeft) == ACT_PUSHED){
 80002a0:	4809      	ldr	r0, [pc, #36]	@ (80002c8 <ap_main+0xf0>)
 80002a2:	f000 f856 	bl	8000352 <Button_GetState>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d103      	bne.n	80002b4 <ap_main+0xdc>
            data = 1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	71fb      	strb	r3, [r7, #7]
            led_state = LEFT;
 80002b0:	2301      	movs	r3, #1
 80002b2:	603b      	str	r3, [r7, #0]
         }
         LEDBar_Write(data);
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fa76 	bl	80007a8 <LEDBar_Write>
         break;
 80002bc:	bf00      	nop
      }
      delay(1);
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 fac6 	bl	8000850 <delay>
      FND_DisplayData();
 80002c4:	e793      	b.n	80001ee <ap_main+0x16>
 80002c6:	bf00      	nop
 80002c8:	200000bc 	.word	0x200000bc
 80002cc:	200000c8 	.word	0x200000c8
 80002d0:	200000d4 	.word	0x200000d4

080002d4 <ap_Init>:

   return 0;
}

void ap_Init()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
   SystemClock_Init();
 80002d8:	f000 fa9e 	bl	8000818 <SystemClock_Init>
   LedBar_Init();
 80002dc:	f000 fa32 	bl	8000744 <LedBar_Init>
   Button_Init(&hBtnLeft, GPIOB, 5);
 80002e0:	2205      	movs	r2, #5
 80002e2:	4909      	ldr	r1, [pc, #36]	@ (8000308 <ap_Init+0x34>)
 80002e4:	4809      	ldr	r0, [pc, #36]	@ (800030c <ap_Init+0x38>)
 80002e6:	f000 f819 	bl	800031c <Button_Init>
   Button_Init(&hBtnRight, GPIOB, 3);
 80002ea:	2203      	movs	r2, #3
 80002ec:	4906      	ldr	r1, [pc, #24]	@ (8000308 <ap_Init+0x34>)
 80002ee:	4808      	ldr	r0, [pc, #32]	@ (8000310 <ap_Init+0x3c>)
 80002f0:	f000 f814 	bl	800031c <Button_Init>
   Button_Init(&hBtnOnOff, GPIOA, 10);
 80002f4:	220a      	movs	r2, #10
 80002f6:	4907      	ldr	r1, [pc, #28]	@ (8000314 <ap_Init+0x40>)
 80002f8:	4807      	ldr	r0, [pc, #28]	@ (8000318 <ap_Init+0x44>)
 80002fa:	f000 f80f 	bl	800031c <Button_Init>
   FND_Init();
 80002fe:	f000 f859 	bl	80003b4 <FND_Init>
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40020400 	.word	0x40020400
 800030c:	200000bc 	.word	0x200000bc
 8000310:	200000c8 	.word	0x200000c8
 8000314:	40020000 	.word	0x40020000
 8000318:	200000d4 	.word	0x200000d4

0800031c <Button_Init>:
#include "Button.h"

enum {PUSHED = 0, RELEASED};

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint32_t pinNum)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
	hbtn->GPIOx = GPIOx;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	68ba      	ldr	r2, [r7, #8]
 800032c:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	605a      	str	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	2201      	movs	r2, #1
 8000338:	609a      	str	r2, [r3, #8]

	GPIO_Init(hbtn->GPIOx, hbtn->pinNum, INPUT);
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	6818      	ldr	r0, [r3, #0]
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	2201      	movs	r2, #1
 8000344:	4619      	mov	r1, r3
 8000346:	f000 f991 	bl	800066c <GPIO_Init>
}
 800034a:	bf00      	nop
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b084      	sub	sp, #16
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); //pushed = 0
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	4619      	mov	r1, r3
 8000364:	4610      	mov	r0, r2
 8000366:	f000 f9d6 	bl	8000716 <GPIO_ReadPin>
 800036a:	60f8      	str	r0, [r7, #12]

	if(hbtn->prevState == RELEASED && (curState == PUSHED)){ //1st button pushed
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d10a      	bne.n	800038a <Button_GetState+0x38>
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d107      	bne.n	800038a <Button_GetState+0x38>
		delay(2);  //debounce
 800037a:	2002      	movs	r0, #2
 800037c:	f000 fa68 	bl	8000850 <delay>
		hbtn->prevState = PUSHED; //state Update
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8000386:	2301      	movs	r3, #1
 8000388:	e00f      	b.n	80003aa <Button_GetState+0x58>
	}
	else if (hbtn->prevState == PUSHED && (curState == RELEASED)){ //1st button pushed
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d10a      	bne.n	80003a8 <Button_GetState+0x56>
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d107      	bne.n	80003a8 <Button_GetState+0x56>
		delay(2); //debounce
 8000398:	2002      	movs	r0, #2
 800039a:	f000 fa59 	bl	8000850 <delay>
		hbtn->prevState = RELEASED; //state Update
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2201      	movs	r2, #1
 80003a2:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 80003a4:	2302      	movs	r3, #2
 80003a6:	e000      	b.n	80003aa <Button_GetState+0x58>
	}

	return NO_ACT ;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <FND_Init>:
static void FND_DispOffALL();

static uint16_t fndDispNum = 0; // FND display main data(외부 파일에서 접근XXX)

void FND_Init()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
   for(int i=0; i<4; i++){
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	e00f      	b.n	80003e0 <FND_Init+0x2c>
      GPIO_Init(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, OUTPUT);
 80003c0:	4a16      	ldr	r2, [pc, #88]	@ (800041c <FND_Init+0x68>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80003c8:	4a14      	ldr	r2, [pc, #80]	@ (800041c <FND_Init+0x68>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	00db      	lsls	r3, r3, #3
 80003ce:	4413      	add	r3, r2
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	4619      	mov	r1, r3
 80003d6:	f000 f949 	bl	800066c <GPIO_Init>
   for(int i=0; i<4; i++){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3301      	adds	r3, #1
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b03      	cmp	r3, #3
 80003e4:	ddec      	ble.n	80003c0 <FND_Init+0xc>
   }
   for(int i=0; i<8; i++){
 80003e6:	2300      	movs	r3, #0
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	e00f      	b.n	800040c <FND_Init+0x58>
      GPIO_Init(fndPin[i].GPIOx, fndPin[i].pinNum, OUTPUT);
 80003ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000420 <FND_Init+0x6c>)
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80003f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000420 <FND_Init+0x6c>)
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4413      	add	r3, r2
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	4619      	mov	r1, r3
 8000402:	f000 f933 	bl	800066c <GPIO_Init>
   for(int i=0; i<8; i++){
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	3301      	adds	r3, #1
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	2b07      	cmp	r3, #7
 8000410:	ddec      	ble.n	80003ec <FND_Init+0x38>
   }
}
 8000412:	bf00      	nop
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000000 	.word	0x20000000
 8000420:	20000020 	.word	0x20000020

08000424 <FND_WriteData>:

// write fndDisNum
void FND_WriteData(uint16_t data)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	80fb      	strh	r3, [r7, #6]
   fndDispNum = data;
 800042e:	4a04      	ldr	r2, [pc, #16]	@ (8000440 <FND_WriteData+0x1c>)
 8000430:	88fb      	ldrh	r3, [r7, #6]
 8000432:	8013      	strh	r3, [r2, #0]
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	200000e0 	.word	0x200000e0

08000444 <FND_DisplayData>:
{
   return fndDispNum;
}
// display fndDisNum
void FND_DisplayData()
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
   static int digitPos = 0; // digit 자리 표현 변수
   // interrupt 발생하면 한 자리씩 출력한다.
   digitPos = (digitPos + 1) % 4; // 0~3까지 출력 반복
 8000448:	4b44      	ldr	r3, [pc, #272]	@ (800055c <FND_DisplayData+0x118>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	425a      	negs	r2, r3
 8000450:	f003 0303 	and.w	r3, r3, #3
 8000454:	f002 0203 	and.w	r2, r2, #3
 8000458:	bf58      	it	pl
 800045a:	4253      	negpl	r3, r2
 800045c:	4a3f      	ldr	r2, [pc, #252]	@ (800055c <FND_DisplayData+0x118>)
 800045e:	6013      	str	r3, [r2, #0]

   switch(digitPos)
 8000460:	4b3e      	ldr	r3, [pc, #248]	@ (800055c <FND_DisplayData+0x118>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b03      	cmp	r3, #3
 8000466:	d876      	bhi.n	8000556 <FND_DisplayData+0x112>
 8000468:	a201      	add	r2, pc, #4	@ (adr r2, 8000470 <FND_DisplayData+0x2c>)
 800046a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046e:	bf00      	nop
 8000470:	08000481 	.word	0x08000481
 8000474:	080004af 	.word	0x080004af
 8000478:	080004e7 	.word	0x080004e7
 800047c:	0800051f 	.word	0x0800051f
   {
   // 계속 켜져있으면 FND 켜져있을 때 데이터가 바뀌면서 잔상이 생긴다
   // -> FND를 끄고 데이터를 바꾸고 다시 킨다.
   case DIGIT_1:
      FND_DispOffALL();
 8000480:	f000 f88e 	bl	80005a0 <FND_DispOffALL>
      FND_DispDigit(fndDispNum%10);
 8000484:	4b36      	ldr	r3, [pc, #216]	@ (8000560 <FND_DisplayData+0x11c>)
 8000486:	881a      	ldrh	r2, [r3, #0]
 8000488:	4b36      	ldr	r3, [pc, #216]	@ (8000564 <FND_DisplayData+0x120>)
 800048a:	fba3 1302 	umull	r1, r3, r3, r2
 800048e:	08d9      	lsrs	r1, r3, #3
 8000490:	460b      	mov	r3, r1
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	440b      	add	r3, r1
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	b29b      	uxth	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f89f 	bl	80005e0 <FND_DispDigit>
      FND_DispOn(digitPos);
 80004a2:	4b2e      	ldr	r3, [pc, #184]	@ (800055c <FND_DisplayData+0x118>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f862 	bl	8000570 <FND_DispOn>
      break;
 80004ac:	e053      	b.n	8000556 <FND_DisplayData+0x112>
   case DIGIT_10:
      FND_DispOffALL();
 80004ae:	f000 f877 	bl	80005a0 <FND_DispOffALL>
      FND_DispDigit(fndDispNum/10%10);
 80004b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000560 <FND_DisplayData+0x11c>)
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000564 <FND_DisplayData+0x120>)
 80004b8:	fba2 2303 	umull	r2, r3, r2, r3
 80004bc:	08db      	lsrs	r3, r3, #3
 80004be:	b29a      	uxth	r2, r3
 80004c0:	4b28      	ldr	r3, [pc, #160]	@ (8000564 <FND_DisplayData+0x120>)
 80004c2:	fba3 1302 	umull	r1, r3, r3, r2
 80004c6:	08d9      	lsrs	r1, r3, #3
 80004c8:	460b      	mov	r3, r1
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	440b      	add	r3, r1
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f883 	bl	80005e0 <FND_DispDigit>
      FND_DispOn(digitPos);
 80004da:	4b20      	ldr	r3, [pc, #128]	@ (800055c <FND_DisplayData+0x118>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f846 	bl	8000570 <FND_DispOn>
      break;
 80004e4:	e037      	b.n	8000556 <FND_DisplayData+0x112>
   case DIGIT_100:
      FND_DispOffALL();
 80004e6:	f000 f85b 	bl	80005a0 <FND_DispOffALL>
      FND_DispDigit(fndDispNum/100%10);
 80004ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <FND_DisplayData+0x11c>)
 80004ec:	881b      	ldrh	r3, [r3, #0]
 80004ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000568 <FND_DisplayData+0x124>)
 80004f0:	fba2 2303 	umull	r2, r3, r2, r3
 80004f4:	095b      	lsrs	r3, r3, #5
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <FND_DisplayData+0x120>)
 80004fa:	fba3 1302 	umull	r1, r3, r3, r2
 80004fe:	08d9      	lsrs	r1, r3, #3
 8000500:	460b      	mov	r3, r1
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	440b      	add	r3, r1
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	b29b      	uxth	r3, r3
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f867 	bl	80005e0 <FND_DispDigit>
      FND_DispOn(digitPos);
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <FND_DisplayData+0x118>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f82a 	bl	8000570 <FND_DispOn>
      break;
 800051c:	e01b      	b.n	8000556 <FND_DisplayData+0x112>
   case DIGIT_1000:
      FND_DispOffALL();
 800051e:	f000 f83f 	bl	80005a0 <FND_DispOffALL>
      FND_DispDigit(fndDispNum/1000%10);
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <FND_DisplayData+0x11c>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	4a11      	ldr	r2, [pc, #68]	@ (800056c <FND_DisplayData+0x128>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	099b      	lsrs	r3, r3, #6
 800052e:	b29a      	uxth	r2, r3
 8000530:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <FND_DisplayData+0x120>)
 8000532:	fba3 1302 	umull	r1, r3, r3, r2
 8000536:	08d9      	lsrs	r1, r3, #3
 8000538:	460b      	mov	r3, r1
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	440b      	add	r3, r1
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	b29b      	uxth	r3, r3
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f84b 	bl	80005e0 <FND_DispDigit>
      FND_DispOn(digitPos);
 800054a:	4b04      	ldr	r3, [pc, #16]	@ (800055c <FND_DisplayData+0x118>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f80e 	bl	8000570 <FND_DispOn>
      break;
 8000554:	bf00      	nop
   }
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000e4 	.word	0x200000e4
 8000560:	200000e0 	.word	0x200000e0
 8000564:	cccccccd 	.word	0xcccccccd
 8000568:	51eb851f 	.word	0x51eb851f
 800056c:	10624dd3 	.word	0x10624dd3

08000570 <FND_DispOn>:
//   // GPIO_WritePin(GPIOx, PiNum, SET); - Cathode type(Anode type은 반대)
//   GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, PIN_SET);
//}

void FND_DispOn(int fndPos)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
   // GPIO_WritePin(GPIOx, PiNum, RESET); - Cathode type(Anode type은 반대)
      GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, PIN_RESET);
 8000578:	4a08      	ldr	r2, [pc, #32]	@ (800059c <FND_DispOn+0x2c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000580:	4a06      	ldr	r2, [pc, #24]	@ (800059c <FND_DispOn+0x2c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	4413      	add	r3, r2
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	f000 f89e 	bl	80006ce <GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <FND_DispOffALL>:

void FND_DispOffALL()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
   for(int i=0; i<4; i++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	e00f      	b.n	80005cc <FND_DispOffALL+0x2c>
      GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, PIN_SET);
 80005ac:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <FND_DispOffALL+0x3c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005b4:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <FND_DispOffALL+0x3c>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	4413      	add	r3, r2
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	2201      	movs	r2, #1
 80005c0:	4619      	mov	r1, r3
 80005c2:	f000 f884 	bl	80006ce <GPIO_WritePin>
   for(int i=0; i<4; i++){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3301      	adds	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	ddec      	ble.n	80005ac <FND_DispOffALL+0xc>
   }
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000000 	.word	0x20000000

080005e0 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
   const uint8_t segFont[10] = {
 80005ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000664 <FND_DispDigit+0x84>)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f2:	c303      	stmia	r3!, {r0, r1}
 80005f4:	801a      	strh	r2, [r3, #0]
         0x7D, // 6
         0x07, // 7
         0x7F, // 8
         0x6F  // 9
   };
   for(int i=0; i<8; i++){
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e02a      	b.n	8000652 <FND_DispDigit+0x72>
      if(!(segFont[digit] & (1<<i))){
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	3318      	adds	r3, #24
 8000600:	443b      	add	r3, r7
 8000602:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000606:	461a      	mov	r2, r3
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	fa42 f303 	asr.w	r3, r2, r3
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	2b00      	cmp	r3, #0
 8000614:	d10d      	bne.n	8000632 <FND_DispDigit+0x52>
         GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, PIN_RESET);    // data = 0 -> offCathode type(Anode type은 반대)
 8000616:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <FND_DispDigit+0x88>)
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800061e:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <FND_DispDigit+0x88>)
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	4413      	add	r3, r2
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	4619      	mov	r1, r3
 800062c:	f000 f84f 	bl	80006ce <GPIO_WritePin>
 8000630:	e00c      	b.n	800064c <FND_DispDigit+0x6c>
      }
      else{
         GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, PIN_SET);      // data = 1 -> onCathode type(Anode type은 반대)
 8000632:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <FND_DispDigit+0x88>)
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800063a:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <FND_DispDigit+0x88>)
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	4413      	add	r3, r2
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	2201      	movs	r2, #1
 8000646:	4619      	mov	r1, r3
 8000648:	f000 f841 	bl	80006ce <GPIO_WritePin>
   for(int i=0; i<8; i++){
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b07      	cmp	r3, #7
 8000656:	ddd1      	ble.n	80005fc <FND_DispDigit+0x1c>
      }
   }
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08000950 	.word	0x08000950
 8000668:	20000020 	.word	0x20000020

0800066c <GPIO_Init>:
#include "GPIO.h"

void GPIO_Init(GPIO_TypeDef *GPIOx, uint32_t pinNum, pin_mode_t pinMode)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	4613      	mov	r3, r2
 8000678:	71fb      	strb	r3, [r7, #7]
   if(pinMode == OUTPUT) {
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d115      	bne.n	80006ac <GPIO_Init+0x40>
      GPIOx->MODER |= (0x01U << (pinNum*2));
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2101      	movs	r1, #1
 800068a:	fa01 f303 	lsl.w	r3, r1, r3
 800068e:	431a      	orrs	r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	601a      	str	r2, [r3, #0]
      GPIOx->MODER &= ~(0x02U << (pinNum*2));
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	2102      	movs	r1, #2
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	401a      	ands	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	601a      	str	r2, [r3, #0]
   }
   else {
      GPIOx->MODER &= ~(0x03U << (pinNum*2));
   }
}
 80006aa:	e00a      	b.n	80006c2 <GPIO_Init+0x56>
      GPIOx->MODER &= ~(0x03U << (pinNum*2));
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	2103      	movs	r1, #3
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	43db      	mvns	r3, r3
 80006bc:	401a      	ands	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	601a      	str	r2, [r3, #0]
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t pinNum, pin_state_t pinState)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b085      	sub	sp, #20
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	4613      	mov	r3, r2
 80006da:	71fb      	strb	r3, [r7, #7]
   if(pinState == PIN_SET){
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d109      	bne.n	80006f6 <GPIO_WritePin+0x28>
      GPIOx->ODR |= (1U<<pinNum);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	695a      	ldr	r2, [r3, #20]
 80006e6:	2101      	movs	r1, #1
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	431a      	orrs	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	615a      	str	r2, [r3, #20]
   }
   else {
      GPIOx->ODR &= ~(1U<<pinNum);
   }
}
 80006f4:	e009      	b.n	800070a <GPIO_WritePin+0x3c>
      GPIOx->ODR &= ~(1U<<pinNum);
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	695a      	ldr	r2, [r3, #20]
 80006fa:	2101      	movs	r1, #1
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	43db      	mvns	r3, r3
 8000704:	401a      	ands	r2, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	615a      	str	r2, [r3, #20]
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <GPIO_ReadPin>:

uint32_t GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t pinNum)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
   return ((GPIOx->IDR & (1U<<pinNum)) ? 1: 0);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	691a      	ldr	r2, [r3, #16]
 8000724:	2101      	movs	r1, #1
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	fa01 f303 	lsl.w	r3, r1, r3
 800072c:	4013      	ands	r3, r2
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf14      	ite	ne
 8000732:	2301      	movne	r3, #1
 8000734:	2300      	moveq	r3, #0
 8000736:	b2db      	uxtb	r3, r3
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <LedBar_Init>:
		{GPIOC, 2},
		{GPIOC, 3}
};

void LedBar_Init()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	GPIO_Init(GPIOA,0,OUTPUT);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	4813      	ldr	r0, [pc, #76]	@ (800079c <LedBar_Init+0x58>)
 800074e:	f7ff ff8d 	bl	800066c <GPIO_Init>
	GPIO_Init(GPIOA,1,OUTPUT);
 8000752:	2200      	movs	r2, #0
 8000754:	2101      	movs	r1, #1
 8000756:	4811      	ldr	r0, [pc, #68]	@ (800079c <LedBar_Init+0x58>)
 8000758:	f7ff ff88 	bl	800066c <GPIO_Init>
	GPIO_Init(GPIOA,4,OUTPUT);
 800075c:	2200      	movs	r2, #0
 800075e:	2104      	movs	r1, #4
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <LedBar_Init+0x58>)
 8000762:	f7ff ff83 	bl	800066c <GPIO_Init>
	GPIO_Init(GPIOB,0,OUTPUT);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <LedBar_Init+0x5c>)
 800076c:	f7ff ff7e 	bl	800066c <GPIO_Init>
	GPIO_Init(GPIOC,1,OUTPUT);
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <LedBar_Init+0x60>)
 8000776:	f7ff ff79 	bl	800066c <GPIO_Init>
	GPIO_Init(GPIOC,0,OUTPUT);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	4809      	ldr	r0, [pc, #36]	@ (80007a4 <LedBar_Init+0x60>)
 8000780:	f7ff ff74 	bl	800066c <GPIO_Init>
	GPIO_Init(GPIOC,2,OUTPUT);
 8000784:	2200      	movs	r2, #0
 8000786:	2102      	movs	r1, #2
 8000788:	4806      	ldr	r0, [pc, #24]	@ (80007a4 <LedBar_Init+0x60>)
 800078a:	f7ff ff6f 	bl	800066c <GPIO_Init>
	GPIO_Init(GPIOC,3,OUTPUT);
 800078e:	2200      	movs	r2, #0
 8000790:	2103      	movs	r1, #3
 8000792:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <LedBar_Init+0x60>)
 8000794:	f7ff ff6a 	bl	800066c <GPIO_Init>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020800 	.word	0x40020800

080007a8 <LEDBar_Write>:

void LEDBar_Write(uint8_t data)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++){
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e025      	b.n	8000804 <LEDBar_Write+0x5c>
		if((data & (1<<i)) == 0){
 80007b8:	79fa      	ldrb	r2, [r7, #7]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	fa42 f303 	asr.w	r3, r2, r3
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10d      	bne.n	80007e4 <LEDBar_Write+0x3c>
			GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, PIN_RESET);
 80007c8:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <LEDBar_Write+0x6c>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007d0:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <LEDBar_Write+0x6c>)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	4413      	add	r3, r2
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	4619      	mov	r1, r3
 80007de:	f7ff ff76 	bl	80006ce <GPIO_WritePin>
 80007e2:	e00c      	b.n	80007fe <LEDBar_Write+0x56>
		} else {
			GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, PIN_SET);
 80007e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000814 <LEDBar_Write+0x6c>)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007ec:	4a09      	ldr	r2, [pc, #36]	@ (8000814 <LEDBar_Write+0x6c>)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4413      	add	r3, r2
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	4619      	mov	r1, r3
 80007fa:	f7ff ff68 	bl	80006ce <GPIO_WritePin>
	for(int i = 0; i < 8; i++){
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	3301      	adds	r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b07      	cmp	r3, #7
 8000808:	ddd6      	ble.n	80007b8 <LEDBar_Write+0x10>
		}
	}
}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000060 	.word	0x20000060

08000818 <SystemClock_Init>:
#include "SystemClock.h"

void SystemClock_Init()
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800081c:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <SystemClock_Init+0x34>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000820:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <SystemClock_Init+0x34>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <SystemClock_Init+0x34>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082c:	4a07      	ldr	r2, [pc, #28]	@ (800084c <SystemClock_Init+0x34>)
 800082e:	f043 0302 	orr.w	r3, r3, #2
 8000832:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <SystemClock_Init+0x34>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000838:	4a04      	ldr	r2, [pc, #16]	@ (800084c <SystemClock_Init+0x34>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <delay>:

void delay(int loop)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	for (int j = 0; j< loop; j++){
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e00c      	b.n	8000878 <delay+0x28>
		for (volatile int i = 0; i < 1000; i++){}
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	e002      	b.n	800086a <delay+0x1a>
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	3301      	adds	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000870:	dbf8      	blt.n	8000864 <delay+0x14>
	for (int j = 0; j< loop; j++){
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	dbee      	blt.n	800085e <delay+0xe>
	}
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <main>:

#include <stdint.h>
#include "ap_main.h"

int main(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
	ap_Init();
 8000892:	f7ff fd1f 	bl	80002d4 <ap_Init>
	while(1)
	{
		ap_main();
 8000896:	f7ff fc9f 	bl	80001d8 <ap_main>
 800089a:	e7fc      	b.n	8000896 <main+0x8>

0800089c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800089c:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800089e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	@ (80008dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <LoopForever+0xe>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	@ (80008e8 <LoopForever+0x16>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ca:	f000 f811 	bl	80008f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ce:	f7ff ffde 	bl	800088e <main>

080008d2 <LoopForever>:

LoopForever:
  b LoopForever
 80008d2:	e7fe      	b.n	80008d2 <LoopForever>
  ldr   r0, =_estack
 80008d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80008e0:	08000964 	.word	0x08000964
  ldr r2, =_sbss
 80008e4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80008e8:	200000e8 	.word	0x200000e8

080008ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC_IRQHandler>
	...

080008f0 <__libc_init_array>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000928 <__libc_init_array+0x38>)
 80008f4:	4c0d      	ldr	r4, [pc, #52]	@ (800092c <__libc_init_array+0x3c>)
 80008f6:	1b64      	subs	r4, r4, r5
 80008f8:	10a4      	asrs	r4, r4, #2
 80008fa:	2600      	movs	r6, #0
 80008fc:	42a6      	cmp	r6, r4
 80008fe:	d109      	bne.n	8000914 <__libc_init_array+0x24>
 8000900:	4d0b      	ldr	r5, [pc, #44]	@ (8000930 <__libc_init_array+0x40>)
 8000902:	4c0c      	ldr	r4, [pc, #48]	@ (8000934 <__libc_init_array+0x44>)
 8000904:	f000 f818 	bl	8000938 <_init>
 8000908:	1b64      	subs	r4, r4, r5
 800090a:	10a4      	asrs	r4, r4, #2
 800090c:	2600      	movs	r6, #0
 800090e:	42a6      	cmp	r6, r4
 8000910:	d105      	bne.n	800091e <__libc_init_array+0x2e>
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f855 3b04 	ldr.w	r3, [r5], #4
 8000918:	4798      	blx	r3
 800091a:	3601      	adds	r6, #1
 800091c:	e7ee      	b.n	80008fc <__libc_init_array+0xc>
 800091e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000922:	4798      	blx	r3
 8000924:	3601      	adds	r6, #1
 8000926:	e7f2      	b.n	800090e <__libc_init_array+0x1e>
 8000928:	0800095c 	.word	0x0800095c
 800092c:	0800095c 	.word	0x0800095c
 8000930:	0800095c 	.word	0x0800095c
 8000934:	08000960 	.word	0x08000960

08000938 <_init>:
 8000938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093a:	bf00      	nop
 800093c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800093e:	bc08      	pop	{r3}
 8000940:	469e      	mov	lr, r3
 8000942:	4770      	bx	lr

08000944 <_fini>:
 8000944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000946:	bf00      	nop
 8000948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800094a:	bc08      	pop	{r3}
 800094c:	469e      	mov	lr, r3
 800094e:	4770      	bx	lr
