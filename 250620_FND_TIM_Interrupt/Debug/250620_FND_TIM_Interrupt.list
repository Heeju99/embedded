
250620_FND_TIM_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b74  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000d0c  08000d0c  00001d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d24  08000d24  00002068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000d24  08000d24  00002068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000d24  08000d24  00002068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d24  08000d24  00001d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d28  08000d28  00001d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08000d2c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000068  08000d94  00002068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08000d94  000020b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bf6  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b6b  00000000  00000000  00003c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00004800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000016f  00000000  00000000  00004a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e3db  00000000  00000000  00004b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000351b  00000000  00000000  00012f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000507ef  00000000  00000000  0001648d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000600  00000000  00000000  00066cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000672c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000cf4 	.word	0x08000cf4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08000cf4 	.word	0x08000cf4

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <TIM2_IRQHandler>:

enum {WATCH, ST_STOP, ST_RUN, ST_CLEAR};


void TIM2_IRQHandler()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	incTick();
 8000218:	f000 fc4a 	bl	8000ab0 <incTick>
	FND_DisplayData();
 800021c:	f000 fa1c 	bl	8000658 <FND_DisplayData>
	TIM_ClearUIFlag(TIM2); //flag clear
 8000220:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000224:	f000 fcff 	bl	8000c26 <TIM_ClearUIFlag>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}

0800022c <ap_main>:

int ap_main()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b08c      	sub	sp, #48	@ 0x30
 8000230:	af00      	add	r7, sp, #0

	uint32_t dot_data;
	uint32_t dot_data1;
   uint8_t data = 1;
 8000232:	2301      	movs	r3, #1
 8000234:	71fb      	strb	r3, [r7, #7]
   uint16_t counter = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	84fb      	strh	r3, [r7, #38]	@ 0x26
   uint16_t start_counter = 1200;
 800023a:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800023e:	84bb      	strh	r3, [r7, #36]	@ 0x24
   int state = WATCH;
 8000240:	2300      	movs	r3, #0
 8000242:	623b      	str	r3, [r7, #32]
   uint32_t prevCounterTime = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	61fb      	str	r3, [r7, #28]
   uint32_t prevBlinkTime = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
   uint32_t flag = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	617b      	str	r3, [r7, #20]
   uint32_t msec = 0;
 8000250:	2300      	movs	r3, #0
 8000252:	613b      	str	r3, [r7, #16]
   uint32_t sec = 0;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
   uint32_t min = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	60bb      	str	r3, [r7, #8]
   uint32_t hourminsec = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	603b      	str	r3, [r7, #0]
   {
	   //if(getTick() - prevCounterTime >= 1000){ //0.1초
	   //prevCounterTime = getTick();
	   //FND_WriteData(counter++);
	   //}
	   switch(state){
 8000260:	6a3b      	ldr	r3, [r7, #32]
 8000262:	2b03      	cmp	r3, #3
 8000264:	d8fc      	bhi.n	8000260 <ap_main+0x34>
 8000266:	a201      	add	r2, pc, #4	@ (adr r2, 800026c <ap_main+0x40>)
 8000268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800026c:	0800027d 	.word	0x0800027d
 8000270:	080002fd 	.word	0x080002fd
 8000274:	08000371 	.word	0x08000371
 8000278:	0800043b 	.word	0x0800043b

	   case WATCH :
		   if(getTick() - prevBlinkTime >= 500){ //1초
 800027c:	f000 fc26 	bl	8000acc <getTick>
 8000280:	4602      	mov	r2, r0
 8000282:	69bb      	ldr	r3, [r7, #24]
 8000284:	1ad3      	subs	r3, r2, r3
 8000286:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800028a:	d30e      	bcc.n	80002aa <ap_main+0x7e>
			   prevBlinkTime = getTick();
 800028c:	f000 fc1e 	bl	8000acc <getTick>
 8000290:	61b8      	str	r0, [r7, #24]
			   flag ^= 1;
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	f083 0301 	eor.w	r3, r3, #1
 8000298:	617b      	str	r3, [r7, #20]
			   if(flag == 1){
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d102      	bne.n	80002a6 <ap_main+0x7a>
				   dot_data = 0x80;
 80002a0:	2380      	movs	r3, #128	@ 0x80
 80002a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80002a4:	e001      	b.n	80002aa <ap_main+0x7e>
			   } else{
				   dot_data = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			   }
		   }
		   FND_Dot(0, 0, dot_data, 0);
 80002aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	2300      	movs	r3, #0
 80002b0:	2100      	movs	r1, #0
 80002b2:	2000      	movs	r0, #0
 80002b4:	f000 fa7a 	bl	80007ac <FND_Dot>
		   FND_WriteData(start_counter);
 80002b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f9bc 	bl	8000638 <FND_WriteData>

		   if(getTick() - prevCounterTime >= 60000){ //1분
 80002c0:	f000 fc04 	bl	8000acc <getTick>
 80002c4:	4602      	mov	r2, r0
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d905      	bls.n	80002de <ap_main+0xb2>
			   prevCounterTime = getTick();
 80002d2:	f000 fbfb 	bl	8000acc <getTick>
 80002d6:	61f8      	str	r0, [r7, #28]
			   start_counter++;
 80002d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80002da:	3301      	adds	r3, #1
 80002dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			   //FND_WriteData(start_counter++);
		   }

			if(Button_GetState(&hBtnMode) == ACT_PUSHED){
 80002de:	4876      	ldr	r0, [pc, #472]	@ (80004b8 <ap_main+0x28c>)
 80002e0:	f000 f941 	bl	8000566 <Button_GetState>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	f040 80dd 	bne.w	80004a6 <ap_main+0x27a>
				state = ST_STOP;
 80002ec:	2301      	movs	r3, #1
 80002ee:	623b      	str	r3, [r7, #32]
				FND_WriteData(0);
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 f9a1 	bl	8000638 <FND_WriteData>
				counter = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
			}
		   break;
 80002fa:	e0d4      	b.n	80004a6 <ap_main+0x27a>

	   case ST_STOP:
		   if(getTick() - prevBlinkTime >= 50){ //0.5초
 80002fc:	f000 fbe6 	bl	8000acc <getTick>
 8000300:	4602      	mov	r2, r0
 8000302:	69bb      	ldr	r3, [r7, #24]
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	2b31      	cmp	r3, #49	@ 0x31
 8000308:	d90e      	bls.n	8000328 <ap_main+0xfc>
			   prevBlinkTime = getTick();
 800030a:	f000 fbdf 	bl	8000acc <getTick>
 800030e:	61b8      	str	r0, [r7, #24]
			   flag ^= 1;
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	f083 0301 	eor.w	r3, r3, #1
 8000316:	617b      	str	r3, [r7, #20]
			   if(flag == 1){
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d102      	bne.n	8000324 <ap_main+0xf8>
				   dot_data1 = 0x80;
 800031e:	2380      	movs	r3, #128	@ 0x80
 8000320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000322:	e001      	b.n	8000328 <ap_main+0xfc>
			   } else{
				   dot_data1 = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	62bb      	str	r3, [r7, #40]	@ 0x28
			   }
		   }
		   FND_Dot(0, dot_data1, 0, dot_data1);
 8000328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800032a:	b2d9      	uxtb	r1, r3
 800032c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2200      	movs	r2, #0
 8000332:	2000      	movs	r0, #0
 8000334:	f000 fa3a 	bl	80007ac <FND_Dot>

		    counter = counter;
			if(Button_GetState(&hBtnMode) == ACT_PUSHED){
 8000338:	485f      	ldr	r0, [pc, #380]	@ (80004b8 <ap_main+0x28c>)
 800033a:	f000 f914 	bl	8000566 <Button_GetState>
 800033e:	4603      	mov	r3, r0
 8000340:	2b01      	cmp	r3, #1
 8000342:	d102      	bne.n	800034a <ap_main+0x11e>
				state = WATCH;
 8000344:	2300      	movs	r3, #0
 8000346:	623b      	str	r3, [r7, #32]
				state = ST_RUN;
			}
			else if(Button_GetState(&hBtnClear) == ACT_PUSHED){
				state = ST_CLEAR;
			}
		   break;
 8000348:	e0af      	b.n	80004aa <ap_main+0x27e>
			else if(Button_GetState(&hBtnRun) == ACT_PUSHED){
 800034a:	485c      	ldr	r0, [pc, #368]	@ (80004bc <ap_main+0x290>)
 800034c:	f000 f90b 	bl	8000566 <Button_GetState>
 8000350:	4603      	mov	r3, r0
 8000352:	2b01      	cmp	r3, #1
 8000354:	d102      	bne.n	800035c <ap_main+0x130>
				state = ST_RUN;
 8000356:	2302      	movs	r3, #2
 8000358:	623b      	str	r3, [r7, #32]
		   break;
 800035a:	e0a6      	b.n	80004aa <ap_main+0x27e>
			else if(Button_GetState(&hBtnClear) == ACT_PUSHED){
 800035c:	4858      	ldr	r0, [pc, #352]	@ (80004c0 <ap_main+0x294>)
 800035e:	f000 f902 	bl	8000566 <Button_GetState>
 8000362:	4603      	mov	r3, r0
 8000364:	2b01      	cmp	r3, #1
 8000366:	f040 80a0 	bne.w	80004aa <ap_main+0x27e>
				state = ST_CLEAR;
 800036a:	2303      	movs	r3, #3
 800036c:	623b      	str	r3, [r7, #32]
		   break;
 800036e:	e09c      	b.n	80004aa <ap_main+0x27e>

	   case ST_RUN:

		   if(getTick() - prevBlinkTime >= 50){ //0.5초
 8000370:	f000 fbac 	bl	8000acc <getTick>
 8000374:	4602      	mov	r2, r0
 8000376:	69bb      	ldr	r3, [r7, #24]
 8000378:	1ad3      	subs	r3, r2, r3
 800037a:	2b31      	cmp	r3, #49	@ 0x31
 800037c:	d90e      	bls.n	800039c <ap_main+0x170>
			   prevBlinkTime = getTick();
 800037e:	f000 fba5 	bl	8000acc <getTick>
 8000382:	61b8      	str	r0, [r7, #24]
			   flag ^= 1;
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	f083 0301 	eor.w	r3, r3, #1
 800038a:	617b      	str	r3, [r7, #20]
			   if(flag == 1){
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d102      	bne.n	8000398 <ap_main+0x16c>
				   dot_data1 = 0x80;
 8000392:	2380      	movs	r3, #128	@ 0x80
 8000394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000396:	e001      	b.n	800039c <ap_main+0x170>
			   } else{
				   dot_data1 = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	62bb      	str	r3, [r7, #40]	@ 0x28
			   }
		   }
		   FND_Dot(0, dot_data1, 0, dot_data1);
 800039c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800039e:	b2d9      	uxtb	r1, r3
 80003a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	2200      	movs	r2, #0
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fa00 	bl	80007ac <FND_Dot>

		    if (getTick() - prevCounterTime >= 100) { // 0.1초
 80003ac:	f000 fb8e 	bl	8000acc <getTick>
 80003b0:	4602      	mov	r2, r0
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	1ad3      	subs	r3, r2, r3
 80003b6:	2b63      	cmp	r3, #99	@ 0x63
 80003b8:	d91a      	bls.n	80003f0 <ap_main+0x1c4>
		        prevCounterTime = getTick();
 80003ba:	f000 fb87 	bl	8000acc <getTick>
 80003be:	61f8      	str	r0, [r7, #28]
		        msec ++;
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	3301      	adds	r3, #1
 80003c4:	613b      	str	r3, [r7, #16]
		        if(msec == 10){
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	2b0a      	cmp	r3, #10
 80003ca:	d111      	bne.n	80003f0 <ap_main+0x1c4>
		        	msec = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
		        	sec += 1;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	3301      	adds	r3, #1
 80003d4:	60fb      	str	r3, [r7, #12]
					if(sec == 60){
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	2b3c      	cmp	r3, #60	@ 0x3c
 80003da:	d109      	bne.n	80003f0 <ap_main+0x1c4>
						sec = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
						min += 1;
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	3301      	adds	r3, #1
 80003e4:	60bb      	str	r3, [r7, #8]
						if(min == 10){
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	2b0a      	cmp	r3, #10
 80003ea:	d101      	bne.n	80003f0 <ap_main+0x1c4>
							min = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60bb      	str	r3, [r7, #8]
					}

		        }
		    }

		    hourminsec = (min * 1000) + (sec * 10) + msec;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003f6:	fb02 f103 	mul.w	r1, r2, r3
 80003fa:	68fa      	ldr	r2, [r7, #12]
 80003fc:	4613      	mov	r3, r2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	4413      	add	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	440b      	add	r3, r1
 8000406:	693a      	ldr	r2, [r7, #16]
 8000408:	4413      	add	r3, r2
 800040a:	603b      	str	r3, [r7, #0]
		    FND_WriteData(hourminsec);
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	b29b      	uxth	r3, r3
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f911 	bl	8000638 <FND_WriteData>

			if(Button_GetState(&hBtnMode) == ACT_PUSHED){
 8000416:	4828      	ldr	r0, [pc, #160]	@ (80004b8 <ap_main+0x28c>)
 8000418:	f000 f8a5 	bl	8000566 <Button_GetState>
 800041c:	4603      	mov	r3, r0
 800041e:	2b01      	cmp	r3, #1
 8000420:	d102      	bne.n	8000428 <ap_main+0x1fc>
				state = WATCH;
 8000422:	2300      	movs	r3, #0
 8000424:	623b      	str	r3, [r7, #32]
			}
			else if(Button_GetState(&hBtnRun) == ACT_PUSHED){
				state = ST_STOP;
			}
		   break;
 8000426:	e042      	b.n	80004ae <ap_main+0x282>
			else if(Button_GetState(&hBtnRun) == ACT_PUSHED){
 8000428:	4824      	ldr	r0, [pc, #144]	@ (80004bc <ap_main+0x290>)
 800042a:	f000 f89c 	bl	8000566 <Button_GetState>
 800042e:	4603      	mov	r3, r0
 8000430:	2b01      	cmp	r3, #1
 8000432:	d13c      	bne.n	80004ae <ap_main+0x282>
				state = ST_STOP;
 8000434:	2301      	movs	r3, #1
 8000436:	623b      	str	r3, [r7, #32]
		   break;
 8000438:	e039      	b.n	80004ae <ap_main+0x282>

	   case ST_CLEAR:

		   if(getTick() - prevBlinkTime >= 50){ //0.05초
 800043a:	f000 fb47 	bl	8000acc <getTick>
 800043e:	4602      	mov	r2, r0
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	1ad3      	subs	r3, r2, r3
 8000444:	2b31      	cmp	r3, #49	@ 0x31
 8000446:	d90e      	bls.n	8000466 <ap_main+0x23a>
			   prevBlinkTime = getTick();
 8000448:	f000 fb40 	bl	8000acc <getTick>
 800044c:	61b8      	str	r0, [r7, #24]
			   flag ^= 1;
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	f083 0301 	eor.w	r3, r3, #1
 8000454:	617b      	str	r3, [r7, #20]
			   if(flag == 1){
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d102      	bne.n	8000462 <ap_main+0x236>
				   dot_data1 = 0x80;
 800045c:	2380      	movs	r3, #128	@ 0x80
 800045e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000460:	e001      	b.n	8000466 <ap_main+0x23a>
			   } else{
				   dot_data1 = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	62bb      	str	r3, [r7, #40]	@ 0x28
			   }
		   }
		   FND_Dot(0, dot_data1, 0, dot_data1);
 8000466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000468:	b2d9      	uxtb	r1, r3
 800046a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2200      	movs	r2, #0
 8000470:	2000      	movs	r0, #0
 8000472:	f000 f99b 	bl	80007ac <FND_Dot>

		   counter = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	84fb      	strh	r3, [r7, #38]	@ 0x26
		    FND_WriteData(counter);
 800047a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800047c:	4618      	mov	r0, r3
 800047e:	f000 f8db 	bl	8000638 <FND_WriteData>
			if(Button_GetState(&hBtnMode) == ACT_PUSHED){
 8000482:	480d      	ldr	r0, [pc, #52]	@ (80004b8 <ap_main+0x28c>)
 8000484:	f000 f86f 	bl	8000566 <Button_GetState>
 8000488:	4603      	mov	r3, r0
 800048a:	2b01      	cmp	r3, #1
 800048c:	d102      	bne.n	8000494 <ap_main+0x268>
				state = WATCH;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
			}
			else if(Button_GetState(&hBtnRun) == ACT_PUSHED){
				state = ST_STOP;
			}

		   break;
 8000492:	e00e      	b.n	80004b2 <ap_main+0x286>
			else if(Button_GetState(&hBtnRun) == ACT_PUSHED){
 8000494:	4809      	ldr	r0, [pc, #36]	@ (80004bc <ap_main+0x290>)
 8000496:	f000 f866 	bl	8000566 <Button_GetState>
 800049a:	4603      	mov	r3, r0
 800049c:	2b01      	cmp	r3, #1
 800049e:	d108      	bne.n	80004b2 <ap_main+0x286>
				state = ST_STOP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	623b      	str	r3, [r7, #32]
		   break;
 80004a4:	e005      	b.n	80004b2 <ap_main+0x286>
		   break;
 80004a6:	bf00      	nop
 80004a8:	e6da      	b.n	8000260 <ap_main+0x34>
		   break;
 80004aa:	bf00      	nop
 80004ac:	e6d8      	b.n	8000260 <ap_main+0x34>
		   break;
 80004ae:	bf00      	nop
 80004b0:	e6d6      	b.n	8000260 <ap_main+0x34>
		   break;
 80004b2:	bf00      	nop
 80004b4:	e6d4      	b.n	8000260 <ap_main+0x34>
 80004b6:	bf00      	nop
 80004b8:	20000084 	.word	0x20000084
 80004bc:	20000090 	.word	0x20000090
 80004c0:	2000009c 	.word	0x2000009c

080004c4 <ap_Init>:
   }
   return 0;
}

void ap_Init()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
   SystemClock_Init();
 80004c8:	f000 fb0c 	bl	8000ae4 <SystemClock_Init>
   LedBar_Init();
 80004cc:	f000 fabe 	bl	8000a4c <LedBar_Init>
   Button_Init(&hBtnMode, GPIOB, 5);
 80004d0:	2205      	movs	r2, #5
 80004d2:	4912      	ldr	r1, [pc, #72]	@ (800051c <ap_Init+0x58>)
 80004d4:	4812      	ldr	r0, [pc, #72]	@ (8000520 <ap_Init+0x5c>)
 80004d6:	f000 f82b 	bl	8000530 <Button_Init>
   Button_Init(&hBtnRun, GPIOB, 3);
 80004da:	2203      	movs	r2, #3
 80004dc:	490f      	ldr	r1, [pc, #60]	@ (800051c <ap_Init+0x58>)
 80004de:	4811      	ldr	r0, [pc, #68]	@ (8000524 <ap_Init+0x60>)
 80004e0:	f000 f826 	bl	8000530 <Button_Init>
   Button_Init(&hBtnClear, GPIOA, 10);
 80004e4:	220a      	movs	r2, #10
 80004e6:	4910      	ldr	r1, [pc, #64]	@ (8000528 <ap_Init+0x64>)
 80004e8:	4810      	ldr	r0, [pc, #64]	@ (800052c <ap_Init+0x68>)
 80004ea:	f000 f821 	bl	8000530 <Button_Init>
   FND_Init();
 80004ee:	f000 f86b 	bl	80005c8 <FND_Init>
   TIM_Init(TIM2, 16-1,1000-1); //100MHz를 분주하기 위해 psc =16, arr = 1000으로 설정  -> 1ms
 80004f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004f6:	210f      	movs	r1, #15
 80004f8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004fc:	f000 fb33 	bl	8000b66 <TIM_Init>
   TIM_CntStart(TIM2);
 8000500:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000504:	f000 fb45 	bl	8000b92 <TIM_CntStart>
   TIM_UInterEnable(TIM2);  //Interrupt 용, 내부적으로 Count값 증가
 8000508:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800050c:	f000 fb51 	bl	8000bb2 <TIM_UInterEnable>
   NVIC_EnableIRQ(TIM2_IRQn); //TIM2를 등록하여 사용
 8000510:	201c      	movs	r0, #28
 8000512:	f7ff fe61 	bl	80001d8 <__NVIC_EnableIRQ>

   //TIMER 5번은 Interrupt없이 Tick 세기 위해 사용
  // TIM_Init(TIM5, 16000-1,0xffffffff);
   //SysTick_Init(TIM5);
   //SysTick_Start();
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400
 8000520:	20000084 	.word	0x20000084
 8000524:	20000090 	.word	0x20000090
 8000528:	40020000 	.word	0x40020000
 800052c:	2000009c 	.word	0x2000009c

08000530 <Button_Init>:
#include "Button.h"

enum {PUSHED = 0, RELEASED};

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint32_t pinNum)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
	hbtn->GPIOx = GPIOx;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	605a      	str	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2201      	movs	r2, #1
 800054c:	609a      	str	r2, [r3, #8]

	GPIO_Init(hbtn->GPIOx, hbtn->pinNum, INPUT);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6818      	ldr	r0, [r3, #0]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	2201      	movs	r2, #1
 8000558:	4619      	mov	r1, r3
 800055a:	f000 fa0b 	bl	8000974 <GPIO_Init>
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b084      	sub	sp, #16
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); //pushed = 0
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4619      	mov	r1, r3
 8000578:	4610      	mov	r0, r2
 800057a:	f000 fa50 	bl	8000a1e <GPIO_ReadPin>
 800057e:	60f8      	str	r0, [r7, #12]

	if(hbtn->prevState == RELEASED && (curState == PUSHED)){ //1st button pushed
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d10a      	bne.n	800059e <Button_GetState+0x38>
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d107      	bne.n	800059e <Button_GetState+0x38>
		delay(2);  //debounce
 800058e:	2002      	movs	r0, #2
 8000590:	f000 faca 	bl	8000b28 <delay>
		hbtn->prevState = PUSHED; //state Update
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 800059a:	2301      	movs	r3, #1
 800059c:	e00f      	b.n	80005be <Button_GetState+0x58>
	}
	else if (hbtn->prevState == PUSHED && (curState == RELEASED)){ //1st button pushed
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d10a      	bne.n	80005bc <Button_GetState+0x56>
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d107      	bne.n	80005bc <Button_GetState+0x56>
		delay(2); //debounce
 80005ac:	2002      	movs	r0, #2
 80005ae:	f000 fabb 	bl	8000b28 <delay>
		hbtn->prevState = RELEASED; //state Update
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2201      	movs	r2, #1
 80005b6:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 80005b8:	2302      	movs	r3, #2
 80005ba:	e000      	b.n	80005be <Button_GetState+0x58>
	}

	return NO_ACT ;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <FND_Init>:
uint16_t dot2 = 0xff;
uint16_t dot3 = 0xff;
uint16_t dot4 = 0xff;

void FND_Init()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
   for(int i=0; i<4; i++){
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	e00f      	b.n	80005f4 <FND_Init+0x2c>
      GPIO_Init(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, OUTPUT);
 80005d4:	4a16      	ldr	r2, [pc, #88]	@ (8000630 <FND_Init+0x68>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005dc:	4a14      	ldr	r2, [pc, #80]	@ (8000630 <FND_Init+0x68>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	4413      	add	r3, r2
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	4619      	mov	r1, r3
 80005ea:	f000 f9c3 	bl	8000974 <GPIO_Init>
   for(int i=0; i<4; i++){
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3301      	adds	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	ddec      	ble.n	80005d4 <FND_Init+0xc>
   }
   for(int i=0; i<8; i++){
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	e00f      	b.n	8000620 <FND_Init+0x58>
      GPIO_Init(fndPin[i].GPIOx, fndPin[i].pinNum, OUTPUT);
 8000600:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <FND_Init+0x6c>)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000608:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <FND_Init+0x6c>)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	4413      	add	r3, r2
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	f000 f9ad 	bl	8000974 <GPIO_Init>
   for(int i=0; i<8; i++){
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2b07      	cmp	r3, #7
 8000624:	ddec      	ble.n	8000600 <FND_Init+0x38>
   }
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000000 	.word	0x20000000
 8000634:	20000020 	.word	0x20000020

08000638 <FND_WriteData>:

// write fndDisNum
void FND_WriteData(uint16_t data)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
   fndDispNum = data;
 8000642:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <FND_WriteData+0x1c>)
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	8013      	strh	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	200000a8 	.word	0x200000a8

08000658 <FND_DisplayData>:
{
   return fndDispNum;
}
// display fndDisNum
void FND_DisplayData()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
   static int digitPos = 0; // digit 자리 표현 변수
   // interrupt 발생하면 한 자리씩 출력한다.
   digitPos = (digitPos + 1) % 4; // 0~3까지 출력 반복
 800065c:	4b4a      	ldr	r3, [pc, #296]	@ (8000788 <FND_DisplayData+0x130>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	425a      	negs	r2, r3
 8000664:	f003 0303 	and.w	r3, r3, #3
 8000668:	f002 0203 	and.w	r2, r2, #3
 800066c:	bf58      	it	pl
 800066e:	4253      	negpl	r3, r2
 8000670:	4a45      	ldr	r2, [pc, #276]	@ (8000788 <FND_DisplayData+0x130>)
 8000672:	6013      	str	r3, [r2, #0]

   switch(digitPos)
 8000674:	4b44      	ldr	r3, [pc, #272]	@ (8000788 <FND_DisplayData+0x130>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b03      	cmp	r3, #3
 800067a:	f200 8082 	bhi.w	8000782 <FND_DisplayData+0x12a>
 800067e:	a201      	add	r2, pc, #4	@ (adr r2, 8000684 <FND_DisplayData+0x2c>)
 8000680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000684:	08000695 	.word	0x08000695
 8000688:	080006c9 	.word	0x080006c9
 800068c:	08000707 	.word	0x08000707
 8000690:	08000745 	.word	0x08000745
   {
   // 계속 켜져있으면 FND 켜져있을 때 데이터가 바뀌면서 잔상이 생긴다
   // -> FND를 끄고 데이터를 바꾸고 다시 킨다.
   case DIGIT_1:
      FND_DispOffALL();
 8000694:	f000 f8ce 	bl	8000834 <FND_DispOffALL>
      FND_DispDigit(fndDispNum%10,dot1);
 8000698:	4b3c      	ldr	r3, [pc, #240]	@ (800078c <FND_DisplayData+0x134>)
 800069a:	881a      	ldrh	r2, [r3, #0]
 800069c:	4b3c      	ldr	r3, [pc, #240]	@ (8000790 <FND_DisplayData+0x138>)
 800069e:	fba3 1302 	umull	r1, r3, r3, r2
 80006a2:	08d9      	lsrs	r1, r3, #3
 80006a4:	460b      	mov	r3, r1
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	440b      	add	r3, r1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	4a38      	ldr	r2, [pc, #224]	@ (8000794 <FND_DisplayData+0x13c>)
 80006b2:	8812      	ldrh	r2, [r2, #0]
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f8dc 	bl	8000874 <FND_DispDigit>
      //FND_Dot(uint8_t DOT);
      FND_DispOn(digitPos);
 80006bc:	4b32      	ldr	r3, [pc, #200]	@ (8000788 <FND_DisplayData+0x130>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 f89f 	bl	8000804 <FND_DispOn>
      break;
 80006c6:	e05c      	b.n	8000782 <FND_DisplayData+0x12a>
   case DIGIT_10:
      FND_DispOffALL();
 80006c8:	f000 f8b4 	bl	8000834 <FND_DispOffALL>
      FND_DispDigit(fndDispNum/10%10,dot2);
 80006cc:	4b2f      	ldr	r3, [pc, #188]	@ (800078c <FND_DisplayData+0x134>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	4a2f      	ldr	r2, [pc, #188]	@ (8000790 <FND_DisplayData+0x138>)
 80006d2:	fba2 2303 	umull	r2, r3, r2, r3
 80006d6:	08db      	lsrs	r3, r3, #3
 80006d8:	b29a      	uxth	r2, r3
 80006da:	4b2d      	ldr	r3, [pc, #180]	@ (8000790 <FND_DisplayData+0x138>)
 80006dc:	fba3 1302 	umull	r1, r3, r3, r2
 80006e0:	08d9      	lsrs	r1, r3, #3
 80006e2:	460b      	mov	r3, r1
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	440b      	add	r3, r1
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000798 <FND_DisplayData+0x140>)
 80006f0:	8812      	ldrh	r2, [r2, #0]
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f8bd 	bl	8000874 <FND_DispDigit>
      //FND_Dot(uint8_t DOT);
      FND_DispOn(digitPos);
 80006fa:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <FND_DisplayData+0x130>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f880 	bl	8000804 <FND_DispOn>
      break;
 8000704:	e03d      	b.n	8000782 <FND_DisplayData+0x12a>
   case DIGIT_100:
      FND_DispOffALL();
 8000706:	f000 f895 	bl	8000834 <FND_DispOffALL>
      FND_DispDigit(fndDispNum/100%10,dot3);
 800070a:	4b20      	ldr	r3, [pc, #128]	@ (800078c <FND_DisplayData+0x134>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	4a23      	ldr	r2, [pc, #140]	@ (800079c <FND_DisplayData+0x144>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	095b      	lsrs	r3, r3, #5
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <FND_DisplayData+0x138>)
 800071a:	fba3 1302 	umull	r1, r3, r3, r2
 800071e:	08d9      	lsrs	r1, r3, #3
 8000720:	460b      	mov	r3, r1
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	440b      	add	r3, r1
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	b29b      	uxth	r3, r3
 800072c:	4a1c      	ldr	r2, [pc, #112]	@ (80007a0 <FND_DisplayData+0x148>)
 800072e:	8812      	ldrh	r2, [r2, #0]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f89e 	bl	8000874 <FND_DispDigit>
      //FND_Dot(uint8_t DOT);
      FND_DispOn(digitPos);
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <FND_DisplayData+0x130>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f861 	bl	8000804 <FND_DispOn>
      break;
 8000742:	e01e      	b.n	8000782 <FND_DisplayData+0x12a>
   case DIGIT_1000:
      FND_DispOffALL();
 8000744:	f000 f876 	bl	8000834 <FND_DispOffALL>
      FND_DispDigit(fndDispNum/1000%10,dot4);
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <FND_DisplayData+0x134>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	4a15      	ldr	r2, [pc, #84]	@ (80007a4 <FND_DisplayData+0x14c>)
 800074e:	fba2 2303 	umull	r2, r3, r2, r3
 8000752:	099b      	lsrs	r3, r3, #6
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <FND_DisplayData+0x138>)
 8000758:	fba3 1302 	umull	r1, r3, r3, r2
 800075c:	08d9      	lsrs	r1, r3, #3
 800075e:	460b      	mov	r3, r1
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	440b      	add	r3, r1
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	b29b      	uxth	r3, r3
 800076a:	4a0f      	ldr	r2, [pc, #60]	@ (80007a8 <FND_DisplayData+0x150>)
 800076c:	8812      	ldrh	r2, [r2, #0]
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f87f 	bl	8000874 <FND_DispDigit>
      //FND_Dot(uint8_t DOT);
      FND_DispOn(digitPos);
 8000776:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <FND_DisplayData+0x130>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f842 	bl	8000804 <FND_DispOn>
      break;
 8000780:	bf00      	nop
   }
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000ac 	.word	0x200000ac
 800078c:	200000a8 	.word	0x200000a8
 8000790:	cccccccd 	.word	0xcccccccd
 8000794:	20000060 	.word	0x20000060
 8000798:	20000062 	.word	0x20000062
 800079c:	51eb851f 	.word	0x51eb851f
 80007a0:	20000064 	.word	0x20000064
 80007a4:	10624dd3 	.word	0x10624dd3
 80007a8:	20000066 	.word	0x20000066

080007ac <FND_Dot>:

//additional
void FND_Dot(uint8_t dp1, uint8_t dp2, uint8_t dp3, uint8_t dp4)
{
 80007ac:	b490      	push	{r4, r7}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4604      	mov	r4, r0
 80007b4:	4608      	mov	r0, r1
 80007b6:	4611      	mov	r1, r2
 80007b8:	461a      	mov	r2, r3
 80007ba:	4623      	mov	r3, r4
 80007bc:	71fb      	strb	r3, [r7, #7]
 80007be:	4603      	mov	r3, r0
 80007c0:	71bb      	strb	r3, [r7, #6]
 80007c2:	460b      	mov	r3, r1
 80007c4:	717b      	strb	r3, [r7, #5]
 80007c6:	4613      	mov	r3, r2
 80007c8:	713b      	strb	r3, [r7, #4]
     dot1 = dp1;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <FND_Dot+0x48>)
 80007d0:	801a      	strh	r2, [r3, #0]
     dot2 = dp2;
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <FND_Dot+0x4c>)
 80007d8:	801a      	strh	r2, [r3, #0]
     dot3 = dp3;
 80007da:	797b      	ldrb	r3, [r7, #5]
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <FND_Dot+0x50>)
 80007e0:	801a      	strh	r2, [r3, #0]
     dot4 = dp4;
 80007e2:	793b      	ldrb	r3, [r7, #4]
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <FND_Dot+0x54>)
 80007e8:	801a      	strh	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc90      	pop	{r4, r7}
 80007f2:	4770      	bx	lr
 80007f4:	20000060 	.word	0x20000060
 80007f8:	20000062 	.word	0x20000062
 80007fc:	20000064 	.word	0x20000064
 8000800:	20000066 	.word	0x20000066

08000804 <FND_DispOn>:


///

void FND_DispOn(int fndPos)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
   // GPIO_WritePin(GPIOx, PiNum, RESET); - Cathode type(Anode type은 반대)
      GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, PIN_SET);
 800080c:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <FND_DispOn+0x2c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000814:	4a06      	ldr	r2, [pc, #24]	@ (8000830 <FND_DispOn+0x2c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	4413      	add	r3, r2
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	f000 f8d8 	bl	80009d6 <GPIO_WritePin>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000000 	.word	0x20000000

08000834 <FND_DispOffALL>:

void FND_DispOffALL()
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
   for(int i=0; i<4; i++){
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	e00f      	b.n	8000860 <FND_DispOffALL+0x2c>
      GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, PIN_RESET);
 8000840:	4a0b      	ldr	r2, [pc, #44]	@ (8000870 <FND_DispOffALL+0x3c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000848:	4a09      	ldr	r2, [pc, #36]	@ (8000870 <FND_DispOffALL+0x3c>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	4413      	add	r3, r2
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	f000 f8be 	bl	80009d6 <GPIO_WritePin>
   for(int i=0; i<4; i++){
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3301      	adds	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b03      	cmp	r3, #3
 8000864:	ddec      	ble.n	8000840 <FND_DispOffALL+0xc>
   }
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000000 	.word	0x20000000

08000874 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit, uint16_t dot)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	460a      	mov	r2, r1
 800087e:	80fb      	strh	r3, [r7, #6]
 8000880:	4613      	mov	r3, r2
 8000882:	80bb      	strh	r3, [r7, #4]
   const uint8_t segFont[10] = {
 8000884:	4a38      	ldr	r2, [pc, #224]	@ (8000968 <FND_DispDigit+0xf4>)
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	ca07      	ldmia	r2, {r0, r1, r2}
 800088c:	c303      	stmia	r3!, {r0, r1}
 800088e:	801a      	strh	r2, [r3, #0]
         0x07, // 7
         0x7F, // 8
         0x6F  // 9
   };

   const uint8_t segFontDP[10] = {
 8000890:	4a36      	ldr	r2, [pc, #216]	@ (800096c <FND_DispDigit+0xf8>)
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	ca07      	ldmia	r2, {r0, r1, r2}
 8000898:	c303      	stmia	r3!, {r0, r1}
 800089a:	801a      	strh	r2, [r3, #0]
		   0x80,
		   0x90,
   };


   for(int i=0; i<8; i++){
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
 80008a0:	e059      	b.n	8000956 <FND_DispDigit+0xe2>
	  if(i == 7){
 80008a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a4:	2b07      	cmp	r3, #7
 80008a6:	d12b      	bne.n	8000900 <FND_DispDigit+0x8c>
		  if(!((segFontDP[digit] & ~dot) & (1<<i))){
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	3328      	adds	r3, #40	@ 0x28
 80008ac:	443b      	add	r3, r7
 80008ae:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80008b2:	461a      	mov	r2, r3
 80008b4:	88bb      	ldrh	r3, [r7, #4]
 80008b6:	43db      	mvns	r3, r3
 80008b8:	401a      	ands	r2, r3
 80008ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008bc:	fa42 f303 	asr.w	r3, r2, r3
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d10d      	bne.n	80008e4 <FND_DispDigit+0x70>
			 GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, PIN_RESET);    // data = 0 -> offCathode type(Anode type은 반대)
 80008c8:	4a29      	ldr	r2, [pc, #164]	@ (8000970 <FND_DispDigit+0xfc>)
 80008ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008d0:	4a27      	ldr	r2, [pc, #156]	@ (8000970 <FND_DispDigit+0xfc>)
 80008d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	4413      	add	r3, r2
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	f000 f87a 	bl	80009d6 <GPIO_WritePin>
 80008e2:	e035      	b.n	8000950 <FND_DispDigit+0xdc>
		  }
		  else{
			 GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, PIN_SET);      // data = 1 -> onCathode type(Anode type은 반대)
 80008e4:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <FND_DispDigit+0xfc>)
 80008e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008ec:	4a20      	ldr	r2, [pc, #128]	@ (8000970 <FND_DispDigit+0xfc>)
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	4413      	add	r3, r2
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	f000 f86c 	bl	80009d6 <GPIO_WritePin>
 80008fe:	e027      	b.n	8000950 <FND_DispDigit+0xdc>
		  }
	  }
	  else
	  {
		  if(!(segFont[digit] & (1<<i))){
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	3328      	adds	r3, #40	@ 0x28
 8000904:	443b      	add	r3, r7
 8000906:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800090a:	461a      	mov	r2, r3
 800090c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800090e:	fa42 f303 	asr.w	r3, r2, r3
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10d      	bne.n	8000936 <FND_DispDigit+0xc2>
			 GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, PIN_SET);    // data = 0 -> offCathode type(Anode type은 반대)
 800091a:	4a15      	ldr	r2, [pc, #84]	@ (8000970 <FND_DispDigit+0xfc>)
 800091c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000922:	4a13      	ldr	r2, [pc, #76]	@ (8000970 <FND_DispDigit+0xfc>)
 8000924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	4413      	add	r3, r2
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2201      	movs	r2, #1
 800092e:	4619      	mov	r1, r3
 8000930:	f000 f851 	bl	80009d6 <GPIO_WritePin>
 8000934:	e00c      	b.n	8000950 <FND_DispDigit+0xdc>
		  }
		  else{
			 GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, PIN_RESET);      // data = 1 -> onCathode type(Anode type은 반대)
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <FND_DispDigit+0xfc>)
 8000938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800093e:	4a0c      	ldr	r2, [pc, #48]	@ (8000970 <FND_DispDigit+0xfc>)
 8000940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	4413      	add	r3, r2
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	f000 f843 	bl	80009d6 <GPIO_WritePin>
   for(int i=0; i<8; i++){
 8000950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000952:	3301      	adds	r3, #1
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
 8000956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000958:	2b07      	cmp	r3, #7
 800095a:	dda2      	ble.n	80008a2 <FND_DispDigit+0x2e>
		  }
	   }

   }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	@ 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	08000d0c 	.word	0x08000d0c
 800096c:	08000d18 	.word	0x08000d18
 8000970:	20000020 	.word	0x20000020

08000974 <GPIO_Init>:
#include "GPIO.h"

void GPIO_Init(GPIO_TypeDef *GPIOx, uint32_t pinNum, pin_mode_t pinMode)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	4613      	mov	r3, r2
 8000980:	71fb      	strb	r3, [r7, #7]
   if(pinMode == OUTPUT) {
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d115      	bne.n	80009b4 <GPIO_Init+0x40>
      GPIOx->MODER |= (0x01U << (pinNum*2));
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	431a      	orrs	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	601a      	str	r2, [r3, #0]
      GPIOx->MODER &= ~(0x02U << (pinNum*2));
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2102      	movs	r1, #2
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	401a      	ands	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	601a      	str	r2, [r3, #0]
   }
   else {
      GPIOx->MODER &= ~(0x03U << (pinNum*2));
   }
}
 80009b2:	e00a      	b.n	80009ca <GPIO_Init+0x56>
      GPIOx->MODER &= ~(0x03U << (pinNum*2));
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2103      	movs	r1, #3
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	401a      	ands	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	601a      	str	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t pinNum, pin_state_t pinState)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71fb      	strb	r3, [r7, #7]
   if(pinState == PIN_SET){
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d109      	bne.n	80009fe <GPIO_WritePin+0x28>
      GPIOx->ODR |= (1U<<pinNum);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	695a      	ldr	r2, [r3, #20]
 80009ee:	2101      	movs	r1, #1
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	431a      	orrs	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	615a      	str	r2, [r3, #20]
   }
   else {
      GPIOx->ODR &= ~(1U<<pinNum);
   }
}
 80009fc:	e009      	b.n	8000a12 <GPIO_WritePin+0x3c>
      GPIOx->ODR &= ~(1U<<pinNum);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	695a      	ldr	r2, [r3, #20]
 8000a02:	2101      	movs	r1, #1
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	615a      	str	r2, [r3, #20]
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <GPIO_ReadPin>:

uint32_t GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t pinNum)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
   return ((GPIOx->IDR & (1U<<pinNum)) ? 1: 0);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	691a      	ldr	r2, [r3, #16]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	4013      	ands	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	bf14      	ite	ne
 8000a3a:	2301      	movne	r3, #1
 8000a3c:	2300      	moveq	r3, #0
 8000a3e:	b2db      	uxtb	r3, r3
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <LedBar_Init>:
		{GPIOC, 2},
		{GPIOC, 3}
};

void LedBar_Init()
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	GPIO_Init(GPIOA,0,OUTPUT);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	4813      	ldr	r0, [pc, #76]	@ (8000aa4 <LedBar_Init+0x58>)
 8000a56:	f7ff ff8d 	bl	8000974 <GPIO_Init>
	GPIO_Init(GPIOA,1,OUTPUT);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4811      	ldr	r0, [pc, #68]	@ (8000aa4 <LedBar_Init+0x58>)
 8000a60:	f7ff ff88 	bl	8000974 <GPIO_Init>
	GPIO_Init(GPIOA,4,OUTPUT);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2104      	movs	r1, #4
 8000a68:	480e      	ldr	r0, [pc, #56]	@ (8000aa4 <LedBar_Init+0x58>)
 8000a6a:	f7ff ff83 	bl	8000974 <GPIO_Init>
	GPIO_Init(GPIOB,0,OUTPUT);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <LedBar_Init+0x5c>)
 8000a74:	f7ff ff7e 	bl	8000974 <GPIO_Init>
	GPIO_Init(GPIOC,1,OUTPUT);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	480b      	ldr	r0, [pc, #44]	@ (8000aac <LedBar_Init+0x60>)
 8000a7e:	f7ff ff79 	bl	8000974 <GPIO_Init>
	GPIO_Init(GPIOC,0,OUTPUT);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	4809      	ldr	r0, [pc, #36]	@ (8000aac <LedBar_Init+0x60>)
 8000a88:	f7ff ff74 	bl	8000974 <GPIO_Init>
	GPIO_Init(GPIOC,2,OUTPUT);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4806      	ldr	r0, [pc, #24]	@ (8000aac <LedBar_Init+0x60>)
 8000a92:	f7ff ff6f 	bl	8000974 <GPIO_Init>
	GPIO_Init(GPIOC,3,OUTPUT);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2103      	movs	r1, #3
 8000a9a:	4804      	ldr	r0, [pc, #16]	@ (8000aac <LedBar_Init+0x60>)
 8000a9c:	f7ff ff6a 	bl	8000974 <GPIO_Init>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020800 	.word	0x40020800

08000ab0 <incTick>:
//{
//	hTickTIM = TIMx;
//}

void incTick()
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	tick++;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <incTick+0x18>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	4a03      	ldr	r2, [pc, #12]	@ (8000ac8 <incTick+0x18>)
 8000abc:	6013      	str	r3, [r2, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	200000b0 	.word	0x200000b0

08000acc <getTick>:

uint32_t getTick()
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	return tick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <getTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200000b0 	.word	0x200000b0

08000ae4 <SystemClock_Init>:
#include "SystemClock.h"

void SystemClock_Init()
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <SystemClock_Init+0x40>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aec:	4a0d      	ldr	r2, [pc, #52]	@ (8000b24 <SystemClock_Init+0x40>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000af4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <SystemClock_Init+0x40>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <SystemClock_Init+0x40>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000b00:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <SystemClock_Init+0x40>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	4a07      	ldr	r2, [pc, #28]	@ (8000b24 <SystemClock_Init+0x40>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC-> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <SystemClock_Init+0x40>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <SystemClock_Init+0x40>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6413      	str	r3, [r2, #64]	@ 0x40
	//RCC-> APB1ENR |= RCC_APB1ENR_TIM5EN;
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <delay>:

void delay(int loop)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	for (int j = 0; j< loop; j++){
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e00c      	b.n	8000b50 <delay+0x28>
		for (volatile int i = 0; i < 1000; i++){}
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	e002      	b.n	8000b42 <delay+0x1a>
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b48:	dbf8      	blt.n	8000b3c <delay+0x14>
	for (int j = 0; j< loop; j++){
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbee      	blt.n	8000b36 <delay+0xe>
	}
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <TIM_Init>:
#include "TIM.h"

void TIM_Init(TIM_TypeDef *TIMx, uint32_t psc, uint32_t arr)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b084      	sub	sp, #16
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
	TIM_WritePSC(TIMx, psc);
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f000 f83a 	bl	8000bee <TIM_WritePSC>
	TIM_WriteARR(TIMx, arr);
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f000 f844 	bl	8000c0a <TIM_WriteARR>
	TIM_WriteCNT(TIMx, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 f824 	bl	8000bd2 <TIM_WriteCNT>
	//TIMx->EGR |= TIM_EGR_UG;
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <TIM_CntStart>:

void TIM_CntStart(TIM_TypeDef *TIMx) //enable
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	TIMx->CR1 |= (1 << 0);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f043 0201 	orr.w	r2, r3, #1
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <TIM_UInterEnable>:
{
	TIMx->CR1 &= ~(1 << 0);
}

void TIM_UInterEnable(TIM_TypeDef *TIMx) //interrupt enable
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
	TIMx->DIER |= (1<<0);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	f043 0201 	orr.w	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60da      	str	r2, [r3, #12]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <TIM_WriteCNT>:
{
	return TIMx->CNT;
}

void TIM_WriteCNT(TIM_TypeDef *TIMx, uint32_t cnt)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	6039      	str	r1, [r7, #0]
	TIMx->CNT = cnt;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <TIM_WritePSC>:
{
	return TIMx->PSC;
}

void TIM_WritePSC(TIM_TypeDef *TIMx, uint32_t psc)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
	TIMx->PSC = psc;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <TIM_WriteARR>:
{
	return TIMx->ARR;
}

void TIM_WriteARR(TIM_TypeDef *TIMx, uint32_t arr)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
	TIMx->ARR = arr;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <TIM_ClearUIFlag>:

void TIM_ClearUIFlag(TIM_TypeDef *TIMx)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	TIM2->SR &= ~(1<<0);
 8000c2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c38:	f023 0301 	bic.w	r3, r3, #1
 8000c3c:	6113      	str	r3, [r2, #16]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <main>:

#include <stdint.h>
#include "ap_main.h"

int main(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
	ap_Init();
 8000c4e:	f7ff fc39 	bl	80004c4 <ap_Init>
	while(1)
	{
		ap_main();
 8000c52:	f7ff faeb 	bl	800022c <ap_main>
 8000c56:	e7fc      	b.n	8000c52 <main+0x8>

08000c58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c58:	480d      	ldr	r0, [pc, #52]	@ (8000c90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c86:	f000 f811 	bl	8000cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8a:	f7ff ffde 	bl	8000c4a <main>

08000c8e <LoopForever>:

LoopForever:
  b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   r0, =_estack
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c9c:	08000d2c 	.word	0x08000d2c
  ldr r2, =_sbss
 8000ca0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ca4:	200000b4 	.word	0x200000b4

08000ca8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <__libc_init_array>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	4d0d      	ldr	r5, [pc, #52]	@ (8000ce4 <__libc_init_array+0x38>)
 8000cb0:	4c0d      	ldr	r4, [pc, #52]	@ (8000ce8 <__libc_init_array+0x3c>)
 8000cb2:	1b64      	subs	r4, r4, r5
 8000cb4:	10a4      	asrs	r4, r4, #2
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	42a6      	cmp	r6, r4
 8000cba:	d109      	bne.n	8000cd0 <__libc_init_array+0x24>
 8000cbc:	4d0b      	ldr	r5, [pc, #44]	@ (8000cec <__libc_init_array+0x40>)
 8000cbe:	4c0c      	ldr	r4, [pc, #48]	@ (8000cf0 <__libc_init_array+0x44>)
 8000cc0:	f000 f818 	bl	8000cf4 <_init>
 8000cc4:	1b64      	subs	r4, r4, r5
 8000cc6:	10a4      	asrs	r4, r4, #2
 8000cc8:	2600      	movs	r6, #0
 8000cca:	42a6      	cmp	r6, r4
 8000ccc:	d105      	bne.n	8000cda <__libc_init_array+0x2e>
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd4:	4798      	blx	r3
 8000cd6:	3601      	adds	r6, #1
 8000cd8:	e7ee      	b.n	8000cb8 <__libc_init_array+0xc>
 8000cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cde:	4798      	blx	r3
 8000ce0:	3601      	adds	r6, #1
 8000ce2:	e7f2      	b.n	8000cca <__libc_init_array+0x1e>
 8000ce4:	08000d24 	.word	0x08000d24
 8000ce8:	08000d24 	.word	0x08000d24
 8000cec:	08000d24 	.word	0x08000d24
 8000cf0:	08000d28 	.word	0x08000d28

08000cf4 <_init>:
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	bf00      	nop
 8000cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfa:	bc08      	pop	{r3}
 8000cfc:	469e      	mov	lr, r3
 8000cfe:	4770      	bx	lr

08000d00 <_fini>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	bf00      	nop
 8000d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d06:	bc08      	pop	{r3}
 8000d08:	469e      	mov	lr, r3
 8000d0a:	4770      	bx	lr
