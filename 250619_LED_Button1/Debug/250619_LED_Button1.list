
250619_LED_Button1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000338  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d0  080004d0  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d0  080004d0  00002040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004d0  080004d0  00002040  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004d0  080004d0  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d0  080004d0  000014d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004d4  080004d4  000014d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  080004d8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000040  08000518  00002040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000518  0000205c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000935  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d7  00000000  00000000  000029a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  00002e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000009c  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cb51  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018a8  00000000  00000000  0000fb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004889d  00000000  00000000  0001140d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00059caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001fc  00000000  00000000  00059cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00059eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004b8 	.word	0x080004b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	080004b8 	.word	0x080004b8

080001d8 <ap_main>:
#include "ap_main.h"

int ap_main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	uint8_t data = 1;
 80001de:	2301      	movs	r3, #1
 80001e0:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
    	LEDBar_Write(data);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f89f 	bl	8000328 <LEDBar_Write>
    	delay(100);
 80001ea:	2064      	movs	r0, #100	@ 0x64
 80001ec:	f000 f8f0 	bl	80003d0 <delay>
    	data = (data << 1) | (data >> 7);
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	005b      	lsls	r3, r3, #1
 80001f6:	b25a      	sxtb	r2, r3
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	09db      	lsrs	r3, r3, #7
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	b25b      	sxtb	r3, r3
 8000200:	4313      	orrs	r3, r2
 8000202:	b25b      	sxtb	r3, r3
 8000204:	71fb      	strb	r3, [r7, #7]
    	LEDBar_Write(data);
 8000206:	bf00      	nop
 8000208:	e7eb      	b.n	80001e2 <ap_main+0xa>

0800020a <ap_Init>:
	}
	return 0;
}

void ap_Init()
{
 800020a:	b580      	push	{r7, lr}
 800020c:	af00      	add	r7, sp, #0
	SystemClock_Init();
 800020e:	f000 f8c3 	bl	8000398 <SystemClock_Init>
	LedBar_Init();
 8000212:	f000 f857 	bl	80002c4 <LedBar_Init>
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}

0800021a <GPIO_init>:
#include "GPIO.h"

void GPIO_init(GPIO_TypeDef *GPIOx, uint32_t pinNum, pin_mode_t pinMode)
{
 800021a:	b480      	push	{r7}
 800021c:	b085      	sub	sp, #20
 800021e:	af00      	add	r7, sp, #0
 8000220:	60f8      	str	r0, [r7, #12]
 8000222:	60b9      	str	r1, [r7, #8]
 8000224:	4613      	mov	r3, r2
 8000226:	71fb      	strb	r3, [r7, #7]
   if(pinMode == OUTPUT) {
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d115      	bne.n	800025a <GPIO_init+0x40>
      GPIOx->MODER |= (0x01U << (pinNum*2));
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	2101      	movs	r1, #1
 8000238:	fa01 f303 	lsl.w	r3, r1, r3
 800023c:	431a      	orrs	r2, r3
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	601a      	str	r2, [r3, #0]
      GPIOx->MODER &= ~(0x02U << (pinNum*2));
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	2102      	movs	r1, #2
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
 8000250:	43db      	mvns	r3, r3
 8000252:	401a      	ands	r2, r3
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	601a      	str	r2, [r3, #0]
   }
   else {
      GPIOx->MODER &= ~(0x03U << (pinNum*2));
   }
}
 8000258:	e00a      	b.n	8000270 <GPIO_init+0x56>
      GPIOx->MODER &= ~(0x03U << (pinNum*2));
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	2103      	movs	r1, #3
 8000264:	fa01 f303 	lsl.w	r3, r1, r3
 8000268:	43db      	mvns	r3, r3
 800026a:	401a      	ands	r2, r3
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	601a      	str	r2, [r3, #0]
}
 8000270:	bf00      	nop
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t pinNum, pin_state_t pinState)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	4613      	mov	r3, r2
 8000288:	71fb      	strb	r3, [r7, #7]
   if(pinState == PIN_SET){
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d109      	bne.n	80002a4 <GPIO_WritePin+0x28>
      GPIOx->ODR |= (1U<<pinNum);
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	695a      	ldr	r2, [r3, #20]
 8000294:	2101      	movs	r1, #1
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	431a      	orrs	r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	615a      	str	r2, [r3, #20]
   }
   else {
      GPIOx->ODR &= ~(1U<<pinNum);
   }
}
 80002a2:	e009      	b.n	80002b8 <GPIO_WritePin+0x3c>
      GPIOx->ODR &= ~(1U<<pinNum);
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	695a      	ldr	r2, [r3, #20]
 80002a8:	2101      	movs	r1, #1
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	fa01 f303 	lsl.w	r3, r1, r3
 80002b0:	43db      	mvns	r3, r3
 80002b2:	401a      	ands	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	615a      	str	r2, [r3, #20]
}
 80002b8:	bf00      	nop
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <LedBar_Init>:
		{GPIOC, 2},
		{GPIOC, 3}
};

void LedBar_Init()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	GPIO_init(GPIOA,0,OUTPUT);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2100      	movs	r1, #0
 80002cc:	4813      	ldr	r0, [pc, #76]	@ (800031c <LedBar_Init+0x58>)
 80002ce:	f7ff ffa4 	bl	800021a <GPIO_init>
	GPIO_init(GPIOA,1,OUTPUT);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2101      	movs	r1, #1
 80002d6:	4811      	ldr	r0, [pc, #68]	@ (800031c <LedBar_Init+0x58>)
 80002d8:	f7ff ff9f 	bl	800021a <GPIO_init>
	GPIO_init(GPIOA,4,OUTPUT);
 80002dc:	2200      	movs	r2, #0
 80002de:	2104      	movs	r1, #4
 80002e0:	480e      	ldr	r0, [pc, #56]	@ (800031c <LedBar_Init+0x58>)
 80002e2:	f7ff ff9a 	bl	800021a <GPIO_init>
	GPIO_init(GPIOB,0,OUTPUT);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2100      	movs	r1, #0
 80002ea:	480d      	ldr	r0, [pc, #52]	@ (8000320 <LedBar_Init+0x5c>)
 80002ec:	f7ff ff95 	bl	800021a <GPIO_init>
	GPIO_init(GPIOC,1,OUTPUT);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2101      	movs	r1, #1
 80002f4:	480b      	ldr	r0, [pc, #44]	@ (8000324 <LedBar_Init+0x60>)
 80002f6:	f7ff ff90 	bl	800021a <GPIO_init>
	GPIO_init(GPIOC,0,OUTPUT);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2100      	movs	r1, #0
 80002fe:	4809      	ldr	r0, [pc, #36]	@ (8000324 <LedBar_Init+0x60>)
 8000300:	f7ff ff8b 	bl	800021a <GPIO_init>
	GPIO_init(GPIOC,2,OUTPUT);
 8000304:	2200      	movs	r2, #0
 8000306:	2102      	movs	r1, #2
 8000308:	4806      	ldr	r0, [pc, #24]	@ (8000324 <LedBar_Init+0x60>)
 800030a:	f7ff ff86 	bl	800021a <GPIO_init>
	GPIO_init(GPIOC,3,OUTPUT);
 800030e:	2200      	movs	r2, #0
 8000310:	2103      	movs	r1, #3
 8000312:	4804      	ldr	r0, [pc, #16]	@ (8000324 <LedBar_Init+0x60>)
 8000314:	f7ff ff81 	bl	800021a <GPIO_init>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40020000 	.word	0x40020000
 8000320:	40020400 	.word	0x40020400
 8000324:	40020800 	.word	0x40020800

08000328 <LEDBar_Write>:

void LEDBar_Write(uint8_t data)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++){
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	e025      	b.n	8000384 <LEDBar_Write+0x5c>
		if((data & (1<<i)) == 0){
 8000338:	79fa      	ldrb	r2, [r7, #7]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	fa42 f303 	asr.w	r3, r2, r3
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d10d      	bne.n	8000364 <LEDBar_Write+0x3c>
			GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, PIN_RESET);
 8000348:	4a12      	ldr	r2, [pc, #72]	@ (8000394 <LEDBar_Write+0x6c>)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000350:	4a10      	ldr	r2, [pc, #64]	@ (8000394 <LEDBar_Write+0x6c>)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	00db      	lsls	r3, r3, #3
 8000356:	4413      	add	r3, r2
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	2200      	movs	r2, #0
 800035c:	4619      	mov	r1, r3
 800035e:	f7ff ff8d 	bl	800027c <GPIO_WritePin>
 8000362:	e00c      	b.n	800037e <LEDBar_Write+0x56>
		} else {
			GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, PIN_SET);
 8000364:	4a0b      	ldr	r2, [pc, #44]	@ (8000394 <LEDBar_Write+0x6c>)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800036c:	4a09      	ldr	r2, [pc, #36]	@ (8000394 <LEDBar_Write+0x6c>)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	00db      	lsls	r3, r3, #3
 8000372:	4413      	add	r3, r2
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	2201      	movs	r2, #1
 8000378:	4619      	mov	r1, r3
 800037a:	f7ff ff7f 	bl	800027c <GPIO_WritePin>
	for(int i = 0; i < 8; i++){
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3301      	adds	r3, #1
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	2b07      	cmp	r3, #7
 8000388:	ddd6      	ble.n	8000338 <LEDBar_Write+0x10>
		}
	}
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000000 	.word	0x20000000

08000398 <SystemClock_Init>:
#include "SystemClock.h"

void SystemClock_Init()
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800039c:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <SystemClock_Init+0x34>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a0:	4a0a      	ldr	r2, [pc, #40]	@ (80003cc <SystemClock_Init+0x34>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80003a8:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <SystemClock_Init+0x34>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	4a07      	ldr	r2, [pc, #28]	@ (80003cc <SystemClock_Init+0x34>)
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80003b4:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <SystemClock_Init+0x34>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b8:	4a04      	ldr	r2, [pc, #16]	@ (80003cc <SystemClock_Init+0x34>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40023800 	.word	0x40023800

080003d0 <delay>:

void delay(int loop)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	for (int j = 0; j< loop; j++){
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	e00c      	b.n	80003f8 <delay+0x28>
		for (volatile int i = 0; i < 1000; i++){}
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	e002      	b.n	80003ea <delay+0x1a>
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	3301      	adds	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80003f0:	dbf8      	blt.n	80003e4 <delay+0x14>
	for (int j = 0; j< loop; j++){
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	3301      	adds	r3, #1
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	dbee      	blt.n	80003de <delay+0xe>
	}
}
 8000400:	bf00      	nop
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <main>:
#include <stdint.h>
#include "ap_main.h"

int main(void)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	af00      	add	r7, sp, #0
	ap_Init();
 8000412:	f7ff fefa 	bl	800020a <ap_Init>
    while(1)
    {
    	ap_main();
 8000416:	f7ff fedf 	bl	80001d8 <ap_main>
 800041a:	e7fc      	b.n	8000416 <main+0x8>

0800041c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800041c:	480d      	ldr	r0, [pc, #52]	@ (8000454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000420:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000424:	480c      	ldr	r0, [pc, #48]	@ (8000458 <LoopForever+0x6>)
  ldr r1, =_edata
 8000426:	490d      	ldr	r1, [pc, #52]	@ (800045c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000428:	4a0d      	ldr	r2, [pc, #52]	@ (8000460 <LoopForever+0xe>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800042c:	e002      	b.n	8000434 <LoopCopyDataInit>

0800042e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000432:	3304      	adds	r3, #4

08000434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000438:	d3f9      	bcc.n	800042e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043a:	4a0a      	ldr	r2, [pc, #40]	@ (8000464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800043c:	4c0a      	ldr	r4, [pc, #40]	@ (8000468 <LoopForever+0x16>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000440:	e001      	b.n	8000446 <LoopFillZerobss>

08000442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000444:	3204      	adds	r2, #4

08000446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000448:	d3fb      	bcc.n	8000442 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044a:	f000 f811 	bl	8000470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044e:	f7ff ffde 	bl	800040e <main>

08000452 <LoopForever>:

LoopForever:
  b LoopForever
 8000452:	e7fe      	b.n	8000452 <LoopForever>
  ldr   r0, =_estack
 8000454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800045c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000460:	080004d8 	.word	0x080004d8
  ldr r2, =_sbss
 8000464:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000468:	2000005c 	.word	0x2000005c

0800046c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800046c:	e7fe      	b.n	800046c <ADC_IRQHandler>
	...

08000470 <__libc_init_array>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	4d0d      	ldr	r5, [pc, #52]	@ (80004a8 <__libc_init_array+0x38>)
 8000474:	4c0d      	ldr	r4, [pc, #52]	@ (80004ac <__libc_init_array+0x3c>)
 8000476:	1b64      	subs	r4, r4, r5
 8000478:	10a4      	asrs	r4, r4, #2
 800047a:	2600      	movs	r6, #0
 800047c:	42a6      	cmp	r6, r4
 800047e:	d109      	bne.n	8000494 <__libc_init_array+0x24>
 8000480:	4d0b      	ldr	r5, [pc, #44]	@ (80004b0 <__libc_init_array+0x40>)
 8000482:	4c0c      	ldr	r4, [pc, #48]	@ (80004b4 <__libc_init_array+0x44>)
 8000484:	f000 f818 	bl	80004b8 <_init>
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	2600      	movs	r6, #0
 800048e:	42a6      	cmp	r6, r4
 8000490:	d105      	bne.n	800049e <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f855 3b04 	ldr.w	r3, [r5], #4
 8000498:	4798      	blx	r3
 800049a:	3601      	adds	r6, #1
 800049c:	e7ee      	b.n	800047c <__libc_init_array+0xc>
 800049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a2:	4798      	blx	r3
 80004a4:	3601      	adds	r6, #1
 80004a6:	e7f2      	b.n	800048e <__libc_init_array+0x1e>
 80004a8:	080004d0 	.word	0x080004d0
 80004ac:	080004d0 	.word	0x080004d0
 80004b0:	080004d0 	.word	0x080004d0
 80004b4:	080004d4 	.word	0x080004d4

080004b8 <_init>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr

080004c4 <_fini>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr
