
250624_TimeWatch_StopWatch_SequenceStructure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004154  08004154  00005154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f4  080041f4  000060d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041f4  080041f4  000051f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041fc  080041fc  000060d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041fc  080041fc  000051fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004200  08004200  00005200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  08004204  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200000d4  080042d8  000060d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080042d8  0000630c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e568  00000000  00000000  00006104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8a  00000000  00000000  0001466c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000170f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a84  00000000  00000000  00017eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f60  00000000  00000000  0001893c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120f9  00000000  00000000  0002f89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8db  00000000  00000000  00041995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  000d02b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d3e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800413c 	.word	0x0800413c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	0800413c 	.word	0x0800413c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b49      	ldr	r3, [pc, #292]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a48      	ldr	r2, [pc, #288]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b46      	ldr	r3, [pc, #280]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b42      	ldr	r3, [pc, #264]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a41      	ldr	r2, [pc, #260]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b3f      	ldr	r3, [pc, #252]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a3a      	ldr	r2, [pc, #232]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <MX_GPIO_Init+0x140>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <MX_GPIO_Init+0x140>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a33      	ldr	r2, [pc, #204]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b31      	ldr	r3, [pc, #196]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000648:	482d      	ldr	r0, [pc, #180]	@ (8000700 <MX_GPIO_Init+0x144>)
 800064a:	f001 fb4f 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800064e:	2200      	movs	r2, #0
 8000650:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000654:	482b      	ldr	r0, [pc, #172]	@ (8000704 <MX_GPIO_Init+0x148>)
 8000656:	f001 fb49 	bl	8001cec <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000660:	4829      	ldr	r0, [pc, #164]	@ (8000708 <MX_GPIO_Init+0x14c>)
 8000662:	f001 fb43 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000666:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4820      	ldr	r0, [pc, #128]	@ (8000700 <MX_GPIO_Init+0x144>)
 8000680:	f001 f998 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000684:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000688:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4819      	ldr	r0, [pc, #100]	@ (8000704 <MX_GPIO_Init+0x148>)
 800069e:	f001 f989 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	4814      	ldr	r0, [pc, #80]	@ (8000708 <MX_GPIO_Init+0x14c>)
 80006b8:	f001 f97c 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <MX_GPIO_Init+0x14c>)
 80006d6:	f001 f96d 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006da:	2328      	movs	r3, #40	@ 0x28
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_GPIO_Init+0x148>)
 80006ee:	f001 f961 	bl	80019b4 <HAL_GPIO_Init>

}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	@ 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800
 8000704:	40020400 	.word	0x40020400
 8000708:	40020000 	.word	0x40020000

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000710:	f000 ffa8 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f80c 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f7ff ff50 	bl	80005bc <MX_GPIO_Init>
  MX_TIM2_Init();
 800071c:	f000 f920 	bl	8000960 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000720:	f000 f990 	bl	8000a44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ap_Init();
 8000724:	f000 fc78 	bl	8001018 <ap_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000728:	f000 fc66 	bl	8000ff8 <ap_main>
 800072c:	e7fc      	b.n	8000728 <main+0x1c>
	...

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	@ 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f003 f87e 	bl	8003840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <SystemClock_Config+0xc8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a26      	ldr	r2, [pc, #152]	@ (80007f8 <SystemClock_Config+0xc8>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <SystemClock_Config+0xc8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <SystemClock_Config+0xcc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a20      	ldr	r2, [pc, #128]	@ (80007fc <SystemClock_Config+0xcc>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <SystemClock_Config+0xcc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007a4:	2364      	movs	r3, #100	@ 0x64
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fab3 	bl	8001d20 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 f81e 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2103      	movs	r1, #3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fd15 	bl	8002210 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007ec:	f000 f808 	bl	8000800 <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	@ 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	@ (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000820:	6453      	str	r3, [r2, #68]	@ 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	@ 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <NMI_Handler+0x4>

08000864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <UsageFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 ff29 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008c0:	4802      	ldr	r0, [pc, #8]	@ (80008cc <TIM2_IRQHandler+0x10>)
 80008c2:	f001 ff77 	bl	80027b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000f4 	.word	0x200000f4

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	@ (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f002 ffa6 	bl	8003850 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20020000 	.word	0x20020000
 8000930:	00000400 	.word	0x00000400
 8000934:	200000f0 	.word	0x200000f0
 8000938:	20000310 	.word	0x20000310

0800093c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	@ (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097c:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <MX_TIM2_Init+0x94>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_TIM2_Init+0x94>)
 8000986:	220f      	movs	r2, #15
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <MX_TIM2_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_TIM2_Init+0x94>)
 8000992:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_TIM2_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <MX_TIM2_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a4:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <MX_TIM2_Init+0x94>)
 80009a6:	f001 fe53 	bl	8002650 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009b0:	f7ff ff26 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <MX_TIM2_Init+0x94>)
 80009c2:	f001 ffe7 	bl	8002994 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009cc:	f7ff ff18 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_TIM2_Init+0x94>)
 80009de:	f002 f9e9 	bl	8002db4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f7ff ff0a 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200000f4 	.word	0x200000f4

080009f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a08:	d115      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a0b      	ldr	r2, [pc, #44]	@ (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	201c      	movs	r0, #28
 8000a2c:	f000 ff8b 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a30:	201c      	movs	r0, #28
 8000a32:	f000 ffa4 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <MX_USART2_UART_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	f002 fa1c 	bl	8002eb8 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a86:	f7ff febb 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000013c 	.word	0x2000013c
 8000a94:	40004400 	.word	0x40004400

08000a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	@ (8000b1c <HAL_UART_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12b      	bne.n	8000b12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a10      	ldr	r2, [pc, #64]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <HAL_UART_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af2:	230c      	movs	r3, #12
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b02:	2307      	movs	r3, #7
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <HAL_UART_MspInit+0x8c>)
 8000b0e:	f000 ff51 	bl	80019b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2c:	f7ff ff06 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	@ (8000b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f002 fe81 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fdd7 	bl	800070c <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8000b6c:	08004204 	.word	0x08004204
  ldr r2, =_sbss
 8000b70:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8000b74:	2000030c 	.word	0x2000030c

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <Controller_SetInputData>:

static watchMode_state_t modeState = TIME_WATCH;
inputData_TypeDef controlData = {0};

void Controller_SetInputData(inputData_TypeDef inputData)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	463b      	mov	r3, r7
 8000b84:	e883 0003 	stmia.w	r3, {r0, r1}
	if(inputData.id == MODE){
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d105      	bne.n	8000b9a <Controller_SetInputData+0x1e>
		controlData.id = MODE;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <Controller_SetInputData+0x50>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
		controlData.data = MODE_ACT;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <Controller_SetInputData+0x50>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	605a      	str	r2, [r3, #4]
	}

	if(inputData.id == STOPWATCH_RUNSTOP){
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d105      	bne.n	8000bac <Controller_SetInputData+0x30>
		controlData.id = STOPWATCH_RUNSTOP;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <Controller_SetInputData+0x50>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	601a      	str	r2, [r3, #0]
		controlData.data = STOPWATCH_ACT;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <Controller_SetInputData+0x50>)
 8000ba8:	2203      	movs	r2, #3
 8000baa:	605a      	str	r2, [r3, #4]
	}

	if(inputData.id == STOPWATCH_CLEAR){
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d105      	bne.n	8000bbe <Controller_SetInputData+0x42>
		controlData.id = STOPWATCH_CLEAR;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <Controller_SetInputData+0x50>)
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	601a      	str	r2, [r3, #0]
		controlData.data = STOPWATCH_ACT;
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <Controller_SetInputData+0x50>)
 8000bba:	2203      	movs	r2, #3
 8000bbc:	605a      	str	r2, [r3, #4]
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000188 	.word	0x20000188

08000bd0 <Controller_Execute>:

void Controller_Execute()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	Controller_Mode();
 8000bd4:	f000 f802 	bl	8000bdc <Controller_Mode>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <Controller_Mode>:

void Controller_Mode()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	   switch(modeState)
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <Controller_Mode+0x4c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <Controller_Mode+0x12>
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d00d      	beq.n	8000c08 <Controller_Mode+0x2c>
			   modeState = TIME_WATCH;
		   }
		   StopWatch_Execute();
		   break;
	   }
}
 8000bec:	e019      	b.n	8000c22 <Controller_Mode+0x46>
		   if(controlData.id== MODE){
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <Controller_Mode+0x50>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d105      	bne.n	8000c02 <Controller_Mode+0x26>
			   controlData.id = NO_CONTROL;
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <Controller_Mode+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
			   modeState = STOP_WATCH;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <Controller_Mode+0x4c>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
		   TimeWatch_Excute();
 8000c02:	f000 fb11 	bl	8001228 <TimeWatch_Excute>
		   break;
 8000c06:	e00c      	b.n	8000c22 <Controller_Mode+0x46>
		   if(controlData.id == MODE){
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <Controller_Mode+0x50>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d105      	bne.n	8000c1c <Controller_Mode+0x40>
			   controlData.id = MODE_NO_ACT;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <Controller_Mode+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
			   modeState = TIME_WATCH;
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <Controller_Mode+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
		   StopWatch_Execute();
 8000c1c:	f000 fa50 	bl	80010c0 <StopWatch_Execute>
		   break;
 8000c20:	bf00      	nop
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000184 	.word	0x20000184
 8000c2c:	20000188 	.word	0x20000188

08000c30 <Listener_Init>:

static void Listener_CheckButton(void); //외부에서 못부름
static void Listener_CheckUART(void);

void Listener_Init()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	  Button_Init(&hBtnMode, GPIOB,  GPIO_PIN_5);
 8000c34:	2220      	movs	r2, #32
 8000c36:	4908      	ldr	r1, [pc, #32]	@ (8000c58 <Listener_Init+0x28>)
 8000c38:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <Listener_Init+0x2c>)
 8000c3a:	f000 fb01 	bl	8001240 <Button_Init>
	  Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 8000c3e:	2208      	movs	r2, #8
 8000c40:	4905      	ldr	r1, [pc, #20]	@ (8000c58 <Listener_Init+0x28>)
 8000c42:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <Listener_Init+0x30>)
 8000c44:	f000 fafc 	bl	8001240 <Button_Init>
	  Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 8000c48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c4c:	4905      	ldr	r1, [pc, #20]	@ (8000c64 <Listener_Init+0x34>)
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <Listener_Init+0x38>)
 8000c50:	f000 faf6 	bl	8001240 <Button_Init>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	20000194 	.word	0x20000194
 8000c60:	200001a0 	.word	0x200001a0
 8000c64:	40020000 	.word	0x40020000
 8000c68:	200001ac 	.word	0x200001ac

08000c6c <Listener_Execute>:

void Listener_Execute()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	Listener_CheckUART();
 8000c70:	f000 f840 	bl	8000cf4 <Listener_CheckUART>
	Listener_CheckButton();
 8000c74:	f000 f802 	bl	8000c7c <Listener_CheckButton>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <Listener_CheckButton>:

void Listener_CheckButton(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	inputData_TypeDef inputData;

	if(Button_GetState(&hBtnMode) == ACT_RELEASED){
 8000c82:	4819      	ldr	r0, [pc, #100]	@ (8000ce8 <Listener_CheckButton+0x6c>)
 8000c84:	f000 faf2 	bl	800126c <Button_GetState>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d109      	bne.n	8000ca2 <Listener_CheckButton+0x26>
		inputData.id = MODE;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	603b      	str	r3, [r7, #0]
		inputData.data = MODE_ACT;
 8000c92:	2301      	movs	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
		Controller_SetInputData(inputData);
 8000c96:	463b      	mov	r3, r7
 8000c98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c9c:	f7ff ff6e 	bl	8000b7c <Controller_SetInputData>
	else if (Button_GetState(&hBtnClear) == ACT_PUSHED){
		inputData.id = STOPWATCH_CLEAR;
		inputData.data = STOPWATCH_ACT;
		Controller_SetInputData(inputData);
	}
}
 8000ca0:	e01e      	b.n	8000ce0 <Listener_CheckButton+0x64>
	else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED){
 8000ca2:	4812      	ldr	r0, [pc, #72]	@ (8000cec <Listener_CheckButton+0x70>)
 8000ca4:	f000 fae2 	bl	800126c <Button_GetState>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d109      	bne.n	8000cc2 <Listener_CheckButton+0x46>
		inputData.id = STOPWATCH_RUNSTOP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	603b      	str	r3, [r7, #0]
		inputData.data = STOPWATCH_ACT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	607b      	str	r3, [r7, #4]
		Controller_SetInputData(inputData);
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cbc:	f7ff ff5e 	bl	8000b7c <Controller_SetInputData>
}
 8000cc0:	e00e      	b.n	8000ce0 <Listener_CheckButton+0x64>
	else if (Button_GetState(&hBtnClear) == ACT_PUSHED){
 8000cc2:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <Listener_CheckButton+0x74>)
 8000cc4:	f000 fad2 	bl	800126c <Button_GetState>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d108      	bne.n	8000ce0 <Listener_CheckButton+0x64>
		inputData.id = STOPWATCH_CLEAR;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	603b      	str	r3, [r7, #0]
		inputData.data = STOPWATCH_ACT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	607b      	str	r3, [r7, #4]
		Controller_SetInputData(inputData);
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cdc:	f7ff ff4e 	bl	8000b7c <Controller_SetInputData>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000194 	.word	0x20000194
 8000cec:	200001a0 	.word	0x200001a0
 8000cf0:	200001ac 	.word	0x200001ac

08000cf4 <Listener_CheckUART>:

void Listener_CheckUART(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]
	if (HAL_UART_Receive(&huart2, &rx_data, sizeof(rx_data), 1) == HAL_OK){
 8000cfe:	f107 010f 	add.w	r1, r7, #15
 8000d02:	2301      	movs	r3, #1
 8000d04:	2201      	movs	r2, #1
 8000d06:	4818      	ldr	r0, [pc, #96]	@ (8000d68 <Listener_CheckUART+0x74>)
 8000d08:	f002 f9b1 	bl	800306e <HAL_UART_Receive>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d126      	bne.n	8000d60 <Listener_CheckUART+0x6c>
		 //HAL_UART_Receive_IT(&huart2, &rx_data, 1);
		inputData_TypeDef inputData;

		switch(rx_data)
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2b73      	cmp	r3, #115	@ 0x73
 8000d16:	d00f      	beq.n	8000d38 <Listener_CheckUART+0x44>
 8000d18:	2b73      	cmp	r3, #115	@ 0x73
 8000d1a:	dc21      	bgt.n	8000d60 <Listener_CheckUART+0x6c>
 8000d1c:	2b63      	cmp	r3, #99	@ 0x63
 8000d1e:	d015      	beq.n	8000d4c <Listener_CheckUART+0x58>
 8000d20:	2b6d      	cmp	r3, #109	@ 0x6d
 8000d22:	d11d      	bne.n	8000d60 <Listener_CheckUART+0x6c>
		{
		case 'm' :
			inputData.id = MODE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
			inputData.data = MODE_ACT;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
			Controller_SetInputData(inputData);
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d32:	f7ff ff23 	bl	8000b7c <Controller_SetInputData>
			break;
 8000d36:	e013      	b.n	8000d60 <Listener_CheckUART+0x6c>
		case 's' :
			inputData.id = STOPWATCH_RUNSTOP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	607b      	str	r3, [r7, #4]
			inputData.data = STOPWATCH_ACT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	60bb      	str	r3, [r7, #8]
			Controller_SetInputData(inputData);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d46:	f7ff ff19 	bl	8000b7c <Controller_SetInputData>
			break;
 8000d4a:	e009      	b.n	8000d60 <Listener_CheckUART+0x6c>
		case 'c' :
			inputData.id = STOPWATCH_CLEAR;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	607b      	str	r3, [r7, #4]
			inputData.data = STOPWATCH_ACT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	60bb      	str	r3, [r7, #8]
			Controller_SetInputData(inputData);
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d5a:	f7ff ff0f 	bl	8000b7c <Controller_SetInputData>
			break;
 8000d5e:	bf00      	nop
		}
	}

}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000013c 	.word	0x2000013c

08000d6c <Presenter_outData>:
static void Presenter_DispFND_StopWatch(watch_t watchData);

static watch_t dispData = {TIME_WATCH, 12, 0, 0, 0};

void Presenter_outData(watch_t watchData)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	463b      	mov	r3, r7
 8000d74:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(&dispData, &watchData, sizeof(watch_t));  //data copy
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <Presenter_outData+0x28>)
 8000d7a:	463a      	mov	r2, r7
 8000d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d80:	6018      	str	r0, [r3, #0]
 8000d82:	3304      	adds	r3, #4
 8000d84:	8019      	strh	r1, [r3, #0]
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000004 	.word	0x20000004

08000d98 <Presenter_Excute>:

void Presenter_Excute()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	if(dispData.id == TIME_WATCH)
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <Presenter_Excute+0x28>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <Presenter_Excute+0x18>
	{
		Presenter_DispTimeWatch(dispData);
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <Presenter_Excute+0x28>)
 8000da6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000daa:	f000 f80b 	bl	8000dc4 <Presenter_DispTimeWatch>
	}
	else //STOP_WATCH
	{
		Presenter_DispStopWatch(dispData);
	}
}
 8000dae:	e004      	b.n	8000dba <Presenter_Excute+0x22>
		Presenter_DispStopWatch(dispData);
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <Presenter_Excute+0x28>)
 8000db2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000db6:	f000 f819 	bl	8000dec <Presenter_DispStopWatch>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <Presenter_DispTimeWatch>:

void Presenter_DispTimeWatch(watch_t watchData)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	463b      	mov	r3, r7
 8000dcc:	e883 0003 	stmia.w	r3, {r0, r1}
	Presenter_DispFND_TimeWatch(watchData);
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dd6:	f000 f875 	bl	8000ec4 <Presenter_DispFND_TimeWatch>
	Presenter_DispMonitorTimeWatch(watchData);
 8000dda:	463b      	mov	r3, r7
 8000ddc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000de0:	f000 f818 	bl	8000e14 <Presenter_DispMonitorTimeWatch>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <Presenter_DispStopWatch>:

void Presenter_DispStopWatch(watch_t watchData)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	463b      	mov	r3, r7
 8000df4:	e883 0003 	stmia.w	r3, {r0, r1}
	Presenter_DispFND_StopWatch(watchData);
 8000df8:	463b      	mov	r3, r7
 8000dfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dfe:	f000 f88d 	bl	8000f1c <Presenter_DispFND_StopWatch>
	Presenter_DispMonitorStopWatch(watchData);
 8000e02:	463b      	mov	r3, r7
 8000e04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e08:	f000 f830 	bl	8000e6c <Presenter_DispMonitorStopWatch>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <Presenter_DispMonitorTimeWatch>:


void Presenter_DispMonitorTimeWatch(watch_t watchData) //timewatch 출력
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b093      	sub	sp, #76	@ 0x4c
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	e883 0003 	stmia.w	r3, {r0, r1}
	char str[50];
	sprintf(str,"Time Watch : %02d:%02d:%02d:%03d\n", watchData.hour, watchData.min, watchData.sec, watchData.msec); //str 공간에 "~~"값 저장
 8000e20:	787b      	ldrb	r3, [r7, #1]
 8000e22:	4619      	mov	r1, r3
 8000e24:	78bb      	ldrb	r3, [r7, #2]
 8000e26:	461c      	mov	r4, r3
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	88ba      	ldrh	r2, [r7, #4]
 8000e2c:	f107 000c 	add.w	r0, r7, #12
 8000e30:	9201      	str	r2, [sp, #4]
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	4623      	mov	r3, r4
 8000e36:	460a      	mov	r2, r1
 8000e38:	490a      	ldr	r1, [pc, #40]	@ (8000e64 <Presenter_DispMonitorTimeWatch+0x50>)
 8000e3a:	f002 fcdf 	bl	80037fc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str),1000);
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f9cc 	bl	80001e0 <strlen>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	f107 010c 	add.w	r1, r7, #12
 8000e50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e54:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <Presenter_DispMonitorTimeWatch+0x54>)
 8000e56:	f002 f87f 	bl	8002f58 <HAL_UART_Transmit>
}
 8000e5a:	bf00      	nop
 8000e5c:	3744      	adds	r7, #68	@ 0x44
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08004154 	.word	0x08004154
 8000e68:	2000013c 	.word	0x2000013c

08000e6c <Presenter_DispMonitorStopWatch>:

void Presenter_DispMonitorStopWatch(watch_t watchData)  //stopwatch 출력
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b093      	sub	sp, #76	@ 0x4c
 8000e70:	af02      	add	r7, sp, #8
 8000e72:	463b      	mov	r3, r7
 8000e74:	e883 0003 	stmia.w	r3, {r0, r1}
	char str[50];
	sprintf(str,"Stop Watch : %02d:%02d:%02d:%03d\n", watchData.hour, watchData.min, watchData.sec, watchData.msec); //str 공간에 "~~"값 저장
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	78bb      	ldrb	r3, [r7, #2]
 8000e7e:	461c      	mov	r4, r3
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	88ba      	ldrh	r2, [r7, #4]
 8000e84:	f107 000c 	add.w	r0, r7, #12
 8000e88:	9201      	str	r2, [sp, #4]
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	4623      	mov	r3, r4
 8000e8e:	460a      	mov	r2, r1
 8000e90:	490a      	ldr	r1, [pc, #40]	@ (8000ebc <Presenter_DispMonitorStopWatch+0x50>)
 8000e92:	f002 fcb3 	bl	80037fc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str),1000);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff f9a0 	bl	80001e0 <strlen>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	f107 010c 	add.w	r1, r7, #12
 8000ea8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <Presenter_DispMonitorStopWatch+0x54>)
 8000eae:	f002 f853 	bl	8002f58 <HAL_UART_Transmit>
}
 8000eb2:	bf00      	nop
 8000eb4:	3744      	adds	r7, #68	@ 0x44
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	08004178 	.word	0x08004178
 8000ec0:	2000013c 	.word	0x2000013c

08000ec4 <Presenter_DispFND_TimeWatch>:


void Presenter_DispFND_TimeWatch(watch_t watchData)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	463b      	mov	r3, r7
 8000ecc:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(watchData.hour*100 + watchData.min);
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	0091      	lsls	r1, r2, #2
 8000edc:	461a      	mov	r2, r3
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	78ba      	ldrb	r2, [r7, #2]
 8000ee8:	4413      	add	r3, r2
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fa17 	bl	8001320 <FND_WriteData>

	FND_WriteDp(FND_DP_1 | FND_DP_100 | FND_DP_1000, FND_DP_OFF);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	200d      	movs	r0, #13
 8000ef6:	f000 f9eb 	bl	80012d0 <FND_WriteDp>
	if(watchData.msec < 500 -1) {
 8000efa:	88bb      	ldrh	r3, [r7, #4]
 8000efc:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
 8000f00:	d804      	bhi.n	8000f0c <Presenter_DispFND_TimeWatch+0x48>
		FND_WriteDp(FND_DP_10, FND_DP_ON);
 8000f02:	2101      	movs	r1, #1
 8000f04:	2002      	movs	r0, #2
 8000f06:	f000 f9e3 	bl	80012d0 <FND_WriteDp>
	} else
		FND_WriteDp(FND_DP_10, FND_DP_OFF);
}
 8000f0a:	e003      	b.n	8000f14 <Presenter_DispFND_TimeWatch+0x50>
		FND_WriteDp(FND_DP_10, FND_DP_OFF);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f000 f9de 	bl	80012d0 <FND_WriteDp>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <Presenter_DispFND_StopWatch>:

void Presenter_DispFND_StopWatch(watch_t watchData)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	463b      	mov	r3, r7
 8000f24:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(((watchData.min % 10)* 1000) + (watchData.sec*10) + (watchData.msec/100));
 8000f28:	78ba      	ldrb	r2, [r7, #2]
 8000f2a:	4b27      	ldr	r3, [pc, #156]	@ (8000fc8 <Presenter_DispFND_StopWatch+0xac>)
 8000f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f30:	08d9      	lsrs	r1, r3, #3
 8000f32:	460b      	mov	r3, r1
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	0152      	lsls	r2, r2, #5
 8000f42:	1ad2      	subs	r2, r2, r3
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	0089      	lsls	r1, r1, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4413      	add	r3, r2
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	491b      	ldr	r1, [pc, #108]	@ (8000fcc <Presenter_DispFND_StopWatch+0xb0>)
 8000f60:	fba1 1303 	umull	r1, r3, r1, r3
 8000f64:	095b      	lsrs	r3, r3, #5
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f9d7 	bl	8001320 <FND_WriteData>

	FND_WriteDp(FND_DP_1000 | FND_DP_1, FND_DP_OFF);
 8000f72:	2100      	movs	r1, #0
 8000f74:	2009      	movs	r0, #9
 8000f76:	f000 f9ab 	bl	80012d0 <FND_WriteDp>
	if(watchData.msec % 100 < 50 -1) {
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <Presenter_DispFND_StopWatch+0xb0>)
 8000f7e:	fba2 1203 	umull	r1, r2, r2, r3
 8000f82:	0952      	lsrs	r2, r2, #5
 8000f84:	2164      	movs	r1, #100	@ 0x64
 8000f86:	fb01 f202 	mul.w	r2, r1, r2
 8000f8a:	1a9b      	subs	r3, r3, r2
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	2b30      	cmp	r3, #48	@ 0x30
 8000f90:	d804      	bhi.n	8000f9c <Presenter_DispFND_StopWatch+0x80>
		FND_WriteDp(FND_DP_10, FND_DP_ON);
 8000f92:	2101      	movs	r1, #1
 8000f94:	2002      	movs	r0, #2
 8000f96:	f000 f99b 	bl	80012d0 <FND_WriteDp>
 8000f9a:	e003      	b.n	8000fa4 <Presenter_DispFND_StopWatch+0x88>
	} else
		FND_WriteDp(FND_DP_10, FND_DP_OFF);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f000 f996 	bl	80012d0 <FND_WriteDp>

	if(watchData.msec < 500 -1) {
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
 8000faa:	d804      	bhi.n	8000fb6 <Presenter_DispFND_StopWatch+0x9a>
		FND_WriteDp(FND_DP_100, FND_DP_ON);
 8000fac:	2101      	movs	r1, #1
 8000fae:	2004      	movs	r0, #4
 8000fb0:	f000 f98e 	bl	80012d0 <FND_WriteDp>
	} else
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
}
 8000fb4:	e003      	b.n	8000fbe <Presenter_DispFND_StopWatch+0xa2>
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2004      	movs	r0, #4
 8000fba:	f000 f989 	bl	80012d0 <FND_WriteDp>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	cccccccd 	.word	0xcccccccd
 8000fcc:	51eb851f 	.word	0x51eb851f

08000fd0 <HAL_TIM_PeriodElapsedCallback>:
#include "ap_main.h"

//typedef enum {TIME_WATCH, STOP_WATCH} watch_state_t;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //Interrupt 발생시켜 FND 출력
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	if(htim->Instance ==TIM2) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe0:	d105      	bne.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x1e>
		FND_DisplayDataCallBack();
 8000fe2:	f000 f9ad 	bl	8001340 <FND_DisplayDataCallBack>
		TimeWatch_IncTimeCallBack();
 8000fe6:	f000 f8dd 	bl	80011a4 <TimeWatch_IncTimeCallBack>
		StopWatch_IncTimeCallBack();
 8000fea:	f000 f81b 	bl	8001024 <StopWatch_IncTimeCallBack>
	}
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <ap_main>:


int ap_main()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2); //start Interrupt
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <ap_main+0x1c>)
 8000ffe:	f001 fb77 	bl	80026f0 <HAL_TIM_Base_Start_IT>
   while(1)
   {
	   Listener_Execute();
 8001002:	f7ff fe33 	bl	8000c6c <Listener_Execute>
	   Controller_Execute();
 8001006:	f7ff fde3 	bl	8000bd0 <Controller_Execute>
	   Presenter_Excute();
 800100a:	f7ff fec5 	bl	8000d98 <Presenter_Excute>
   {
 800100e:	bf00      	nop
 8001010:	e7f7      	b.n	8001002 <ap_main+0xa>
 8001012:	bf00      	nop
 8001014:	200000f4 	.word	0x200000f4

08001018 <ap_Init>:
   }
   return 0;
}

void ap_Init()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	Listener_Init();
 800101c:	f7ff fe08 	bl	8000c30 <Listener_Init>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <StopWatch_IncTimeCallBack>:

static stopwatch_state_t stopWatchState = STOP;


void StopWatch_IncTimeCallBack()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	if(stopWatchState == RUN){ //RU
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <StopWatch_IncTimeCallBack+0x14>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <StopWatch_IncTimeCallBack+0x10>
		StopWatch_IncTime();
 8001030:	f000 f804 	bl	800103c <StopWatch_IncTime>
	}
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000190 	.word	0x20000190

0800103c <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
	if(stopWatch.msec < 1000 - 1){
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <StopWatch_IncTime+0x80>)
 8001042:	889b      	ldrh	r3, [r3, #4]
 8001044:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001048:	4293      	cmp	r3, r2
 800104a:	d806      	bhi.n	800105a <StopWatch_IncTime+0x1e>
		stopWatch.msec++;
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <StopWatch_IncTime+0x80>)
 800104e:	889b      	ldrh	r3, [r3, #4]
 8001050:	3301      	adds	r3, #1
 8001052:	b29a      	uxth	r2, r3
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <StopWatch_IncTime+0x80>)
 8001056:	809a      	strh	r2, [r3, #4]
		return;
 8001058:	e02c      	b.n	80010b4 <StopWatch_IncTime+0x78>
	}
	stopWatch.msec = 0;
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <StopWatch_IncTime+0x80>)
 800105c:	2200      	movs	r2, #0
 800105e:	809a      	strh	r2, [r3, #4]

	if(stopWatch.sec < 60 - 1){
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <StopWatch_IncTime+0x80>)
 8001062:	78db      	ldrb	r3, [r3, #3]
 8001064:	2b3a      	cmp	r3, #58	@ 0x3a
 8001066:	d806      	bhi.n	8001076 <StopWatch_IncTime+0x3a>
		stopWatch.sec++;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <StopWatch_IncTime+0x80>)
 800106a:	78db      	ldrb	r3, [r3, #3]
 800106c:	3301      	adds	r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <StopWatch_IncTime+0x80>)
 8001072:	70da      	strb	r2, [r3, #3]
		return;
 8001074:	e01e      	b.n	80010b4 <StopWatch_IncTime+0x78>
	}
	stopWatch.sec = 0;
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <StopWatch_IncTime+0x80>)
 8001078:	2200      	movs	r2, #0
 800107a:	70da      	strb	r2, [r3, #3]

	if(stopWatch.min < 60 - 1){
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <StopWatch_IncTime+0x80>)
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b3a      	cmp	r3, #58	@ 0x3a
 8001082:	d806      	bhi.n	8001092 <StopWatch_IncTime+0x56>
		stopWatch.min++;
 8001084:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <StopWatch_IncTime+0x80>)
 8001086:	789b      	ldrb	r3, [r3, #2]
 8001088:	3301      	adds	r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <StopWatch_IncTime+0x80>)
 800108e:	709a      	strb	r2, [r3, #2]
		return;
 8001090:	e010      	b.n	80010b4 <StopWatch_IncTime+0x78>
	}
	stopWatch.min = 0;
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <StopWatch_IncTime+0x80>)
 8001094:	2200      	movs	r2, #0
 8001096:	709a      	strb	r2, [r3, #2]

	if(stopWatch.hour < 24 - 1){
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <StopWatch_IncTime+0x80>)
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	2b16      	cmp	r3, #22
 800109e:	d806      	bhi.n	80010ae <StopWatch_IncTime+0x72>
		stopWatch.hour++;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <StopWatch_IncTime+0x80>)
 80010a2:	785b      	ldrb	r3, [r3, #1]
 80010a4:	3301      	adds	r3, #1
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <StopWatch_IncTime+0x80>)
 80010aa:	705a      	strb	r2, [r3, #1]
		return;
 80010ac:	e002      	b.n	80010b4 <StopWatch_IncTime+0x78>
	}
	stopWatch.hour = 0;
 80010ae:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <StopWatch_IncTime+0x80>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	705a      	strb	r2, [r3, #1]
}
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	2000000c 	.word	0x2000000c

080010c0 <StopWatch_Execute>:



void StopWatch_Execute()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	switch(stopWatchState) {
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <StopWatch_Execute+0x3c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d00c      	beq.n	80010e6 <StopWatch_Execute+0x26>
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	dc0d      	bgt.n	80010ec <StopWatch_Execute+0x2c>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <StopWatch_Execute+0x1a>
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d003      	beq.n	80010e0 <StopWatch_Execute+0x20>
 80010d8:	e008      	b.n	80010ec <StopWatch_Execute+0x2c>
		case  STOP :
			StopWatch_Stop();
 80010da:	f000 f813 	bl	8001104 <StopWatch_Stop>
			break;
 80010de:	e005      	b.n	80010ec <StopWatch_Execute+0x2c>
		case  RUN :
			StopWatch_Run();
 80010e0:	f000 f830 	bl	8001144 <StopWatch_Run>
			break;
 80010e4:	e002      	b.n	80010ec <StopWatch_Execute+0x2c>
		case CLEAR :
			StopWatch_Clear();
 80010e6:	f000 f843 	bl	8001170 <StopWatch_Clear>
			break;
 80010ea:	bf00      	nop
		}
	Presenter_outData(stopWatch);
 80010ec:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <StopWatch_Execute+0x40>)
 80010ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010f2:	f7ff fe3b 	bl	8000d6c <Presenter_outData>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000190 	.word	0x20000190
 8001100:	2000000c 	.word	0x2000000c

08001104 <StopWatch_Stop>:

void StopWatch_Stop()
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	if(controlData.id == STOPWATCH_RUNSTOP ){
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <StopWatch_Stop+0x38>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d106      	bne.n	800111e <StopWatch_Stop+0x1a>
		controlData.id = NO_CONTROL;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <StopWatch_Stop+0x38>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
		stopWatchState = RUN;
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <StopWatch_Stop+0x3c>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
	else if (controlData.id == STOPWATCH_CLEAR ){
		controlData.id = NO_CONTROL;
		stopWatchState = CLEAR;
	}
	//FND_WriteData(((stopWatch.min % 10)* 1000) + (stopWatch.sec*10) + (stopWatch.msec/100));
}
 800111c:	e009      	b.n	8001132 <StopWatch_Stop+0x2e>
	else if (controlData.id == STOPWATCH_CLEAR ){
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <StopWatch_Stop+0x38>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d105      	bne.n	8001132 <StopWatch_Stop+0x2e>
		controlData.id = NO_CONTROL;
 8001126:	4b05      	ldr	r3, [pc, #20]	@ (800113c <StopWatch_Stop+0x38>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
		stopWatchState = CLEAR;
 800112c:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <StopWatch_Stop+0x3c>)
 800112e:	2202      	movs	r2, #2
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	20000188 	.word	0x20000188
 8001140:	20000190 	.word	0x20000190

08001144 <StopWatch_Run>:

void StopWatch_Run()
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	if (controlData.id == STOPWATCH_RUNSTOP ){
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <StopWatch_Run+0x24>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d105      	bne.n	800115c <StopWatch_Run+0x18>
		controlData.id = NO_CONTROL;
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <StopWatch_Run+0x24>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
		stopWatchState = STOP;
 8001156:	4b05      	ldr	r3, [pc, #20]	@ (800116c <StopWatch_Run+0x28>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
	}

}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000188 	.word	0x20000188
 800116c:	20000190 	.word	0x20000190

08001170 <StopWatch_Clear>:

void StopWatch_Clear()
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	stopWatchState = STOP;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <StopWatch_Clear+0x2c>)
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
	stopWatch.msec = 0;
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <StopWatch_Clear+0x30>)
 800117c:	2200      	movs	r2, #0
 800117e:	809a      	strh	r2, [r3, #4]
	stopWatch.sec = 0;
 8001180:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <StopWatch_Clear+0x30>)
 8001182:	2200      	movs	r2, #0
 8001184:	70da      	strb	r2, [r3, #3]
	stopWatch.min = 0;
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <StopWatch_Clear+0x30>)
 8001188:	2200      	movs	r2, #0
 800118a:	709a      	strb	r2, [r3, #2]
	stopWatch.hour = 0;
 800118c:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <StopWatch_Clear+0x30>)
 800118e:	2200      	movs	r2, #0
 8001190:	705a      	strb	r2, [r3, #1]
	//FND_WriteData(((stopWatch.min % 10)* 1000) + (stopWatch.sec*10) + (stopWatch.msec/100));

}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	20000190 	.word	0x20000190
 80011a0:	2000000c 	.word	0x2000000c

080011a4 <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH,12,0,0,0}; //all 0

void TimeWatch_IncTimeCallBack()
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	if(timeWatch.msec < 1000 - 1){
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011aa:	889b      	ldrh	r3, [r3, #4]
 80011ac:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d806      	bhi.n	80011c2 <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011be:	809a      	strh	r2, [r3, #4]
		return;
 80011c0:	e02c      	b.n	800121c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.msec = 0;
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	809a      	strh	r2, [r3, #4]

	if(timeWatch.sec < 60 - 1){
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011ca:	78db      	ldrb	r3, [r3, #3]
 80011cc:	2b3a      	cmp	r3, #58	@ 0x3a
 80011ce:	d806      	bhi.n	80011de <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011d2:	78db      	ldrb	r3, [r3, #3]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011da:	70da      	strb	r2, [r3, #3]
		return;
 80011dc:	e01e      	b.n	800121c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.sec = 0;
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	70da      	strb	r2, [r3, #3]

	if(timeWatch.min < 60 - 1){
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011e6:	789b      	ldrb	r3, [r3, #2]
 80011e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80011ea:	d806      	bhi.n	80011fa <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011ee:	789b      	ldrb	r3, [r3, #2]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011f6:	709a      	strb	r2, [r3, #2]
		return;
 80011f8:	e010      	b.n	800121c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	709a      	strb	r2, [r3, #2]

	if(timeWatch.hour < 24 - 1){
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	2b16      	cmp	r3, #22
 8001206:	d806      	bhi.n	8001216 <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	3301      	adds	r3, #1
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b04      	ldr	r3, [pc, #16]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 8001212:	705a      	strb	r2, [r3, #1]
		return;
 8001214:	e002      	b.n	800121c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 8001216:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <TimeWatch_IncTimeCallBack+0x80>)
 8001218:	2200      	movs	r2, #0
 800121a:	705a      	strb	r2, [r3, #1]
}
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	20000014 	.word	0x20000014

08001228 <TimeWatch_Excute>:

void TimeWatch_Excute()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	//presenter에 Data 출력, 데이터만 전달
	Presenter_outData(timeWatch);
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <TimeWatch_Excute+0x14>)
 800122e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001232:	f7ff fd9b 	bl	8000d6c <Presenter_outData>

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000014 	.word	0x20000014

08001240 <Button_Init>:
Button_Handler_t hBtnMode;
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	4613      	mov	r3, r2
 800124c:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	88fa      	ldrh	r2, [r7, #6]
 8001258:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2201      	movs	r2, #1
 800125e:	609a      	str	r2, [r3, #8]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); //pushed = 0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	889b      	ldrh	r3, [r3, #4]
 800127c:	4619      	mov	r1, r3
 800127e:	4610      	mov	r0, r2
 8001280:	f000 fd1c 	bl	8001cbc <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	60fb      	str	r3, [r7, #12]

	if(hbtn->prevState == RELEASED && (curState == PUSHED)){ //1st button pushed
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d10a      	bne.n	80012a6 <Button_GetState+0x3a>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d107      	bne.n	80012a6 <Button_GetState+0x3a>
		HAL_Delay(2);  //debounce
 8001296:	2002      	movs	r0, #2
 8001298:	f000 fa56 	bl	8001748 <HAL_Delay>
		hbtn->prevState = PUSHED; //state Update
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <Button_GetState+0x5a>
	}
	else if (hbtn->prevState == PUSHED && (curState == RELEASED)){ //1st button pushed
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10a      	bne.n	80012c4 <Button_GetState+0x58>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d107      	bne.n	80012c4 <Button_GetState+0x58>
		HAL_Delay(2); //debounce
 80012b4:	2002      	movs	r0, #2
 80012b6:	f000 fa47 	bl	8001748 <HAL_Delay>
		hbtn->prevState = RELEASED; //state Update
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 80012c0:	2302      	movs	r3, #2
 80012c2:	e000      	b.n	80012c6 <Button_GetState+0x5a>
	}

	return NO_ACT ;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <FND_WriteDp>:
static uint16_t fndDispNum = 0; // FND display main data(외부 파일에서 접근XXX)
static uint8_t fndDispDp = 0;  // FND Dot Data , xxxx1111 (1 = DP 위치) -> xxxx_dp1000_dp100_dp10_dp1


void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	460a      	mov	r2, r1
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	4613      	mov	r3, r2
 80012de:	71bb      	strb	r3, [r7, #6]
	if(dpState == FND_DP_ON){
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <FND_WriteDp+0x26>
		fndDispDp |= dpData;
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <FND_WriteDp+0x4c>)
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <FND_WriteDp+0x4c>)
 80012f2:	701a      	strb	r2, [r3, #0]
	} else {
		fndDispDp &= ~dpData;
	}
}
 80012f4:	e00b      	b.n	800130e <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	b25a      	sxtb	r2, r3
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <FND_WriteDp+0x4c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b25b      	sxtb	r3, r3
 8001304:	4013      	ands	r3, r2
 8001306:	b25b      	sxtb	r3, r3
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b04      	ldr	r3, [pc, #16]	@ (800131c <FND_WriteDp+0x4c>)
 800130c:	701a      	strb	r2, [r3, #0]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200001ba 	.word	0x200001ba

08001320 <FND_WriteData>:


// write fndDisNum
void FND_WriteData(uint16_t data)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
   fndDispNum = data;
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <FND_WriteData+0x1c>)
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	8013      	strh	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	200001b8 	.word	0x200001b8

08001340 <FND_DisplayDataCallBack>:
{
   return fndDispNum;
}
// display fndDisNum
void FND_DisplayDataCallBack()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
   static int digitPos = 0; // digit 자리 표현 변수
   // interrupt 발생하면 한 자리씩 출력한다.
   digitPos = (digitPos + 1) % 8; // 0~3까지 출력 반복
 8001344:	4b80      	ldr	r3, [pc, #512]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	425a      	negs	r2, r3
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	f002 0207 	and.w	r2, r2, #7
 8001354:	bf58      	it	pl
 8001356:	4253      	negpl	r3, r2
 8001358:	4a7b      	ldr	r2, [pc, #492]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 800135a:	6013      	str	r3, [r2, #0]

   switch(digitPos)
 800135c:	4b7a      	ldr	r3, [pc, #488]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b07      	cmp	r3, #7
 8001362:	f200 80ee 	bhi.w	8001542 <FND_DisplayDataCallBack+0x202>
 8001366:	a201      	add	r2, pc, #4	@ (adr r2, 800136c <FND_DisplayDataCallBack+0x2c>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	0800138d 	.word	0x0800138d
 8001370:	080013bb 	.word	0x080013bb
 8001374:	080013f3 	.word	0x080013f3
 8001378:	0800142b 	.word	0x0800142b
 800137c:	0800150b 	.word	0x0800150b
 8001380:	080014d3 	.word	0x080014d3
 8001384:	0800149b 	.word	0x0800149b
 8001388:	08001463 	.word	0x08001463
   {
   // 계속 켜져있으면 FND 켜져있을 때 데이터가 바뀌면서 잔상이 생긴다
   // -> FND를 끄고 데이터를 바꾸고 다시 킨다.
   case DIGIT_1:
      FND_DispOffALL();
 800138c:	f000 f900 	bl	8001590 <FND_DispOffALL>
      FND_DispDigit(fndDispNum%10);
 8001390:	4b6e      	ldr	r3, [pc, #440]	@ (800154c <FND_DisplayDataCallBack+0x20c>)
 8001392:	881a      	ldrh	r2, [r3, #0]
 8001394:	4b6e      	ldr	r3, [pc, #440]	@ (8001550 <FND_DisplayDataCallBack+0x210>)
 8001396:	fba3 1302 	umull	r1, r3, r3, r2
 800139a:	08d9      	lsrs	r1, r3, #3
 800139c:	460b      	mov	r3, r1
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f913 	bl	80015d4 <FND_DispDigit>
      FND_DispOn(digitPos);
 80013ae:	4b66      	ldr	r3, [pc, #408]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f8d4 	bl	8001560 <FND_DispOn>
      break;
 80013b8:	e0c3      	b.n	8001542 <FND_DisplayDataCallBack+0x202>
   case DIGIT_10:
      FND_DispOffALL();
 80013ba:	f000 f8e9 	bl	8001590 <FND_DispOffALL>
      FND_DispDigit(fndDispNum/10%10);
 80013be:	4b63      	ldr	r3, [pc, #396]	@ (800154c <FND_DisplayDataCallBack+0x20c>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	4a63      	ldr	r2, [pc, #396]	@ (8001550 <FND_DisplayDataCallBack+0x210>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b60      	ldr	r3, [pc, #384]	@ (8001550 <FND_DisplayDataCallBack+0x210>)
 80013ce:	fba3 1302 	umull	r1, r3, r3, r2
 80013d2:	08d9      	lsrs	r1, r3, #3
 80013d4:	460b      	mov	r3, r1
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f8f7 	bl	80015d4 <FND_DispDigit>
      FND_DispOn(digitPos);
 80013e6:	4b58      	ldr	r3, [pc, #352]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f8b8 	bl	8001560 <FND_DispOn>
      break;
 80013f0:	e0a7      	b.n	8001542 <FND_DisplayDataCallBack+0x202>
   case DIGIT_100:
      FND_DispOffALL();
 80013f2:	f000 f8cd 	bl	8001590 <FND_DispOffALL>
      FND_DispDigit(fndDispNum/100%10);
 80013f6:	4b55      	ldr	r3, [pc, #340]	@ (800154c <FND_DisplayDataCallBack+0x20c>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	4a56      	ldr	r2, [pc, #344]	@ (8001554 <FND_DisplayDataCallBack+0x214>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	095b      	lsrs	r3, r3, #5
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b52      	ldr	r3, [pc, #328]	@ (8001550 <FND_DisplayDataCallBack+0x210>)
 8001406:	fba3 1302 	umull	r1, r3, r3, r2
 800140a:	08d9      	lsrs	r1, r3, #3
 800140c:	460b      	mov	r3, r1
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	b29b      	uxth	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f8db 	bl	80015d4 <FND_DispDigit>
      FND_DispOn(digitPos);
 800141e:	4b4a      	ldr	r3, [pc, #296]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f89c 	bl	8001560 <FND_DispOn>
      break;
 8001428:	e08b      	b.n	8001542 <FND_DisplayDataCallBack+0x202>
   case DIGIT_1000:
      FND_DispOffALL();
 800142a:	f000 f8b1 	bl	8001590 <FND_DispOffALL>
      FND_DispDigit(fndDispNum/1000%10);
 800142e:	4b47      	ldr	r3, [pc, #284]	@ (800154c <FND_DisplayDataCallBack+0x20c>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	4a49      	ldr	r2, [pc, #292]	@ (8001558 <FND_DisplayDataCallBack+0x218>)
 8001434:	fba2 2303 	umull	r2, r3, r2, r3
 8001438:	099b      	lsrs	r3, r3, #6
 800143a:	b29a      	uxth	r2, r3
 800143c:	4b44      	ldr	r3, [pc, #272]	@ (8001550 <FND_DisplayDataCallBack+0x210>)
 800143e:	fba3 1302 	umull	r1, r3, r3, r2
 8001442:	08d9      	lsrs	r1, r3, #3
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b29b      	uxth	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f8bf 	bl	80015d4 <FND_DispDigit>
      FND_DispOn(digitPos);
 8001456:	4b3c      	ldr	r3, [pc, #240]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f880 	bl	8001560 <FND_DispOn>
      break;
 8001460:	e06f      	b.n	8001542 <FND_DisplayDataCallBack+0x202>
   case DIGIT_DP1:
      FND_DispOffALL();
 8001462:	f000 f895 	bl	8001590 <FND_DispOffALL>
      if(fndDispDp & (1<<0)){
 8001466:	4b3d      	ldr	r3, [pc, #244]	@ (800155c <FND_DisplayDataCallBack+0x21c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <FND_DisplayDataCallBack+0x13a>
    	  FND_DispDigit(10);  //10 = DP on,
 8001472:	200a      	movs	r0, #10
 8001474:	f000 f8ae 	bl	80015d4 <FND_DispDigit>
 8001478:	e002      	b.n	8001480 <FND_DisplayDataCallBack+0x140>
      } else {
    	  FND_DispDigit(11);  //11 = ALL off
 800147a:	200b      	movs	r0, #11
 800147c:	f000 f8aa 	bl	80015d4 <FND_DispDigit>
      }
      FND_DispOn(digitPos % 4);
 8001480:	4b31      	ldr	r3, [pc, #196]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	425a      	negs	r2, r3
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	f002 0203 	and.w	r2, r2, #3
 800148e:	bf58      	it	pl
 8001490:	4253      	negpl	r3, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f864 	bl	8001560 <FND_DispOn>
      break;
 8001498:	e053      	b.n	8001542 <FND_DisplayDataCallBack+0x202>
   case DIGIT_DP10:
      FND_DispOffALL();
 800149a:	f000 f879 	bl	8001590 <FND_DispOffALL>
      if(fndDispDp & (1<<1)){
 800149e:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <FND_DisplayDataCallBack+0x21c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <FND_DisplayDataCallBack+0x172>
    	  FND_DispDigit(10);  //10 = DP on,
 80014aa:	200a      	movs	r0, #10
 80014ac:	f000 f892 	bl	80015d4 <FND_DispDigit>
 80014b0:	e002      	b.n	80014b8 <FND_DisplayDataCallBack+0x178>
      } else {
    	  FND_DispDigit(11);  //11 = ALL off
 80014b2:	200b      	movs	r0, #11
 80014b4:	f000 f88e 	bl	80015d4 <FND_DispDigit>
      }
      FND_DispOn(digitPos % 4);
 80014b8:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	425a      	negs	r2, r3
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	f002 0203 	and.w	r2, r2, #3
 80014c6:	bf58      	it	pl
 80014c8:	4253      	negpl	r3, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f848 	bl	8001560 <FND_DispOn>
      break;
 80014d0:	e037      	b.n	8001542 <FND_DisplayDataCallBack+0x202>
   case DIGIT_DP100:
      FND_DispOffALL();
 80014d2:	f000 f85d 	bl	8001590 <FND_DispOffALL>
      if(fndDispDp & (1<<2)){
 80014d6:	4b21      	ldr	r3, [pc, #132]	@ (800155c <FND_DisplayDataCallBack+0x21c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <FND_DisplayDataCallBack+0x1aa>
    	  FND_DispDigit(10);  //10 = DP on,
 80014e2:	200a      	movs	r0, #10
 80014e4:	f000 f876 	bl	80015d4 <FND_DispDigit>
 80014e8:	e002      	b.n	80014f0 <FND_DisplayDataCallBack+0x1b0>
      } else {
    	  FND_DispDigit(11);  //11 = ALL off
 80014ea:	200b      	movs	r0, #11
 80014ec:	f000 f872 	bl	80015d4 <FND_DispDigit>
      }
      FND_DispOn(digitPos % 4);
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	425a      	negs	r2, r3
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	f002 0203 	and.w	r2, r2, #3
 80014fe:	bf58      	it	pl
 8001500:	4253      	negpl	r3, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f82c 	bl	8001560 <FND_DispOn>
      break;
 8001508:	e01b      	b.n	8001542 <FND_DisplayDataCallBack+0x202>
   case DIGIT_DP1000:
      FND_DispOffALL();
 800150a:	f000 f841 	bl	8001590 <FND_DispOffALL>
      if(fndDispDp & (1<<3)){
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <FND_DisplayDataCallBack+0x21c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <FND_DisplayDataCallBack+0x1e2>
    	  FND_DispDigit(10);  //10 = DP on,
 800151a:	200a      	movs	r0, #10
 800151c:	f000 f85a 	bl	80015d4 <FND_DispDigit>
 8001520:	e002      	b.n	8001528 <FND_DisplayDataCallBack+0x1e8>
      } else {
    	  FND_DispDigit(11);  //11 = ALL off
 8001522:	200b      	movs	r0, #11
 8001524:	f000 f856 	bl	80015d4 <FND_DispDigit>
      }
      FND_DispOn(digitPos % 4);
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <FND_DisplayDataCallBack+0x208>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	425a      	negs	r2, r3
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	f002 0203 	and.w	r2, r2, #3
 8001536:	bf58      	it	pl
 8001538:	4253      	negpl	r3, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f810 	bl	8001560 <FND_DispOn>
      break;
 8001540:	bf00      	nop
   }
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200001bc 	.word	0x200001bc
 800154c:	200001b8 	.word	0x200001b8
 8001550:	cccccccd 	.word	0xcccccccd
 8001554:	51eb851f 	.word	0x51eb851f
 8001558:	10624dd3 	.word	0x10624dd3
 800155c:	200001ba 	.word	0x200001ba

08001560 <FND_DispOn>:


void FND_DispOn(int fndPos)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
   // GPIO_WritePin(GPIOx, PiNum, RESET); - Cathode type(Anode type은 반대)
      HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 8001568:	4a08      	ldr	r2, [pc, #32]	@ (800158c <FND_DispOn+0x2c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001570:	4a06      	ldr	r2, [pc, #24]	@ (800158c <FND_DispOn+0x2c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	b29b      	uxth	r3, r3
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f000 fbb4 	bl	8001cec <HAL_GPIO_WritePin>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000001c 	.word	0x2000001c

08001590 <FND_DispOffALL>:

void FND_DispOffALL()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
   for(int i=0; i<4; i++){
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	e010      	b.n	80015be <FND_DispOffALL+0x2e>
      HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, RESET);
 800159c:	4a0c      	ldr	r2, [pc, #48]	@ (80015d0 <FND_DispOffALL+0x40>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <FND_DispOffALL+0x40>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	f000 fb9a 	bl	8001cec <HAL_GPIO_WritePin>
   for(int i=0; i<4; i++){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3301      	adds	r3, #1
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	ddeb      	ble.n	800159c <FND_DispOffALL+0xc>
   }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000001c 	.word	0x2000001c

080015d4 <FND_DispDigit>:


void FND_DispDigit(uint16_t digit)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
   const uint8_t segFont[12] = {
 80015de:	4a1f      	ldr	r2, [pc, #124]	@ (800165c <FND_DispDigit+0x88>)
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80015e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		 0x80, //dp
		 0x00  //off
   };


   for(int i=0; i<8; i++){
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e02c      	b.n	800164a <FND_DispDigit+0x76>
		  if(!(segFont[digit] & (1<<i))){
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	3318      	adds	r3, #24
 80015f4:	443b      	add	r3, r7
 80015f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015fa:	461a      	mov	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa42 f303 	asr.w	r3, r2, r3
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10e      	bne.n	8001628 <FND_DispDigit+0x54>
			  HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);    // data = 0 -> offCathode type(Anode type은 반대)
 800160a:	4a15      	ldr	r2, [pc, #84]	@ (8001660 <FND_DispDigit+0x8c>)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001612:	4a13      	ldr	r2, [pc, #76]	@ (8001660 <FND_DispDigit+0x8c>)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4413      	add	r3, r2
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	b29b      	uxth	r3, r3
 800161e:	2201      	movs	r2, #1
 8001620:	4619      	mov	r1, r3
 8001622:	f000 fb63 	bl	8001cec <HAL_GPIO_WritePin>
 8001626:	e00d      	b.n	8001644 <FND_DispDigit+0x70>
		  }
		  else{
			 HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);      // data = 1 -> onCathode type(Anode type은 반대)
 8001628:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <FND_DispDigit+0x8c>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001630:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <FND_DispDigit+0x8c>)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	b29b      	uxth	r3, r3
 800163c:	2200      	movs	r2, #0
 800163e:	4619      	mov	r1, r3
 8001640:	f000 fb54 	bl	8001cec <HAL_GPIO_WritePin>
   for(int i=0; i<8; i++){
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b07      	cmp	r3, #7
 800164e:	ddcf      	ble.n	80015f0 <FND_DispDigit+0x1c>
		  }
	 }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	0800419c 	.word	0x0800419c
 8001660:	2000003c 	.word	0x2000003c

08001664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001668:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <HAL_Init+0x40>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <HAL_Init+0x40>)
 800167a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800167e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a07      	ldr	r2, [pc, #28]	@ (80016a4 <HAL_Init+0x40>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800168a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168c:	2003      	movs	r0, #3
 800168e:	f000 f94f 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001692:	200f      	movs	r0, #15
 8001694:	f000 f808 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001698:	f7ff f8b8 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023c00 	.word	0x40023c00

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <HAL_InitTick+0x54>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <HAL_InitTick+0x58>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f967 	bl	800199a <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f000 f92f 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	@ (8001704 <HAL_InitTick+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000080 	.word	0x20000080
 8001704:	2000007c 	.word	0x2000007c

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	@ (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000080 	.word	0x20000080
 800172c:	200001c0 	.word	0x200001c0

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200001c0 	.word	0x200001c0

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <HAL_Delay+0x44>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000080 	.word	0x20000080

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	@ (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	@ (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	@ (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	@ 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	@ 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	@ (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	@ 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e159      	b.n	8001c84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8148 	bne.w	8001c7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d005      	beq.n	8001a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d017      	beq.n	8001aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d123      	bne.n	8001af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a2 	beq.w	8001c7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b57      	ldr	r3, [pc, #348]	@ (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	4a56      	ldr	r2, [pc, #344]	@ (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4a:	4b54      	ldr	r3, [pc, #336]	@ (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b56:	4a52      	ldr	r2, [pc, #328]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ca4 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x202>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a48      	ldr	r2, [pc, #288]	@ (8001ca8 <HAL_GPIO_Init+0x2f4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x1fe>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a47      	ldr	r2, [pc, #284]	@ (8001cac <HAL_GPIO_Init+0x2f8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x1fa>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a46      	ldr	r2, [pc, #280]	@ (8001cb0 <HAL_GPIO_Init+0x2fc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x1f6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a45      	ldr	r2, [pc, #276]	@ (8001cb4 <HAL_GPIO_Init+0x300>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x1f2>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd6:	4b38      	ldr	r3, [pc, #224]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c00:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c24:	4a24      	ldr	r2, [pc, #144]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c54:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c78:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f aea2 	bls.w	80019d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	@ 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e001      	b.n	8001cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d08:	e003      	b.n	8001d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	041a      	lsls	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e267      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d075      	beq.n	8001e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d3e:	4b88      	ldr	r3, [pc, #544]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d00c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4a:	4b85      	ldr	r3, [pc, #532]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d112      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d56:	4b82      	ldr	r3, [pc, #520]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	4b7e      	ldr	r3, [pc, #504]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d05b      	beq.n	8001e28 <HAL_RCC_OscConfig+0x108>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d157      	bne.n	8001e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e242      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x74>
 8001d86:	4b76      	ldr	r3, [pc, #472]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a75      	ldr	r2, [pc, #468]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e01d      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x98>
 8001d9e:	4b70      	ldr	r3, [pc, #448]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6f      	ldr	r2, [pc, #444]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b6d      	ldr	r3, [pc, #436]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a6c      	ldr	r2, [pc, #432]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001db8:	4b69      	ldr	r3, [pc, #420]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a68      	ldr	r2, [pc, #416]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b66      	ldr	r3, [pc, #408]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a65      	ldr	r2, [pc, #404]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fcaa 	bl	8001730 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fca6 	bl	8001730 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	@ 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e207      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0xc0>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fc96 	bl	8001730 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff fc92 	bl	8001730 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	@ 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e1f3      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	4b51      	ldr	r3, [pc, #324]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0xe8>
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d063      	beq.n	8001efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e36:	4b4a      	ldr	r3, [pc, #296]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d11c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4e:	4b44      	ldr	r3, [pc, #272]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_RCC_OscConfig+0x152>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e1c7      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b3b      	ldr	r3, [pc, #236]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4937      	ldr	r1, [pc, #220]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	e03a      	b.n	8001efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e90:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <HAL_RCC_OscConfig+0x244>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff fc4b 	bl	8001730 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fc47 	bl	8001730 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1a8      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4925      	ldr	r1, [pc, #148]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <HAL_RCC_OscConfig+0x244>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fc2a 	bl	8001730 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fc26 	bl	8001730 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e187      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d036      	beq.n	8001f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <HAL_RCC_OscConfig+0x248>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff fc0a 	bl	8001730 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff fc06 	bl	8001730 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e167      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x200>
 8001f3e:	e01b      	b.n	8001f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_RCC_OscConfig+0x248>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fbf3 	bl	8001730 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	e00e      	b.n	8001f6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7ff fbef 	bl	8001730 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d907      	bls.n	8001f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e150      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
 8001f60:	40023800 	.word	0x40023800
 8001f64:	42470000 	.word	0x42470000
 8001f68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	4b88      	ldr	r3, [pc, #544]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ea      	bne.n	8001f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8097 	beq.w	80020b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b81      	ldr	r3, [pc, #516]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b77      	ldr	r3, [pc, #476]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc2:	4b74      	ldr	r3, [pc, #464]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a73      	ldr	r2, [pc, #460]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7ff fbaf 	bl	8001730 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7ff fbab 	bl	8001730 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e10c      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x2ea>
 8001ffc:	4b64      	ldr	r3, [pc, #400]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002000:	4a63      	ldr	r2, [pc, #396]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	@ 0x70
 8002008:	e01c      	b.n	8002044 <HAL_RCC_OscConfig+0x324>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x30c>
 8002012:	4b5f      	ldr	r3, [pc, #380]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	4a5e      	ldr	r2, [pc, #376]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	6713      	str	r3, [r2, #112]	@ 0x70
 800201e:	4b5c      	ldr	r3, [pc, #368]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002022:	4a5b      	ldr	r2, [pc, #364]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6713      	str	r3, [r2, #112]	@ 0x70
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0x324>
 800202c:	4b58      	ldr	r3, [pc, #352]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002030:	4a57      	ldr	r2, [pc, #348]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	6713      	str	r3, [r2, #112]	@ 0x70
 8002038:	4b55      	ldr	r3, [pc, #340]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203c:	4a54      	ldr	r2, [pc, #336]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800203e:	f023 0304 	bic.w	r3, r3, #4
 8002042:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d015      	beq.n	8002078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff fb70 	bl	8001730 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7ff fb6c 	bl	8001730 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e0cb      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	4b49      	ldr	r3, [pc, #292]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0ee      	beq.n	8002054 <HAL_RCC_OscConfig+0x334>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002078:	f7ff fb5a 	bl	8001730 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7ff fb56 	bl	8001730 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0b5      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002096:	4b3e      	ldr	r3, [pc, #248]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1ee      	bne.n	8002080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a8:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	4a38      	ldr	r2, [pc, #224]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80a1 	beq.w	8002200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020be:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d05c      	beq.n	8002184 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d141      	bne.n	8002156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b31      	ldr	r3, [pc, #196]	@ (8002198 <HAL_RCC_OscConfig+0x478>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fb2a 	bl	8001730 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff fb26 	bl	8001730 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e087      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	3b01      	subs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	491b      	ldr	r1, [pc, #108]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_RCC_OscConfig+0x478>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff faff 	bl	8001730 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff fafb 	bl	8001730 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e05c      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002148:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x416>
 8002154:	e054      	b.n	8002200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <HAL_RCC_OscConfig+0x478>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff fae8 	bl	8001730 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7ff fae4 	bl	8001730 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e045      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x444>
 8002182:	e03d      	b.n	8002200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e038      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000
 8002198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x4ec>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d028      	beq.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d121      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d11a      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d111      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	3b01      	subs	r3, #1
 80021e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0cc      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b68      	ldr	r3, [pc, #416]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d90c      	bls.n	800224c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b65      	ldr	r3, [pc, #404]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b63      	ldr	r3, [pc, #396]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b8      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002264:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a58      	ldr	r2, [pc, #352]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800226e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800227c:	4b53      	ldr	r3, [pc, #332]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a52      	ldr	r2, [pc, #328]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b50      	ldr	r3, [pc, #320]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	494d      	ldr	r1, [pc, #308]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d044      	beq.n	8002330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b47      	ldr	r3, [pc, #284]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d119      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b3f      	ldr	r3, [pc, #252]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e067      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4934      	ldr	r1, [pc, #208]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002300:	f7ff fa16 	bl	8001730 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7ff fa12 	bl	8001730 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e04f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d20c      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e032      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4916      	ldr	r1, [pc, #88]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002382:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	490e      	ldr	r1, [pc, #56]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002396:	f000 f821 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	490a      	ldr	r1, [pc, #40]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	4a09      	ldr	r2, [pc, #36]	@ (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f976 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00
 80023cc:	40023800 	.word	0x40023800
 80023d0:	080041a8 	.word	0x080041a8
 80023d4:	20000000 	.word	0x20000000
 80023d8:	2000007c 	.word	0x2000007c

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e0:	b094      	sub	sp, #80	@ 0x50
 80023e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f4:	4b79      	ldr	r3, [pc, #484]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d00d      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x40>
 8002400:	2b08      	cmp	r3, #8
 8002402:	f200 80e1 	bhi.w	80025c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x34>
 800240a:	2b04      	cmp	r3, #4
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x3a>
 800240e:	e0db      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b73      	ldr	r3, [pc, #460]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002412:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002414:	e0db      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002416:	4b73      	ldr	r3, [pc, #460]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002418:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800241a:	e0d8      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800241c:	4b6f      	ldr	r3, [pc, #444]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002424:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002426:	4b6d      	ldr	r3, [pc, #436]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d063      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002432:	4b6a      	ldr	r3, [pc, #424]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	2200      	movs	r2, #0
 800243a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800243c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002444:	633b      	str	r3, [r7, #48]	@ 0x30
 8002446:	2300      	movs	r3, #0
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
 800244a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800244e:	4622      	mov	r2, r4
 8002450:	462b      	mov	r3, r5
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	0159      	lsls	r1, r3, #5
 800245c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002460:	0150      	lsls	r0, r2, #5
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4621      	mov	r1, r4
 8002468:	1a51      	subs	r1, r2, r1
 800246a:	6139      	str	r1, [r7, #16]
 800246c:	4629      	mov	r1, r5
 800246e:	eb63 0301 	sbc.w	r3, r3, r1
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002480:	4659      	mov	r1, fp
 8002482:	018b      	lsls	r3, r1, #6
 8002484:	4651      	mov	r1, sl
 8002486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800248a:	4651      	mov	r1, sl
 800248c:	018a      	lsls	r2, r1, #6
 800248e:	4651      	mov	r1, sl
 8002490:	ebb2 0801 	subs.w	r8, r2, r1
 8002494:	4659      	mov	r1, fp
 8002496:	eb63 0901 	sbc.w	r9, r3, r1
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ae:	4690      	mov	r8, r2
 80024b0:	4699      	mov	r9, r3
 80024b2:	4623      	mov	r3, r4
 80024b4:	eb18 0303 	adds.w	r3, r8, r3
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	462b      	mov	r3, r5
 80024bc:	eb49 0303 	adc.w	r3, r9, r3
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024ce:	4629      	mov	r1, r5
 80024d0:	024b      	lsls	r3, r1, #9
 80024d2:	4621      	mov	r1, r4
 80024d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024d8:	4621      	mov	r1, r4
 80024da:	024a      	lsls	r2, r1, #9
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e2:	2200      	movs	r2, #0
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024ec:	f7fd fed0 	bl	8000290 <__aeabi_uldivmod>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4613      	mov	r3, r2
 80024f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024f8:	e058      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fa:	4b38      	ldr	r3, [pc, #224]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	099b      	lsrs	r3, r3, #6
 8002500:	2200      	movs	r2, #0
 8002502:	4618      	mov	r0, r3
 8002504:	4611      	mov	r1, r2
 8002506:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002510:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002514:	4642      	mov	r2, r8
 8002516:	464b      	mov	r3, r9
 8002518:	f04f 0000 	mov.w	r0, #0
 800251c:	f04f 0100 	mov.w	r1, #0
 8002520:	0159      	lsls	r1, r3, #5
 8002522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002526:	0150      	lsls	r0, r2, #5
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4641      	mov	r1, r8
 800252e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002532:	4649      	mov	r1, r9
 8002534:	eb63 0b01 	sbc.w	fp, r3, r1
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002544:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002548:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800254c:	ebb2 040a 	subs.w	r4, r2, sl
 8002550:	eb63 050b 	sbc.w	r5, r3, fp
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	00eb      	lsls	r3, r5, #3
 800255e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002562:	00e2      	lsls	r2, r4, #3
 8002564:	4614      	mov	r4, r2
 8002566:	461d      	mov	r5, r3
 8002568:	4643      	mov	r3, r8
 800256a:	18e3      	adds	r3, r4, r3
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	464b      	mov	r3, r9
 8002570:	eb45 0303 	adc.w	r3, r5, r3
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002582:	4629      	mov	r1, r5
 8002584:	028b      	lsls	r3, r1, #10
 8002586:	4621      	mov	r1, r4
 8002588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800258c:	4621      	mov	r1, r4
 800258e:	028a      	lsls	r2, r1, #10
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002596:	2200      	movs	r2, #0
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	61fa      	str	r2, [r7, #28]
 800259c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a0:	f7fd fe76 	bl	8000290 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4613      	mov	r3, r2
 80025aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x200>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3750      	adds	r7, #80	@ 0x50
 80025d4:	46bd      	mov	sp, r7
 80025d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	007a1200 	.word	0x007a1200

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b03      	ldr	r3, [pc, #12]	@ (80025fc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	@ (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	080041b8 	.word	0x080041b8

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800262c:	f7ff ffdc 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0b5b      	lsrs	r3, r3, #13
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	@ (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	080041b8 	.word	0x080041b8

08002650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e041      	b.n	80026e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe f9be 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3304      	adds	r3, #4
 800268c:	4619      	mov	r1, r3
 800268e:	4610      	mov	r0, r2
 8002690:	f000 fa70 	bl	8002b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d001      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e044      	b.n	8002792 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1e      	ldr	r2, [pc, #120]	@ (80027a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d018      	beq.n	800275c <HAL_TIM_Base_Start_IT+0x6c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002732:	d013      	beq.n	800275c <HAL_TIM_Base_Start_IT+0x6c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00e      	beq.n	800275c <HAL_TIM_Base_Start_IT+0x6c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a19      	ldr	r2, [pc, #100]	@ (80027a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d009      	beq.n	800275c <HAL_TIM_Base_Start_IT+0x6c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <HAL_TIM_Base_Start_IT+0xbc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_TIM_Base_Start_IT+0x6c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a16      	ldr	r2, [pc, #88]	@ (80027b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d111      	bne.n	8002780 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b06      	cmp	r3, #6
 800276c:	d010      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277e:	e007      	b.n	8002790 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40000800 	.word	0x40000800
 80027ac:	40000c00 	.word	0x40000c00
 80027b0:	40014000 	.word	0x40014000

080027b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d020      	beq.n	8002818 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0202 	mvn.w	r2, #2
 80027e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f999 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f98b 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f99c 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d020      	beq.n	8002864 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0204 	mvn.w	r2, #4
 8002834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2202      	movs	r2, #2
 800283a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f973 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f965 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f976 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d020      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0208 	mvn.w	r2, #8
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2204      	movs	r2, #4
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f94d 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f93f 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f950 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d020      	beq.n	80028fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0210 	mvn.w	r2, #16
 80028cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2208      	movs	r2, #8
 80028d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f927 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 80028e8:	e005      	b.n	80028f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f919 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f92a 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00c      	beq.n	8002920 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0201 	mvn.w	r2, #1
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe fb58 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00c      	beq.n	8002944 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800293c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fab0 	bl	8002ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8fb 	bl	8002b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00c      	beq.n	800298c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0220 	mvn.w	r2, #32
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa82 	bl	8002e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_TIM_ConfigClockSource+0x1c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0b4      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x186>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029e8:	d03e      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0xd4>
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ee:	f200 8087 	bhi.w	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f6:	f000 8086 	beq.w	8002b06 <HAL_TIM_ConfigClockSource+0x172>
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fe:	d87f      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b70      	cmp	r3, #112	@ 0x70
 8002a02:	d01a      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0xa6>
 8002a04:	2b70      	cmp	r3, #112	@ 0x70
 8002a06:	d87b      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b60      	cmp	r3, #96	@ 0x60
 8002a0a:	d050      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x11a>
 8002a0c:	2b60      	cmp	r3, #96	@ 0x60
 8002a0e:	d877      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b50      	cmp	r3, #80	@ 0x50
 8002a12:	d03c      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0xfa>
 8002a14:	2b50      	cmp	r3, #80	@ 0x50
 8002a16:	d873      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a18:	2b40      	cmp	r3, #64	@ 0x40
 8002a1a:	d058      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x13a>
 8002a1c:	2b40      	cmp	r3, #64	@ 0x40
 8002a1e:	d86f      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a20:	2b30      	cmp	r3, #48	@ 0x30
 8002a22:	d064      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a24:	2b30      	cmp	r3, #48	@ 0x30
 8002a26:	d86b      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d060      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d867      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d05c      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d05a      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a38:	e062      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a4a:	f000 f993 	bl	8002d74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	609a      	str	r2, [r3, #8]
      break;
 8002a66:	e04f      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a78:	f000 f97c 	bl	8002d74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a8a:	609a      	str	r2, [r3, #8]
      break;
 8002a8c:	e03c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f000 f8f0 	bl	8002c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2150      	movs	r1, #80	@ 0x50
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f949 	bl	8002d3e <TIM_ITRx_SetConfig>
      break;
 8002aac:	e02c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aba:	461a      	mov	r2, r3
 8002abc:	f000 f90f 	bl	8002cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2160      	movs	r1, #96	@ 0x60
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f939 	bl	8002d3e <TIM_ITRx_SetConfig>
      break;
 8002acc:	e01c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ada:	461a      	mov	r2, r3
 8002adc:	f000 f8d0 	bl	8002c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2140      	movs	r1, #64	@ 0x40
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f929 	bl	8002d3e <TIM_ITRx_SetConfig>
      break;
 8002aec:	e00c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f000 f920 	bl	8002d3e <TIM_ITRx_SetConfig>
      break;
 8002afe:	e003      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e000      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a37      	ldr	r2, [pc, #220]	@ (8002c64 <TIM_Base_SetConfig+0xf0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00f      	beq.n	8002bac <TIM_Base_SetConfig+0x38>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b92:	d00b      	beq.n	8002bac <TIM_Base_SetConfig+0x38>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a34      	ldr	r2, [pc, #208]	@ (8002c68 <TIM_Base_SetConfig+0xf4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <TIM_Base_SetConfig+0x38>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a33      	ldr	r2, [pc, #204]	@ (8002c6c <TIM_Base_SetConfig+0xf8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d003      	beq.n	8002bac <TIM_Base_SetConfig+0x38>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a32      	ldr	r2, [pc, #200]	@ (8002c70 <TIM_Base_SetConfig+0xfc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d108      	bne.n	8002bbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a28      	ldr	r2, [pc, #160]	@ (8002c64 <TIM_Base_SetConfig+0xf0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01b      	beq.n	8002bfe <TIM_Base_SetConfig+0x8a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bcc:	d017      	beq.n	8002bfe <TIM_Base_SetConfig+0x8a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a25      	ldr	r2, [pc, #148]	@ (8002c68 <TIM_Base_SetConfig+0xf4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <TIM_Base_SetConfig+0x8a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	@ (8002c6c <TIM_Base_SetConfig+0xf8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00f      	beq.n	8002bfe <TIM_Base_SetConfig+0x8a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a23      	ldr	r2, [pc, #140]	@ (8002c70 <TIM_Base_SetConfig+0xfc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <TIM_Base_SetConfig+0x8a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a22      	ldr	r2, [pc, #136]	@ (8002c74 <TIM_Base_SetConfig+0x100>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <TIM_Base_SetConfig+0x8a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a21      	ldr	r2, [pc, #132]	@ (8002c78 <TIM_Base_SetConfig+0x104>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <TIM_Base_SetConfig+0x8a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a20      	ldr	r2, [pc, #128]	@ (8002c7c <TIM_Base_SetConfig+0x108>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a0c      	ldr	r2, [pc, #48]	@ (8002c64 <TIM_Base_SetConfig+0xf0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d103      	bne.n	8002c3e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f043 0204 	orr.w	r2, r3, #4
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	601a      	str	r2, [r3, #0]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00
 8002c74:	40014000 	.word	0x40014000
 8002c78:	40014400 	.word	0x40014400
 8002c7c:	40014800 	.word	0x40014800

08002c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f023 0201 	bic.w	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f023 030a 	bic.w	r3, r3, #10
 8002cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	621a      	str	r2, [r3, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b087      	sub	sp, #28
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f023 0210 	bic.w	r2, r3, #16
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	031b      	lsls	r3, r3, #12
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f043 0307 	orr.w	r3, r3, #7
 8002d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	609a      	str	r2, [r3, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	021a      	lsls	r2, r3, #8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e050      	b.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d018      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e18:	d013      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a18      	ldr	r2, [pc, #96]	@ (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a16      	ldr	r2, [pc, #88]	@ (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a15      	ldr	r2, [pc, #84]	@ (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a13      	ldr	r2, [pc, #76]	@ (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10c      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	40014000 	.word	0x40014000

08002e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e042      	b.n	8002f50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fdda 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	@ 0x24
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fa09 	bl	8003314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	@ 0x28
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d175      	bne.n	8003064 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_UART_Transmit+0x2c>
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e06e      	b.n	8003066 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2221      	movs	r2, #33	@ 0x21
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f96:	f7fe fbcb 	bl	8001730 <HAL_GetTick>
 8002f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb0:	d108      	bne.n	8002fc4 <HAL_UART_Transmit+0x6c>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e003      	b.n	8002fcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fcc:	e02e      	b.n	800302c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f8df 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e03a      	b.n	8003066 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	3302      	adds	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e007      	b.n	800301e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	3301      	adds	r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1cb      	bne.n	8002fce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2200      	movs	r2, #0
 800303e:	2140      	movs	r1, #64	@ 0x40
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f8ab 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e006      	b.n	8003066 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b08a      	sub	sp, #40	@ 0x28
 8003072:	af02      	add	r7, sp, #8
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b20      	cmp	r3, #32
 800308c:	f040 8081 	bne.w	8003192 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_UART_Receive+0x2e>
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e079      	b.n	8003194 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2222      	movs	r2, #34	@ 0x22
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b4:	f7fe fb3c 	bl	8001730 <HAL_GetTick>
 80030b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ce:	d108      	bne.n	80030e2 <HAL_UART_Receive+0x74>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	e003      	b.n	80030ea <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030ea:	e047      	b.n	800317c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2200      	movs	r2, #0
 80030f4:	2120      	movs	r1, #32
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f850 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e042      	b.n	8003194 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10c      	bne.n	800312e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	b29b      	uxth	r3, r3
 800311c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003120:	b29a      	uxth	r2, r3
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	3302      	adds	r3, #2
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	e01f      	b.n	800316e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003136:	d007      	beq.n	8003148 <HAL_UART_Receive+0xda>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <HAL_UART_Receive+0xe8>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e008      	b.n	8003168 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003162:	b2da      	uxtb	r2, r3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1b2      	bne.n	80030ec <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ac:	e03b      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d037      	beq.n	8003226 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	f7fe fabb 	bl	8001730 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <UART_WaitOnFlagUntilTimeout+0x30>
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e03a      	b.n	8003246 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d023      	beq.n	8003226 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b80      	cmp	r3, #128	@ 0x80
 80031e2:	d020      	beq.n	8003226 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d01d      	beq.n	8003226 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d116      	bne.n	8003226 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f81d 	bl	800324e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2208      	movs	r2, #8
 8003218:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e00f      	b.n	8003246 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4013      	ands	r3, r2
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	429a      	cmp	r2, r3
 8003242:	d0b4      	beq.n	80031ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800324e:	b480      	push	{r7}
 8003250:	b095      	sub	sp, #84	@ 0x54
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800326c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003276:	643a      	str	r2, [r7, #64]	@ 0x40
 8003278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800327c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e5      	bne.n	8003256 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	61fb      	str	r3, [r7, #28]
   return(result);
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e5      	bne.n	800328a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d119      	bne.n	80032fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	330c      	adds	r3, #12
 80032cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f023 0310 	bic.w	r3, r3, #16
 80032dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032e6:	61ba      	str	r2, [r7, #24]
 80032e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6979      	ldr	r1, [r7, #20]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	613b      	str	r3, [r7, #16]
   return(result);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e5      	bne.n	80032c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003308:	bf00      	nop
 800330a:	3754      	adds	r7, #84	@ 0x54
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003318:	b0c0      	sub	sp, #256	@ 0x100
 800331a:	af00      	add	r7, sp, #0
 800331c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003330:	68d9      	ldr	r1, [r3, #12]
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	ea40 0301 	orr.w	r3, r0, r1
 800333c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800333e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	431a      	orrs	r2, r3
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	431a      	orrs	r2, r3
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800336c:	f021 010c 	bic.w	r1, r1, #12
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800337a:	430b      	orrs	r3, r1
 800337c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338e:	6999      	ldr	r1, [r3, #24]
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	ea40 0301 	orr.w	r3, r0, r1
 800339a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b8f      	ldr	r3, [pc, #572]	@ (80035e0 <UART_SetConfig+0x2cc>)
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d005      	beq.n	80033b4 <UART_SetConfig+0xa0>
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b8d      	ldr	r3, [pc, #564]	@ (80035e4 <UART_SetConfig+0x2d0>)
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d104      	bne.n	80033be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033b4:	f7ff f938 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 80033b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033bc:	e003      	b.n	80033c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033be:	f7ff f91f 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 80033c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033d0:	f040 810c 	bne.w	80035ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033e6:	4622      	mov	r2, r4
 80033e8:	462b      	mov	r3, r5
 80033ea:	1891      	adds	r1, r2, r2
 80033ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033ee:	415b      	adcs	r3, r3
 80033f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033f6:	4621      	mov	r1, r4
 80033f8:	eb12 0801 	adds.w	r8, r2, r1
 80033fc:	4629      	mov	r1, r5
 80033fe:	eb43 0901 	adc.w	r9, r3, r1
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800340e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003416:	4690      	mov	r8, r2
 8003418:	4699      	mov	r9, r3
 800341a:	4623      	mov	r3, r4
 800341c:	eb18 0303 	adds.w	r3, r8, r3
 8003420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003424:	462b      	mov	r3, r5
 8003426:	eb49 0303 	adc.w	r3, r9, r3
 800342a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800343a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800343e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003442:	460b      	mov	r3, r1
 8003444:	18db      	adds	r3, r3, r3
 8003446:	653b      	str	r3, [r7, #80]	@ 0x50
 8003448:	4613      	mov	r3, r2
 800344a:	eb42 0303 	adc.w	r3, r2, r3
 800344e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003450:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003454:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003458:	f7fc ff1a 	bl	8000290 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4b61      	ldr	r3, [pc, #388]	@ (80035e8 <UART_SetConfig+0x2d4>)
 8003462:	fba3 2302 	umull	r2, r3, r3, r2
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	011c      	lsls	r4, r3, #4
 800346a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800346e:	2200      	movs	r2, #0
 8003470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003474:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003478:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	1891      	adds	r1, r2, r2
 8003482:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003484:	415b      	adcs	r3, r3
 8003486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800348c:	4641      	mov	r1, r8
 800348e:	eb12 0a01 	adds.w	sl, r2, r1
 8003492:	4649      	mov	r1, r9
 8003494:	eb43 0b01 	adc.w	fp, r3, r1
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ac:	4692      	mov	sl, r2
 80034ae:	469b      	mov	fp, r3
 80034b0:	4643      	mov	r3, r8
 80034b2:	eb1a 0303 	adds.w	r3, sl, r3
 80034b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034ba:	464b      	mov	r3, r9
 80034bc:	eb4b 0303 	adc.w	r3, fp, r3
 80034c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034d8:	460b      	mov	r3, r1
 80034da:	18db      	adds	r3, r3, r3
 80034dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80034de:	4613      	mov	r3, r2
 80034e0:	eb42 0303 	adc.w	r3, r2, r3
 80034e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034ee:	f7fc fecf 	bl	8000290 <__aeabi_uldivmod>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	4b3b      	ldr	r3, [pc, #236]	@ (80035e8 <UART_SetConfig+0x2d4>)
 80034fa:	fba3 2301 	umull	r2, r3, r3, r1
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	2264      	movs	r2, #100	@ 0x64
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	1acb      	subs	r3, r1, r3
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800350e:	4b36      	ldr	r3, [pc, #216]	@ (80035e8 <UART_SetConfig+0x2d4>)
 8003510:	fba3 2302 	umull	r2, r3, r3, r2
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800351c:	441c      	add	r4, r3
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003528:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800352c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003538:	415b      	adcs	r3, r3
 800353a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800353c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003540:	4641      	mov	r1, r8
 8003542:	1851      	adds	r1, r2, r1
 8003544:	6339      	str	r1, [r7, #48]	@ 0x30
 8003546:	4649      	mov	r1, r9
 8003548:	414b      	adcs	r3, r1
 800354a:	637b      	str	r3, [r7, #52]	@ 0x34
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003558:	4659      	mov	r1, fp
 800355a:	00cb      	lsls	r3, r1, #3
 800355c:	4651      	mov	r1, sl
 800355e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003562:	4651      	mov	r1, sl
 8003564:	00ca      	lsls	r2, r1, #3
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	4603      	mov	r3, r0
 800356c:	4642      	mov	r2, r8
 800356e:	189b      	adds	r3, r3, r2
 8003570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003574:	464b      	mov	r3, r9
 8003576:	460a      	mov	r2, r1
 8003578:	eb42 0303 	adc.w	r3, r2, r3
 800357c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800358c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003594:	460b      	mov	r3, r1
 8003596:	18db      	adds	r3, r3, r3
 8003598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800359a:	4613      	mov	r3, r2
 800359c:	eb42 0303 	adc.w	r3, r2, r3
 80035a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035aa:	f7fc fe71 	bl	8000290 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <UART_SetConfig+0x2d4>)
 80035b4:	fba3 1302 	umull	r1, r3, r3, r2
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	2164      	movs	r1, #100	@ 0x64
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	3332      	adds	r3, #50	@ 0x32
 80035c6:	4a08      	ldr	r2, [pc, #32]	@ (80035e8 <UART_SetConfig+0x2d4>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	f003 0207 	and.w	r2, r3, #7
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4422      	add	r2, r4
 80035da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035dc:	e106      	b.n	80037ec <UART_SetConfig+0x4d8>
 80035de:	bf00      	nop
 80035e0:	40011000 	.word	0x40011000
 80035e4:	40011400 	.word	0x40011400
 80035e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035fe:	4642      	mov	r2, r8
 8003600:	464b      	mov	r3, r9
 8003602:	1891      	adds	r1, r2, r2
 8003604:	6239      	str	r1, [r7, #32]
 8003606:	415b      	adcs	r3, r3
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24
 800360a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800360e:	4641      	mov	r1, r8
 8003610:	1854      	adds	r4, r2, r1
 8003612:	4649      	mov	r1, r9
 8003614:	eb43 0501 	adc.w	r5, r3, r1
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	00eb      	lsls	r3, r5, #3
 8003622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003626:	00e2      	lsls	r2, r4, #3
 8003628:	4614      	mov	r4, r2
 800362a:	461d      	mov	r5, r3
 800362c:	4643      	mov	r3, r8
 800362e:	18e3      	adds	r3, r4, r3
 8003630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003634:	464b      	mov	r3, r9
 8003636:	eb45 0303 	adc.w	r3, r5, r3
 800363a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800364a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800365a:	4629      	mov	r1, r5
 800365c:	008b      	lsls	r3, r1, #2
 800365e:	4621      	mov	r1, r4
 8003660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003664:	4621      	mov	r1, r4
 8003666:	008a      	lsls	r2, r1, #2
 8003668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800366c:	f7fc fe10 	bl	8000290 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4b60      	ldr	r3, [pc, #384]	@ (80037f8 <UART_SetConfig+0x4e4>)
 8003676:	fba3 2302 	umull	r2, r3, r3, r2
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	011c      	lsls	r4, r3, #4
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003688:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800368c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	1891      	adds	r1, r2, r2
 8003696:	61b9      	str	r1, [r7, #24]
 8003698:	415b      	adcs	r3, r3
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a0:	4641      	mov	r1, r8
 80036a2:	1851      	adds	r1, r2, r1
 80036a4:	6139      	str	r1, [r7, #16]
 80036a6:	4649      	mov	r1, r9
 80036a8:	414b      	adcs	r3, r1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036b8:	4659      	mov	r1, fp
 80036ba:	00cb      	lsls	r3, r1, #3
 80036bc:	4651      	mov	r1, sl
 80036be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036c2:	4651      	mov	r1, sl
 80036c4:	00ca      	lsls	r2, r1, #3
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	4642      	mov	r2, r8
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036d4:	464b      	mov	r3, r9
 80036d6:	460a      	mov	r2, r1
 80036d8:	eb42 0303 	adc.w	r3, r2, r3
 80036dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036f8:	4649      	mov	r1, r9
 80036fa:	008b      	lsls	r3, r1, #2
 80036fc:	4641      	mov	r1, r8
 80036fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003702:	4641      	mov	r1, r8
 8003704:	008a      	lsls	r2, r1, #2
 8003706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800370a:	f7fc fdc1 	bl	8000290 <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4611      	mov	r1, r2
 8003714:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <UART_SetConfig+0x4e4>)
 8003716:	fba3 2301 	umull	r2, r3, r3, r1
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2264      	movs	r2, #100	@ 0x64
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	1acb      	subs	r3, r1, r3
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	3332      	adds	r3, #50	@ 0x32
 8003728:	4a33      	ldr	r2, [pc, #204]	@ (80037f8 <UART_SetConfig+0x4e4>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003734:	441c      	add	r4, r3
 8003736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800373a:	2200      	movs	r2, #0
 800373c:	673b      	str	r3, [r7, #112]	@ 0x70
 800373e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003740:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	415b      	adcs	r3, r3
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003786:	464b      	mov	r3, r9
 8003788:	460a      	mov	r2, r1
 800378a:	eb42 0303 	adc.w	r3, r2, r3
 800378e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	663b      	str	r3, [r7, #96]	@ 0x60
 800379a:	667a      	str	r2, [r7, #100]	@ 0x64
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037a8:	4649      	mov	r1, r9
 80037aa:	008b      	lsls	r3, r1, #2
 80037ac:	4641      	mov	r1, r8
 80037ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b2:	4641      	mov	r1, r8
 80037b4:	008a      	lsls	r2, r1, #2
 80037b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037ba:	f7fc fd69 	bl	8000290 <__aeabi_uldivmod>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <UART_SetConfig+0x4e4>)
 80037c4:	fba3 1302 	umull	r1, r3, r3, r2
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	2164      	movs	r1, #100	@ 0x64
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	3332      	adds	r3, #50	@ 0x32
 80037d6:	4a08      	ldr	r2, [pc, #32]	@ (80037f8 <UART_SetConfig+0x4e4>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	f003 020f 	and.w	r2, r3, #15
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4422      	add	r2, r4
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037f2:	46bd      	mov	sp, r7
 80037f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f8:	51eb851f 	.word	0x51eb851f

080037fc <siprintf>:
 80037fc:	b40e      	push	{r1, r2, r3}
 80037fe:	b510      	push	{r4, lr}
 8003800:	b09d      	sub	sp, #116	@ 0x74
 8003802:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003804:	9002      	str	r0, [sp, #8]
 8003806:	9006      	str	r0, [sp, #24]
 8003808:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800380c:	480a      	ldr	r0, [pc, #40]	@ (8003838 <siprintf+0x3c>)
 800380e:	9107      	str	r1, [sp, #28]
 8003810:	9104      	str	r1, [sp, #16]
 8003812:	490a      	ldr	r1, [pc, #40]	@ (800383c <siprintf+0x40>)
 8003814:	f853 2b04 	ldr.w	r2, [r3], #4
 8003818:	9105      	str	r1, [sp, #20]
 800381a:	2400      	movs	r4, #0
 800381c:	a902      	add	r1, sp, #8
 800381e:	6800      	ldr	r0, [r0, #0]
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003824:	f000 f994 	bl	8003b50 <_svfiprintf_r>
 8003828:	9b02      	ldr	r3, [sp, #8]
 800382a:	701c      	strb	r4, [r3, #0]
 800382c:	b01d      	add	sp, #116	@ 0x74
 800382e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003832:	b003      	add	sp, #12
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000084 	.word	0x20000084
 800383c:	ffff0208 	.word	0xffff0208

08003840 <memset>:
 8003840:	4402      	add	r2, r0
 8003842:	4603      	mov	r3, r0
 8003844:	4293      	cmp	r3, r2
 8003846:	d100      	bne.n	800384a <memset+0xa>
 8003848:	4770      	bx	lr
 800384a:	f803 1b01 	strb.w	r1, [r3], #1
 800384e:	e7f9      	b.n	8003844 <memset+0x4>

08003850 <__errno>:
 8003850:	4b01      	ldr	r3, [pc, #4]	@ (8003858 <__errno+0x8>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000084 	.word	0x20000084

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	4d0d      	ldr	r5, [pc, #52]	@ (8003894 <__libc_init_array+0x38>)
 8003860:	4c0d      	ldr	r4, [pc, #52]	@ (8003898 <__libc_init_array+0x3c>)
 8003862:	1b64      	subs	r4, r4, r5
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	2600      	movs	r6, #0
 8003868:	42a6      	cmp	r6, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	4d0b      	ldr	r5, [pc, #44]	@ (800389c <__libc_init_array+0x40>)
 800386e:	4c0c      	ldr	r4, [pc, #48]	@ (80038a0 <__libc_init_array+0x44>)
 8003870:	f000 fc64 	bl	800413c <_init>
 8003874:	1b64      	subs	r4, r4, r5
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	2600      	movs	r6, #0
 800387a:	42a6      	cmp	r6, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	f855 3b04 	ldr.w	r3, [r5], #4
 8003884:	4798      	blx	r3
 8003886:	3601      	adds	r6, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	f855 3b04 	ldr.w	r3, [r5], #4
 800388e:	4798      	blx	r3
 8003890:	3601      	adds	r6, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	080041fc 	.word	0x080041fc
 8003898:	080041fc 	.word	0x080041fc
 800389c:	080041fc 	.word	0x080041fc
 80038a0:	08004200 	.word	0x08004200

080038a4 <__retarget_lock_acquire_recursive>:
 80038a4:	4770      	bx	lr

080038a6 <__retarget_lock_release_recursive>:
 80038a6:	4770      	bx	lr

080038a8 <_free_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4605      	mov	r5, r0
 80038ac:	2900      	cmp	r1, #0
 80038ae:	d041      	beq.n	8003934 <_free_r+0x8c>
 80038b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b4:	1f0c      	subs	r4, r1, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bfb8      	it	lt
 80038ba:	18e4      	addlt	r4, r4, r3
 80038bc:	f000 f8e0 	bl	8003a80 <__malloc_lock>
 80038c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <_free_r+0x90>)
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	b933      	cbnz	r3, 80038d4 <_free_r+0x2c>
 80038c6:	6063      	str	r3, [r4, #4]
 80038c8:	6014      	str	r4, [r2, #0]
 80038ca:	4628      	mov	r0, r5
 80038cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038d0:	f000 b8dc 	b.w	8003a8c <__malloc_unlock>
 80038d4:	42a3      	cmp	r3, r4
 80038d6:	d908      	bls.n	80038ea <_free_r+0x42>
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	1821      	adds	r1, r4, r0
 80038dc:	428b      	cmp	r3, r1
 80038de:	bf01      	itttt	eq
 80038e0:	6819      	ldreq	r1, [r3, #0]
 80038e2:	685b      	ldreq	r3, [r3, #4]
 80038e4:	1809      	addeq	r1, r1, r0
 80038e6:	6021      	streq	r1, [r4, #0]
 80038e8:	e7ed      	b.n	80038c6 <_free_r+0x1e>
 80038ea:	461a      	mov	r2, r3
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	b10b      	cbz	r3, 80038f4 <_free_r+0x4c>
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	d9fa      	bls.n	80038ea <_free_r+0x42>
 80038f4:	6811      	ldr	r1, [r2, #0]
 80038f6:	1850      	adds	r0, r2, r1
 80038f8:	42a0      	cmp	r0, r4
 80038fa:	d10b      	bne.n	8003914 <_free_r+0x6c>
 80038fc:	6820      	ldr	r0, [r4, #0]
 80038fe:	4401      	add	r1, r0
 8003900:	1850      	adds	r0, r2, r1
 8003902:	4283      	cmp	r3, r0
 8003904:	6011      	str	r1, [r2, #0]
 8003906:	d1e0      	bne.n	80038ca <_free_r+0x22>
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	6053      	str	r3, [r2, #4]
 800390e:	4408      	add	r0, r1
 8003910:	6010      	str	r0, [r2, #0]
 8003912:	e7da      	b.n	80038ca <_free_r+0x22>
 8003914:	d902      	bls.n	800391c <_free_r+0x74>
 8003916:	230c      	movs	r3, #12
 8003918:	602b      	str	r3, [r5, #0]
 800391a:	e7d6      	b.n	80038ca <_free_r+0x22>
 800391c:	6820      	ldr	r0, [r4, #0]
 800391e:	1821      	adds	r1, r4, r0
 8003920:	428b      	cmp	r3, r1
 8003922:	bf04      	itt	eq
 8003924:	6819      	ldreq	r1, [r3, #0]
 8003926:	685b      	ldreq	r3, [r3, #4]
 8003928:	6063      	str	r3, [r4, #4]
 800392a:	bf04      	itt	eq
 800392c:	1809      	addeq	r1, r1, r0
 800392e:	6021      	streq	r1, [r4, #0]
 8003930:	6054      	str	r4, [r2, #4]
 8003932:	e7ca      	b.n	80038ca <_free_r+0x22>
 8003934:	bd38      	pop	{r3, r4, r5, pc}
 8003936:	bf00      	nop
 8003938:	20000308 	.word	0x20000308

0800393c <sbrk_aligned>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	4e0f      	ldr	r6, [pc, #60]	@ (800397c <sbrk_aligned+0x40>)
 8003940:	460c      	mov	r4, r1
 8003942:	6831      	ldr	r1, [r6, #0]
 8003944:	4605      	mov	r5, r0
 8003946:	b911      	cbnz	r1, 800394e <sbrk_aligned+0x12>
 8003948:	f000 fba4 	bl	8004094 <_sbrk_r>
 800394c:	6030      	str	r0, [r6, #0]
 800394e:	4621      	mov	r1, r4
 8003950:	4628      	mov	r0, r5
 8003952:	f000 fb9f 	bl	8004094 <_sbrk_r>
 8003956:	1c43      	adds	r3, r0, #1
 8003958:	d103      	bne.n	8003962 <sbrk_aligned+0x26>
 800395a:	f04f 34ff 	mov.w	r4, #4294967295
 800395e:	4620      	mov	r0, r4
 8003960:	bd70      	pop	{r4, r5, r6, pc}
 8003962:	1cc4      	adds	r4, r0, #3
 8003964:	f024 0403 	bic.w	r4, r4, #3
 8003968:	42a0      	cmp	r0, r4
 800396a:	d0f8      	beq.n	800395e <sbrk_aligned+0x22>
 800396c:	1a21      	subs	r1, r4, r0
 800396e:	4628      	mov	r0, r5
 8003970:	f000 fb90 	bl	8004094 <_sbrk_r>
 8003974:	3001      	adds	r0, #1
 8003976:	d1f2      	bne.n	800395e <sbrk_aligned+0x22>
 8003978:	e7ef      	b.n	800395a <sbrk_aligned+0x1e>
 800397a:	bf00      	nop
 800397c:	20000304 	.word	0x20000304

08003980 <_malloc_r>:
 8003980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003984:	1ccd      	adds	r5, r1, #3
 8003986:	f025 0503 	bic.w	r5, r5, #3
 800398a:	3508      	adds	r5, #8
 800398c:	2d0c      	cmp	r5, #12
 800398e:	bf38      	it	cc
 8003990:	250c      	movcc	r5, #12
 8003992:	2d00      	cmp	r5, #0
 8003994:	4606      	mov	r6, r0
 8003996:	db01      	blt.n	800399c <_malloc_r+0x1c>
 8003998:	42a9      	cmp	r1, r5
 800399a:	d904      	bls.n	80039a6 <_malloc_r+0x26>
 800399c:	230c      	movs	r3, #12
 800399e:	6033      	str	r3, [r6, #0]
 80039a0:	2000      	movs	r0, #0
 80039a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a7c <_malloc_r+0xfc>
 80039aa:	f000 f869 	bl	8003a80 <__malloc_lock>
 80039ae:	f8d8 3000 	ldr.w	r3, [r8]
 80039b2:	461c      	mov	r4, r3
 80039b4:	bb44      	cbnz	r4, 8003a08 <_malloc_r+0x88>
 80039b6:	4629      	mov	r1, r5
 80039b8:	4630      	mov	r0, r6
 80039ba:	f7ff ffbf 	bl	800393c <sbrk_aligned>
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	4604      	mov	r4, r0
 80039c2:	d158      	bne.n	8003a76 <_malloc_r+0xf6>
 80039c4:	f8d8 4000 	ldr.w	r4, [r8]
 80039c8:	4627      	mov	r7, r4
 80039ca:	2f00      	cmp	r7, #0
 80039cc:	d143      	bne.n	8003a56 <_malloc_r+0xd6>
 80039ce:	2c00      	cmp	r4, #0
 80039d0:	d04b      	beq.n	8003a6a <_malloc_r+0xea>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	4639      	mov	r1, r7
 80039d6:	4630      	mov	r0, r6
 80039d8:	eb04 0903 	add.w	r9, r4, r3
 80039dc:	f000 fb5a 	bl	8004094 <_sbrk_r>
 80039e0:	4581      	cmp	r9, r0
 80039e2:	d142      	bne.n	8003a6a <_malloc_r+0xea>
 80039e4:	6821      	ldr	r1, [r4, #0]
 80039e6:	1a6d      	subs	r5, r5, r1
 80039e8:	4629      	mov	r1, r5
 80039ea:	4630      	mov	r0, r6
 80039ec:	f7ff ffa6 	bl	800393c <sbrk_aligned>
 80039f0:	3001      	adds	r0, #1
 80039f2:	d03a      	beq.n	8003a6a <_malloc_r+0xea>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	442b      	add	r3, r5
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	f8d8 3000 	ldr.w	r3, [r8]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	bb62      	cbnz	r2, 8003a5c <_malloc_r+0xdc>
 8003a02:	f8c8 7000 	str.w	r7, [r8]
 8003a06:	e00f      	b.n	8003a28 <_malloc_r+0xa8>
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	1b52      	subs	r2, r2, r5
 8003a0c:	d420      	bmi.n	8003a50 <_malloc_r+0xd0>
 8003a0e:	2a0b      	cmp	r2, #11
 8003a10:	d917      	bls.n	8003a42 <_malloc_r+0xc2>
 8003a12:	1961      	adds	r1, r4, r5
 8003a14:	42a3      	cmp	r3, r4
 8003a16:	6025      	str	r5, [r4, #0]
 8003a18:	bf18      	it	ne
 8003a1a:	6059      	strne	r1, [r3, #4]
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	bf08      	it	eq
 8003a20:	f8c8 1000 	streq.w	r1, [r8]
 8003a24:	5162      	str	r2, [r4, r5]
 8003a26:	604b      	str	r3, [r1, #4]
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f000 f82f 	bl	8003a8c <__malloc_unlock>
 8003a2e:	f104 000b 	add.w	r0, r4, #11
 8003a32:	1d23      	adds	r3, r4, #4
 8003a34:	f020 0007 	bic.w	r0, r0, #7
 8003a38:	1ac2      	subs	r2, r0, r3
 8003a3a:	bf1c      	itt	ne
 8003a3c:	1a1b      	subne	r3, r3, r0
 8003a3e:	50a3      	strne	r3, [r4, r2]
 8003a40:	e7af      	b.n	80039a2 <_malloc_r+0x22>
 8003a42:	6862      	ldr	r2, [r4, #4]
 8003a44:	42a3      	cmp	r3, r4
 8003a46:	bf0c      	ite	eq
 8003a48:	f8c8 2000 	streq.w	r2, [r8]
 8003a4c:	605a      	strne	r2, [r3, #4]
 8003a4e:	e7eb      	b.n	8003a28 <_malloc_r+0xa8>
 8003a50:	4623      	mov	r3, r4
 8003a52:	6864      	ldr	r4, [r4, #4]
 8003a54:	e7ae      	b.n	80039b4 <_malloc_r+0x34>
 8003a56:	463c      	mov	r4, r7
 8003a58:	687f      	ldr	r7, [r7, #4]
 8003a5a:	e7b6      	b.n	80039ca <_malloc_r+0x4a>
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	42a3      	cmp	r3, r4
 8003a62:	d1fb      	bne.n	8003a5c <_malloc_r+0xdc>
 8003a64:	2300      	movs	r3, #0
 8003a66:	6053      	str	r3, [r2, #4]
 8003a68:	e7de      	b.n	8003a28 <_malloc_r+0xa8>
 8003a6a:	230c      	movs	r3, #12
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f000 f80c 	bl	8003a8c <__malloc_unlock>
 8003a74:	e794      	b.n	80039a0 <_malloc_r+0x20>
 8003a76:	6005      	str	r5, [r0, #0]
 8003a78:	e7d6      	b.n	8003a28 <_malloc_r+0xa8>
 8003a7a:	bf00      	nop
 8003a7c:	20000308 	.word	0x20000308

08003a80 <__malloc_lock>:
 8003a80:	4801      	ldr	r0, [pc, #4]	@ (8003a88 <__malloc_lock+0x8>)
 8003a82:	f7ff bf0f 	b.w	80038a4 <__retarget_lock_acquire_recursive>
 8003a86:	bf00      	nop
 8003a88:	20000300 	.word	0x20000300

08003a8c <__malloc_unlock>:
 8003a8c:	4801      	ldr	r0, [pc, #4]	@ (8003a94 <__malloc_unlock+0x8>)
 8003a8e:	f7ff bf0a 	b.w	80038a6 <__retarget_lock_release_recursive>
 8003a92:	bf00      	nop
 8003a94:	20000300 	.word	0x20000300

08003a98 <__ssputs_r>:
 8003a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a9c:	688e      	ldr	r6, [r1, #8]
 8003a9e:	461f      	mov	r7, r3
 8003aa0:	42be      	cmp	r6, r7
 8003aa2:	680b      	ldr	r3, [r1, #0]
 8003aa4:	4682      	mov	sl, r0
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	4690      	mov	r8, r2
 8003aaa:	d82d      	bhi.n	8003b08 <__ssputs_r+0x70>
 8003aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ab0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ab4:	d026      	beq.n	8003b04 <__ssputs_r+0x6c>
 8003ab6:	6965      	ldr	r5, [r4, #20]
 8003ab8:	6909      	ldr	r1, [r1, #16]
 8003aba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003abe:	eba3 0901 	sub.w	r9, r3, r1
 8003ac2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ac6:	1c7b      	adds	r3, r7, #1
 8003ac8:	444b      	add	r3, r9
 8003aca:	106d      	asrs	r5, r5, #1
 8003acc:	429d      	cmp	r5, r3
 8003ace:	bf38      	it	cc
 8003ad0:	461d      	movcc	r5, r3
 8003ad2:	0553      	lsls	r3, r2, #21
 8003ad4:	d527      	bpl.n	8003b26 <__ssputs_r+0x8e>
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7ff ff52 	bl	8003980 <_malloc_r>
 8003adc:	4606      	mov	r6, r0
 8003ade:	b360      	cbz	r0, 8003b3a <__ssputs_r+0xa2>
 8003ae0:	6921      	ldr	r1, [r4, #16]
 8003ae2:	464a      	mov	r2, r9
 8003ae4:	f000 fae6 	bl	80040b4 <memcpy>
 8003ae8:	89a3      	ldrh	r3, [r4, #12]
 8003aea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003af2:	81a3      	strh	r3, [r4, #12]
 8003af4:	6126      	str	r6, [r4, #16]
 8003af6:	6165      	str	r5, [r4, #20]
 8003af8:	444e      	add	r6, r9
 8003afa:	eba5 0509 	sub.w	r5, r5, r9
 8003afe:	6026      	str	r6, [r4, #0]
 8003b00:	60a5      	str	r5, [r4, #8]
 8003b02:	463e      	mov	r6, r7
 8003b04:	42be      	cmp	r6, r7
 8003b06:	d900      	bls.n	8003b0a <__ssputs_r+0x72>
 8003b08:	463e      	mov	r6, r7
 8003b0a:	6820      	ldr	r0, [r4, #0]
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	4641      	mov	r1, r8
 8003b10:	f000 faa6 	bl	8004060 <memmove>
 8003b14:	68a3      	ldr	r3, [r4, #8]
 8003b16:	1b9b      	subs	r3, r3, r6
 8003b18:	60a3      	str	r3, [r4, #8]
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	4433      	add	r3, r6
 8003b1e:	6023      	str	r3, [r4, #0]
 8003b20:	2000      	movs	r0, #0
 8003b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b26:	462a      	mov	r2, r5
 8003b28:	f000 fad2 	bl	80040d0 <_realloc_r>
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d1e0      	bne.n	8003af4 <__ssputs_r+0x5c>
 8003b32:	6921      	ldr	r1, [r4, #16]
 8003b34:	4650      	mov	r0, sl
 8003b36:	f7ff feb7 	bl	80038a8 <_free_r>
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	f8ca 3000 	str.w	r3, [sl]
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	e7e9      	b.n	8003b22 <__ssputs_r+0x8a>
	...

08003b50 <_svfiprintf_r>:
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	4698      	mov	r8, r3
 8003b56:	898b      	ldrh	r3, [r1, #12]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	b09d      	sub	sp, #116	@ 0x74
 8003b5c:	4607      	mov	r7, r0
 8003b5e:	460d      	mov	r5, r1
 8003b60:	4614      	mov	r4, r2
 8003b62:	d510      	bpl.n	8003b86 <_svfiprintf_r+0x36>
 8003b64:	690b      	ldr	r3, [r1, #16]
 8003b66:	b973      	cbnz	r3, 8003b86 <_svfiprintf_r+0x36>
 8003b68:	2140      	movs	r1, #64	@ 0x40
 8003b6a:	f7ff ff09 	bl	8003980 <_malloc_r>
 8003b6e:	6028      	str	r0, [r5, #0]
 8003b70:	6128      	str	r0, [r5, #16]
 8003b72:	b930      	cbnz	r0, 8003b82 <_svfiprintf_r+0x32>
 8003b74:	230c      	movs	r3, #12
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	b01d      	add	sp, #116	@ 0x74
 8003b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b82:	2340      	movs	r3, #64	@ 0x40
 8003b84:	616b      	str	r3, [r5, #20]
 8003b86:	2300      	movs	r3, #0
 8003b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b8a:	2320      	movs	r3, #32
 8003b8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b94:	2330      	movs	r3, #48	@ 0x30
 8003b96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003d34 <_svfiprintf_r+0x1e4>
 8003b9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b9e:	f04f 0901 	mov.w	r9, #1
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	469a      	mov	sl, r3
 8003ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003baa:	b10a      	cbz	r2, 8003bb0 <_svfiprintf_r+0x60>
 8003bac:	2a25      	cmp	r2, #37	@ 0x25
 8003bae:	d1f9      	bne.n	8003ba4 <_svfiprintf_r+0x54>
 8003bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8003bb4:	d00b      	beq.n	8003bce <_svfiprintf_r+0x7e>
 8003bb6:	465b      	mov	r3, fp
 8003bb8:	4622      	mov	r2, r4
 8003bba:	4629      	mov	r1, r5
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	f7ff ff6b 	bl	8003a98 <__ssputs_r>
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	f000 80a7 	beq.w	8003d16 <_svfiprintf_r+0x1c6>
 8003bc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bca:	445a      	add	r2, fp
 8003bcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bce:	f89a 3000 	ldrb.w	r3, [sl]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 809f 	beq.w	8003d16 <_svfiprintf_r+0x1c6>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f04f 32ff 	mov.w	r2, #4294967295
 8003bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003be2:	f10a 0a01 	add.w	sl, sl, #1
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	9307      	str	r3, [sp, #28]
 8003bea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bee:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bf0:	4654      	mov	r4, sl
 8003bf2:	2205      	movs	r2, #5
 8003bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf8:	484e      	ldr	r0, [pc, #312]	@ (8003d34 <_svfiprintf_r+0x1e4>)
 8003bfa:	f7fc faf9 	bl	80001f0 <memchr>
 8003bfe:	9a04      	ldr	r2, [sp, #16]
 8003c00:	b9d8      	cbnz	r0, 8003c3a <_svfiprintf_r+0xea>
 8003c02:	06d0      	lsls	r0, r2, #27
 8003c04:	bf44      	itt	mi
 8003c06:	2320      	movmi	r3, #32
 8003c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c0c:	0711      	lsls	r1, r2, #28
 8003c0e:	bf44      	itt	mi
 8003c10:	232b      	movmi	r3, #43	@ 0x2b
 8003c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c16:	f89a 3000 	ldrb.w	r3, [sl]
 8003c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c1c:	d015      	beq.n	8003c4a <_svfiprintf_r+0xfa>
 8003c1e:	9a07      	ldr	r2, [sp, #28]
 8003c20:	4654      	mov	r4, sl
 8003c22:	2000      	movs	r0, #0
 8003c24:	f04f 0c0a 	mov.w	ip, #10
 8003c28:	4621      	mov	r1, r4
 8003c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c2e:	3b30      	subs	r3, #48	@ 0x30
 8003c30:	2b09      	cmp	r3, #9
 8003c32:	d94b      	bls.n	8003ccc <_svfiprintf_r+0x17c>
 8003c34:	b1b0      	cbz	r0, 8003c64 <_svfiprintf_r+0x114>
 8003c36:	9207      	str	r2, [sp, #28]
 8003c38:	e014      	b.n	8003c64 <_svfiprintf_r+0x114>
 8003c3a:	eba0 0308 	sub.w	r3, r0, r8
 8003c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003c42:	4313      	orrs	r3, r2
 8003c44:	9304      	str	r3, [sp, #16]
 8003c46:	46a2      	mov	sl, r4
 8003c48:	e7d2      	b.n	8003bf0 <_svfiprintf_r+0xa0>
 8003c4a:	9b03      	ldr	r3, [sp, #12]
 8003c4c:	1d19      	adds	r1, r3, #4
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	9103      	str	r1, [sp, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bfbb      	ittet	lt
 8003c56:	425b      	neglt	r3, r3
 8003c58:	f042 0202 	orrlt.w	r2, r2, #2
 8003c5c:	9307      	strge	r3, [sp, #28]
 8003c5e:	9307      	strlt	r3, [sp, #28]
 8003c60:	bfb8      	it	lt
 8003c62:	9204      	strlt	r2, [sp, #16]
 8003c64:	7823      	ldrb	r3, [r4, #0]
 8003c66:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c68:	d10a      	bne.n	8003c80 <_svfiprintf_r+0x130>
 8003c6a:	7863      	ldrb	r3, [r4, #1]
 8003c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c6e:	d132      	bne.n	8003cd6 <_svfiprintf_r+0x186>
 8003c70:	9b03      	ldr	r3, [sp, #12]
 8003c72:	1d1a      	adds	r2, r3, #4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	9203      	str	r2, [sp, #12]
 8003c78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c7c:	3402      	adds	r4, #2
 8003c7e:	9305      	str	r3, [sp, #20]
 8003c80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003d44 <_svfiprintf_r+0x1f4>
 8003c84:	7821      	ldrb	r1, [r4, #0]
 8003c86:	2203      	movs	r2, #3
 8003c88:	4650      	mov	r0, sl
 8003c8a:	f7fc fab1 	bl	80001f0 <memchr>
 8003c8e:	b138      	cbz	r0, 8003ca0 <_svfiprintf_r+0x150>
 8003c90:	9b04      	ldr	r3, [sp, #16]
 8003c92:	eba0 000a 	sub.w	r0, r0, sl
 8003c96:	2240      	movs	r2, #64	@ 0x40
 8003c98:	4082      	lsls	r2, r0
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	3401      	adds	r4, #1
 8003c9e:	9304      	str	r3, [sp, #16]
 8003ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ca4:	4824      	ldr	r0, [pc, #144]	@ (8003d38 <_svfiprintf_r+0x1e8>)
 8003ca6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003caa:	2206      	movs	r2, #6
 8003cac:	f7fc faa0 	bl	80001f0 <memchr>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d036      	beq.n	8003d22 <_svfiprintf_r+0x1d2>
 8003cb4:	4b21      	ldr	r3, [pc, #132]	@ (8003d3c <_svfiprintf_r+0x1ec>)
 8003cb6:	bb1b      	cbnz	r3, 8003d00 <_svfiprintf_r+0x1b0>
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	3307      	adds	r3, #7
 8003cbc:	f023 0307 	bic.w	r3, r3, #7
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	9303      	str	r3, [sp, #12]
 8003cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cc6:	4433      	add	r3, r6
 8003cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cca:	e76a      	b.n	8003ba2 <_svfiprintf_r+0x52>
 8003ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	e7a8      	b.n	8003c28 <_svfiprintf_r+0xd8>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	3401      	adds	r4, #1
 8003cda:	9305      	str	r3, [sp, #20]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f04f 0c0a 	mov.w	ip, #10
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ce8:	3a30      	subs	r2, #48	@ 0x30
 8003cea:	2a09      	cmp	r2, #9
 8003cec:	d903      	bls.n	8003cf6 <_svfiprintf_r+0x1a6>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0c6      	beq.n	8003c80 <_svfiprintf_r+0x130>
 8003cf2:	9105      	str	r1, [sp, #20]
 8003cf4:	e7c4      	b.n	8003c80 <_svfiprintf_r+0x130>
 8003cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e7f0      	b.n	8003ce2 <_svfiprintf_r+0x192>
 8003d00:	ab03      	add	r3, sp, #12
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	462a      	mov	r2, r5
 8003d06:	4b0e      	ldr	r3, [pc, #56]	@ (8003d40 <_svfiprintf_r+0x1f0>)
 8003d08:	a904      	add	r1, sp, #16
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	f3af 8000 	nop.w
 8003d10:	1c42      	adds	r2, r0, #1
 8003d12:	4606      	mov	r6, r0
 8003d14:	d1d6      	bne.n	8003cc4 <_svfiprintf_r+0x174>
 8003d16:	89ab      	ldrh	r3, [r5, #12]
 8003d18:	065b      	lsls	r3, r3, #25
 8003d1a:	f53f af2d 	bmi.w	8003b78 <_svfiprintf_r+0x28>
 8003d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d20:	e72c      	b.n	8003b7c <_svfiprintf_r+0x2c>
 8003d22:	ab03      	add	r3, sp, #12
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	462a      	mov	r2, r5
 8003d28:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <_svfiprintf_r+0x1f0>)
 8003d2a:	a904      	add	r1, sp, #16
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	f000 f879 	bl	8003e24 <_printf_i>
 8003d32:	e7ed      	b.n	8003d10 <_svfiprintf_r+0x1c0>
 8003d34:	080041c0 	.word	0x080041c0
 8003d38:	080041ca 	.word	0x080041ca
 8003d3c:	00000000 	.word	0x00000000
 8003d40:	08003a99 	.word	0x08003a99
 8003d44:	080041c6 	.word	0x080041c6

08003d48 <_printf_common>:
 8003d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d4c:	4616      	mov	r6, r2
 8003d4e:	4698      	mov	r8, r3
 8003d50:	688a      	ldr	r2, [r1, #8]
 8003d52:	690b      	ldr	r3, [r1, #16]
 8003d54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	bfb8      	it	lt
 8003d5c:	4613      	movlt	r3, r2
 8003d5e:	6033      	str	r3, [r6, #0]
 8003d60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d64:	4607      	mov	r7, r0
 8003d66:	460c      	mov	r4, r1
 8003d68:	b10a      	cbz	r2, 8003d6e <_printf_common+0x26>
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	6033      	str	r3, [r6, #0]
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	0699      	lsls	r1, r3, #26
 8003d72:	bf42      	ittt	mi
 8003d74:	6833      	ldrmi	r3, [r6, #0]
 8003d76:	3302      	addmi	r3, #2
 8003d78:	6033      	strmi	r3, [r6, #0]
 8003d7a:	6825      	ldr	r5, [r4, #0]
 8003d7c:	f015 0506 	ands.w	r5, r5, #6
 8003d80:	d106      	bne.n	8003d90 <_printf_common+0x48>
 8003d82:	f104 0a19 	add.w	sl, r4, #25
 8003d86:	68e3      	ldr	r3, [r4, #12]
 8003d88:	6832      	ldr	r2, [r6, #0]
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	42ab      	cmp	r3, r5
 8003d8e:	dc26      	bgt.n	8003dde <_printf_common+0x96>
 8003d90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d94:	6822      	ldr	r2, [r4, #0]
 8003d96:	3b00      	subs	r3, #0
 8003d98:	bf18      	it	ne
 8003d9a:	2301      	movne	r3, #1
 8003d9c:	0692      	lsls	r2, r2, #26
 8003d9e:	d42b      	bmi.n	8003df8 <_printf_common+0xb0>
 8003da0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003da4:	4641      	mov	r1, r8
 8003da6:	4638      	mov	r0, r7
 8003da8:	47c8      	blx	r9
 8003daa:	3001      	adds	r0, #1
 8003dac:	d01e      	beq.n	8003dec <_printf_common+0xa4>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	6922      	ldr	r2, [r4, #16]
 8003db2:	f003 0306 	and.w	r3, r3, #6
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	bf02      	ittt	eq
 8003dba:	68e5      	ldreq	r5, [r4, #12]
 8003dbc:	6833      	ldreq	r3, [r6, #0]
 8003dbe:	1aed      	subeq	r5, r5, r3
 8003dc0:	68a3      	ldr	r3, [r4, #8]
 8003dc2:	bf0c      	ite	eq
 8003dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dc8:	2500      	movne	r5, #0
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	bfc4      	itt	gt
 8003dce:	1a9b      	subgt	r3, r3, r2
 8003dd0:	18ed      	addgt	r5, r5, r3
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	341a      	adds	r4, #26
 8003dd6:	42b5      	cmp	r5, r6
 8003dd8:	d11a      	bne.n	8003e10 <_printf_common+0xc8>
 8003dda:	2000      	movs	r0, #0
 8003ddc:	e008      	b.n	8003df0 <_printf_common+0xa8>
 8003dde:	2301      	movs	r3, #1
 8003de0:	4652      	mov	r2, sl
 8003de2:	4641      	mov	r1, r8
 8003de4:	4638      	mov	r0, r7
 8003de6:	47c8      	blx	r9
 8003de8:	3001      	adds	r0, #1
 8003dea:	d103      	bne.n	8003df4 <_printf_common+0xac>
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295
 8003df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df4:	3501      	adds	r5, #1
 8003df6:	e7c6      	b.n	8003d86 <_printf_common+0x3e>
 8003df8:	18e1      	adds	r1, r4, r3
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	2030      	movs	r0, #48	@ 0x30
 8003dfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e02:	4422      	add	r2, r4
 8003e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	e7c7      	b.n	8003da0 <_printf_common+0x58>
 8003e10:	2301      	movs	r3, #1
 8003e12:	4622      	mov	r2, r4
 8003e14:	4641      	mov	r1, r8
 8003e16:	4638      	mov	r0, r7
 8003e18:	47c8      	blx	r9
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d0e6      	beq.n	8003dec <_printf_common+0xa4>
 8003e1e:	3601      	adds	r6, #1
 8003e20:	e7d9      	b.n	8003dd6 <_printf_common+0x8e>
	...

08003e24 <_printf_i>:
 8003e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e28:	7e0f      	ldrb	r7, [r1, #24]
 8003e2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e2c:	2f78      	cmp	r7, #120	@ 0x78
 8003e2e:	4691      	mov	r9, r2
 8003e30:	4680      	mov	r8, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	469a      	mov	sl, r3
 8003e36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e3a:	d807      	bhi.n	8003e4c <_printf_i+0x28>
 8003e3c:	2f62      	cmp	r7, #98	@ 0x62
 8003e3e:	d80a      	bhi.n	8003e56 <_printf_i+0x32>
 8003e40:	2f00      	cmp	r7, #0
 8003e42:	f000 80d1 	beq.w	8003fe8 <_printf_i+0x1c4>
 8003e46:	2f58      	cmp	r7, #88	@ 0x58
 8003e48:	f000 80b8 	beq.w	8003fbc <_printf_i+0x198>
 8003e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e54:	e03a      	b.n	8003ecc <_printf_i+0xa8>
 8003e56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e5a:	2b15      	cmp	r3, #21
 8003e5c:	d8f6      	bhi.n	8003e4c <_printf_i+0x28>
 8003e5e:	a101      	add	r1, pc, #4	@ (adr r1, 8003e64 <_printf_i+0x40>)
 8003e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e64:	08003ebd 	.word	0x08003ebd
 8003e68:	08003ed1 	.word	0x08003ed1
 8003e6c:	08003e4d 	.word	0x08003e4d
 8003e70:	08003e4d 	.word	0x08003e4d
 8003e74:	08003e4d 	.word	0x08003e4d
 8003e78:	08003e4d 	.word	0x08003e4d
 8003e7c:	08003ed1 	.word	0x08003ed1
 8003e80:	08003e4d 	.word	0x08003e4d
 8003e84:	08003e4d 	.word	0x08003e4d
 8003e88:	08003e4d 	.word	0x08003e4d
 8003e8c:	08003e4d 	.word	0x08003e4d
 8003e90:	08003fcf 	.word	0x08003fcf
 8003e94:	08003efb 	.word	0x08003efb
 8003e98:	08003f89 	.word	0x08003f89
 8003e9c:	08003e4d 	.word	0x08003e4d
 8003ea0:	08003e4d 	.word	0x08003e4d
 8003ea4:	08003ff1 	.word	0x08003ff1
 8003ea8:	08003e4d 	.word	0x08003e4d
 8003eac:	08003efb 	.word	0x08003efb
 8003eb0:	08003e4d 	.word	0x08003e4d
 8003eb4:	08003e4d 	.word	0x08003e4d
 8003eb8:	08003f91 	.word	0x08003f91
 8003ebc:	6833      	ldr	r3, [r6, #0]
 8003ebe:	1d1a      	adds	r2, r3, #4
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6032      	str	r2, [r6, #0]
 8003ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e09c      	b.n	800400a <_printf_i+0x1e6>
 8003ed0:	6833      	ldr	r3, [r6, #0]
 8003ed2:	6820      	ldr	r0, [r4, #0]
 8003ed4:	1d19      	adds	r1, r3, #4
 8003ed6:	6031      	str	r1, [r6, #0]
 8003ed8:	0606      	lsls	r6, r0, #24
 8003eda:	d501      	bpl.n	8003ee0 <_printf_i+0xbc>
 8003edc:	681d      	ldr	r5, [r3, #0]
 8003ede:	e003      	b.n	8003ee8 <_printf_i+0xc4>
 8003ee0:	0645      	lsls	r5, r0, #25
 8003ee2:	d5fb      	bpl.n	8003edc <_printf_i+0xb8>
 8003ee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	da03      	bge.n	8003ef4 <_printf_i+0xd0>
 8003eec:	232d      	movs	r3, #45	@ 0x2d
 8003eee:	426d      	negs	r5, r5
 8003ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ef4:	4858      	ldr	r0, [pc, #352]	@ (8004058 <_printf_i+0x234>)
 8003ef6:	230a      	movs	r3, #10
 8003ef8:	e011      	b.n	8003f1e <_printf_i+0xfa>
 8003efa:	6821      	ldr	r1, [r4, #0]
 8003efc:	6833      	ldr	r3, [r6, #0]
 8003efe:	0608      	lsls	r0, r1, #24
 8003f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f04:	d402      	bmi.n	8003f0c <_printf_i+0xe8>
 8003f06:	0649      	lsls	r1, r1, #25
 8003f08:	bf48      	it	mi
 8003f0a:	b2ad      	uxthmi	r5, r5
 8003f0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f0e:	4852      	ldr	r0, [pc, #328]	@ (8004058 <_printf_i+0x234>)
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	bf14      	ite	ne
 8003f14:	230a      	movne	r3, #10
 8003f16:	2308      	moveq	r3, #8
 8003f18:	2100      	movs	r1, #0
 8003f1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f1e:	6866      	ldr	r6, [r4, #4]
 8003f20:	60a6      	str	r6, [r4, #8]
 8003f22:	2e00      	cmp	r6, #0
 8003f24:	db05      	blt.n	8003f32 <_printf_i+0x10e>
 8003f26:	6821      	ldr	r1, [r4, #0]
 8003f28:	432e      	orrs	r6, r5
 8003f2a:	f021 0104 	bic.w	r1, r1, #4
 8003f2e:	6021      	str	r1, [r4, #0]
 8003f30:	d04b      	beq.n	8003fca <_printf_i+0x1a6>
 8003f32:	4616      	mov	r6, r2
 8003f34:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f38:	fb03 5711 	mls	r7, r3, r1, r5
 8003f3c:	5dc7      	ldrb	r7, [r0, r7]
 8003f3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f42:	462f      	mov	r7, r5
 8003f44:	42bb      	cmp	r3, r7
 8003f46:	460d      	mov	r5, r1
 8003f48:	d9f4      	bls.n	8003f34 <_printf_i+0x110>
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d10b      	bne.n	8003f66 <_printf_i+0x142>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	07df      	lsls	r7, r3, #31
 8003f52:	d508      	bpl.n	8003f66 <_printf_i+0x142>
 8003f54:	6923      	ldr	r3, [r4, #16]
 8003f56:	6861      	ldr	r1, [r4, #4]
 8003f58:	4299      	cmp	r1, r3
 8003f5a:	bfde      	ittt	le
 8003f5c:	2330      	movle	r3, #48	@ 0x30
 8003f5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f66:	1b92      	subs	r2, r2, r6
 8003f68:	6122      	str	r2, [r4, #16]
 8003f6a:	f8cd a000 	str.w	sl, [sp]
 8003f6e:	464b      	mov	r3, r9
 8003f70:	aa03      	add	r2, sp, #12
 8003f72:	4621      	mov	r1, r4
 8003f74:	4640      	mov	r0, r8
 8003f76:	f7ff fee7 	bl	8003d48 <_printf_common>
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d14a      	bne.n	8004014 <_printf_i+0x1f0>
 8003f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f82:	b004      	add	sp, #16
 8003f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	f043 0320 	orr.w	r3, r3, #32
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	4832      	ldr	r0, [pc, #200]	@ (800405c <_printf_i+0x238>)
 8003f92:	2778      	movs	r7, #120	@ 0x78
 8003f94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	6831      	ldr	r1, [r6, #0]
 8003f9c:	061f      	lsls	r7, r3, #24
 8003f9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fa2:	d402      	bmi.n	8003faa <_printf_i+0x186>
 8003fa4:	065f      	lsls	r7, r3, #25
 8003fa6:	bf48      	it	mi
 8003fa8:	b2ad      	uxthmi	r5, r5
 8003faa:	6031      	str	r1, [r6, #0]
 8003fac:	07d9      	lsls	r1, r3, #31
 8003fae:	bf44      	itt	mi
 8003fb0:	f043 0320 	orrmi.w	r3, r3, #32
 8003fb4:	6023      	strmi	r3, [r4, #0]
 8003fb6:	b11d      	cbz	r5, 8003fc0 <_printf_i+0x19c>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	e7ad      	b.n	8003f18 <_printf_i+0xf4>
 8003fbc:	4826      	ldr	r0, [pc, #152]	@ (8004058 <_printf_i+0x234>)
 8003fbe:	e7e9      	b.n	8003f94 <_printf_i+0x170>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	f023 0320 	bic.w	r3, r3, #32
 8003fc6:	6023      	str	r3, [r4, #0]
 8003fc8:	e7f6      	b.n	8003fb8 <_printf_i+0x194>
 8003fca:	4616      	mov	r6, r2
 8003fcc:	e7bd      	b.n	8003f4a <_printf_i+0x126>
 8003fce:	6833      	ldr	r3, [r6, #0]
 8003fd0:	6825      	ldr	r5, [r4, #0]
 8003fd2:	6961      	ldr	r1, [r4, #20]
 8003fd4:	1d18      	adds	r0, r3, #4
 8003fd6:	6030      	str	r0, [r6, #0]
 8003fd8:	062e      	lsls	r6, r5, #24
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	d501      	bpl.n	8003fe2 <_printf_i+0x1be>
 8003fde:	6019      	str	r1, [r3, #0]
 8003fe0:	e002      	b.n	8003fe8 <_printf_i+0x1c4>
 8003fe2:	0668      	lsls	r0, r5, #25
 8003fe4:	d5fb      	bpl.n	8003fde <_printf_i+0x1ba>
 8003fe6:	8019      	strh	r1, [r3, #0]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6123      	str	r3, [r4, #16]
 8003fec:	4616      	mov	r6, r2
 8003fee:	e7bc      	b.n	8003f6a <_printf_i+0x146>
 8003ff0:	6833      	ldr	r3, [r6, #0]
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	6032      	str	r2, [r6, #0]
 8003ff6:	681e      	ldr	r6, [r3, #0]
 8003ff8:	6862      	ldr	r2, [r4, #4]
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f7fc f8f7 	bl	80001f0 <memchr>
 8004002:	b108      	cbz	r0, 8004008 <_printf_i+0x1e4>
 8004004:	1b80      	subs	r0, r0, r6
 8004006:	6060      	str	r0, [r4, #4]
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	2300      	movs	r3, #0
 800400e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004012:	e7aa      	b.n	8003f6a <_printf_i+0x146>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	4632      	mov	r2, r6
 8004018:	4649      	mov	r1, r9
 800401a:	4640      	mov	r0, r8
 800401c:	47d0      	blx	sl
 800401e:	3001      	adds	r0, #1
 8004020:	d0ad      	beq.n	8003f7e <_printf_i+0x15a>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	079b      	lsls	r3, r3, #30
 8004026:	d413      	bmi.n	8004050 <_printf_i+0x22c>
 8004028:	68e0      	ldr	r0, [r4, #12]
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	4298      	cmp	r0, r3
 800402e:	bfb8      	it	lt
 8004030:	4618      	movlt	r0, r3
 8004032:	e7a6      	b.n	8003f82 <_printf_i+0x15e>
 8004034:	2301      	movs	r3, #1
 8004036:	4632      	mov	r2, r6
 8004038:	4649      	mov	r1, r9
 800403a:	4640      	mov	r0, r8
 800403c:	47d0      	blx	sl
 800403e:	3001      	adds	r0, #1
 8004040:	d09d      	beq.n	8003f7e <_printf_i+0x15a>
 8004042:	3501      	adds	r5, #1
 8004044:	68e3      	ldr	r3, [r4, #12]
 8004046:	9903      	ldr	r1, [sp, #12]
 8004048:	1a5b      	subs	r3, r3, r1
 800404a:	42ab      	cmp	r3, r5
 800404c:	dcf2      	bgt.n	8004034 <_printf_i+0x210>
 800404e:	e7eb      	b.n	8004028 <_printf_i+0x204>
 8004050:	2500      	movs	r5, #0
 8004052:	f104 0619 	add.w	r6, r4, #25
 8004056:	e7f5      	b.n	8004044 <_printf_i+0x220>
 8004058:	080041d1 	.word	0x080041d1
 800405c:	080041e2 	.word	0x080041e2

08004060 <memmove>:
 8004060:	4288      	cmp	r0, r1
 8004062:	b510      	push	{r4, lr}
 8004064:	eb01 0402 	add.w	r4, r1, r2
 8004068:	d902      	bls.n	8004070 <memmove+0x10>
 800406a:	4284      	cmp	r4, r0
 800406c:	4623      	mov	r3, r4
 800406e:	d807      	bhi.n	8004080 <memmove+0x20>
 8004070:	1e43      	subs	r3, r0, #1
 8004072:	42a1      	cmp	r1, r4
 8004074:	d008      	beq.n	8004088 <memmove+0x28>
 8004076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800407a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800407e:	e7f8      	b.n	8004072 <memmove+0x12>
 8004080:	4402      	add	r2, r0
 8004082:	4601      	mov	r1, r0
 8004084:	428a      	cmp	r2, r1
 8004086:	d100      	bne.n	800408a <memmove+0x2a>
 8004088:	bd10      	pop	{r4, pc}
 800408a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800408e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004092:	e7f7      	b.n	8004084 <memmove+0x24>

08004094 <_sbrk_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4d06      	ldr	r5, [pc, #24]	@ (80040b0 <_sbrk_r+0x1c>)
 8004098:	2300      	movs	r3, #0
 800409a:	4604      	mov	r4, r0
 800409c:	4608      	mov	r0, r1
 800409e:	602b      	str	r3, [r5, #0]
 80040a0:	f7fc fc16 	bl	80008d0 <_sbrk>
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	d102      	bne.n	80040ae <_sbrk_r+0x1a>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	b103      	cbz	r3, 80040ae <_sbrk_r+0x1a>
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
 80040b0:	200002fc 	.word	0x200002fc

080040b4 <memcpy>:
 80040b4:	440a      	add	r2, r1
 80040b6:	4291      	cmp	r1, r2
 80040b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040bc:	d100      	bne.n	80040c0 <memcpy+0xc>
 80040be:	4770      	bx	lr
 80040c0:	b510      	push	{r4, lr}
 80040c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040ca:	4291      	cmp	r1, r2
 80040cc:	d1f9      	bne.n	80040c2 <memcpy+0xe>
 80040ce:	bd10      	pop	{r4, pc}

080040d0 <_realloc_r>:
 80040d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d4:	4607      	mov	r7, r0
 80040d6:	4614      	mov	r4, r2
 80040d8:	460d      	mov	r5, r1
 80040da:	b921      	cbnz	r1, 80040e6 <_realloc_r+0x16>
 80040dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040e0:	4611      	mov	r1, r2
 80040e2:	f7ff bc4d 	b.w	8003980 <_malloc_r>
 80040e6:	b92a      	cbnz	r2, 80040f4 <_realloc_r+0x24>
 80040e8:	f7ff fbde 	bl	80038a8 <_free_r>
 80040ec:	4625      	mov	r5, r4
 80040ee:	4628      	mov	r0, r5
 80040f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f4:	f000 f81a 	bl	800412c <_malloc_usable_size_r>
 80040f8:	4284      	cmp	r4, r0
 80040fa:	4606      	mov	r6, r0
 80040fc:	d802      	bhi.n	8004104 <_realloc_r+0x34>
 80040fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004102:	d8f4      	bhi.n	80040ee <_realloc_r+0x1e>
 8004104:	4621      	mov	r1, r4
 8004106:	4638      	mov	r0, r7
 8004108:	f7ff fc3a 	bl	8003980 <_malloc_r>
 800410c:	4680      	mov	r8, r0
 800410e:	b908      	cbnz	r0, 8004114 <_realloc_r+0x44>
 8004110:	4645      	mov	r5, r8
 8004112:	e7ec      	b.n	80040ee <_realloc_r+0x1e>
 8004114:	42b4      	cmp	r4, r6
 8004116:	4622      	mov	r2, r4
 8004118:	4629      	mov	r1, r5
 800411a:	bf28      	it	cs
 800411c:	4632      	movcs	r2, r6
 800411e:	f7ff ffc9 	bl	80040b4 <memcpy>
 8004122:	4629      	mov	r1, r5
 8004124:	4638      	mov	r0, r7
 8004126:	f7ff fbbf 	bl	80038a8 <_free_r>
 800412a:	e7f1      	b.n	8004110 <_realloc_r+0x40>

0800412c <_malloc_usable_size_r>:
 800412c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004130:	1f18      	subs	r0, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	bfbc      	itt	lt
 8004136:	580b      	ldrlt	r3, [r1, r0]
 8004138:	18c0      	addlt	r0, r0, r3
 800413a:	4770      	bx	lr

0800413c <_init>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	bf00      	nop
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr

08004148 <_fini>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	bf00      	nop
 800414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414e:	bc08      	pop	{r3}
 8004150:	469e      	mov	lr, r3
 8004152:	4770      	bx	lr
