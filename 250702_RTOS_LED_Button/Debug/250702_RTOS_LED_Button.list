
250702_RTOS_LED_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000726c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800740c  0800740c  0000840c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007560  08007560  00009100  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007560  08007560  00008560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007568  08007568  00009100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007568  08007568  00008568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800756c  0800756c  0000856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08007570  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000429c  20000100  08007670  00009100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000439c  08007670  0000939c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016240  00000000  00000000  00009130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b39  00000000  00000000  0001f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00022eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f46  00000000  00000000  00024288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195e6  00000000  00000000  000251ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c55  00000000  00000000  0003e7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d7f  00000000  00000000  00057409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef188  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  000ef1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000f47e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073f4 	.word	0x080073f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	080073f4 	.word	0x080073f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000140 	.word	0x20000140
 80005dc:	200001e0 	.word	0x200001e0

080005e0 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b09e      	sub	sp, #120	@ 0x78
 80005e4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */
	/* Create the mutex(es) */
	/* definition and creation of LcdMutex */
	osMutexDef(LcdMutex);
 80005e6:	2300      	movs	r3, #0
 80005e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80005ea:	2300      	movs	r3, #0
 80005ec:	677b      	str	r3, [r7, #116]	@ 0x74
	LcdMutexHandle = osMutexCreate(osMutex(LcdMutex));
 80005ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fab3 	bl	8003b5e <osMutexCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a30      	ldr	r2, [pc, #192]	@ (80006bc <MX_FREERTOS_Init+0xdc>)
 80005fc:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005fe:	4b30      	ldr	r3, [pc, #192]	@ (80006c0 <MX_FREERTOS_Init+0xe0>)
 8000600:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000612:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fa40 	bl	8003a9e <osThreadCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a28      	ldr	r2, [pc, #160]	@ (80006c4 <MX_FREERTOS_Init+0xe4>)
 8000622:	6013      	str	r3, [r2, #0]

	/* definition and creation of myButtonTask */
	osThreadDef(myButtonTask, StartButtonTask, osPriorityNormal, 0, 128);
 8000624:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_FREERTOS_Init+0xe8>)
 8000626:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myButtonTaskHandle = osThreadCreate(osThread(myButtonTask), NULL);
 8000638:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fa2d 	bl	8003a9e <osThreadCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <MX_FREERTOS_Init+0xec>)
 8000648:	6013      	str	r3, [r2, #0]

	/* definition and creation of myLedTask */
	osThreadDef(myLedTask, StartLedTask, osPriorityNormal, 0, 128);
 800064a:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <MX_FREERTOS_Init+0xf0>)
 800064c:	f107 041c 	add.w	r4, r7, #28
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myLedTaskHandle = osThreadCreate(osThread(myLedTask), NULL);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f003 fa1a 	bl	8003a9e <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <MX_FREERTOS_Init+0xf4>)
 800066e:	6013      	str	r3, [r2, #0]

	/* definition and creation of myFNDTask */
	osThreadDef(myFNDTask, StartFNDTask, osPriorityNormal, 0, 128);
 8000670:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_FREERTOS_Init+0xf8>)
 8000672:	463c      	mov	r4, r7
 8000674:	461d      	mov	r5, r3
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myFNDTaskHandle = osThreadCreate(osThread(myFNDTask), NULL);
 8000682:	463b      	mov	r3, r7
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fa09 	bl	8003a9e <osThreadCreate>
 800068c:	4603      	mov	r3, r0
 800068e:	4a13      	ldr	r2, [pc, #76]	@ (80006dc <MX_FREERTOS_Init+0xfc>)
 8000690:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	btnMail = osMailCreate(osMailQ(btnMail), NULL);
 8000692:	2100      	movs	r1, #0
 8000694:	4812      	ldr	r0, [pc, #72]	@ (80006e0 <MX_FREERTOS_Init+0x100>)
 8000696:	f003 fbff 	bl	8003e98 <osMailCreate>
 800069a:	4603      	mov	r3, r0
 800069c:	4a11      	ldr	r2, [pc, #68]	@ (80006e4 <MX_FREERTOS_Init+0x104>)
 800069e:	6013      	str	r3, [r2, #0]
	fndMail = osMailCreate(osMailQ(fndMail), NULL);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4811      	ldr	r0, [pc, #68]	@ (80006e8 <MX_FREERTOS_Init+0x108>)
 80006a4:	f003 fbf8 	bl	8003e98 <osMailCreate>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <MX_FREERTOS_Init+0x10c>)
 80006ac:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */
	HAL_TIM_Base_Start_IT(&htim2);
 80006ae:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <MX_FREERTOS_Init+0x110>)
 80006b0:	f002 fde0 	bl	8003274 <HAL_TIM_Base_Start_IT>
}
 80006b4:	bf00      	nop
 80006b6:	3778      	adds	r7, #120	@ 0x78
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bdb0      	pop	{r4, r5, r7, pc}
 80006bc:	2000012c 	.word	0x2000012c
 80006c0:	08007418 	.word	0x08007418
 80006c4:	2000011c 	.word	0x2000011c
 80006c8:	08007444 	.word	0x08007444
 80006cc:	20000120 	.word	0x20000120
 80006d0:	0800746c 	.word	0x0800746c
 80006d4:	20000124 	.word	0x20000124
 80006d8:	08007494 	.word	0x08007494
 80006dc:	20000128 	.word	0x20000128
 80006e0:	080074fc 	.word	0x080074fc
 80006e4:	20000134 	.word	0x20000134
 80006e8:	08007508 	.word	0x08007508
 80006ec:	2000013c 	.word	0x2000013c
 80006f0:	20000480 	.word	0x20000480

080006f4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f003 fa1a 	bl	8003b36 <osDelay>
 8000702:	e7fb      	b.n	80006fc <StartDefaultTask+0x8>

08000704 <StartButtonTask>:
 * @brief Function implementing the myButtonTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const *argument) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	@ 0x38
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartButtonTask */
	Button_Init(&hBtnLed1, GPIOB, GPIO_PIN_5);
 800070c:	2220      	movs	r2, #32
 800070e:	4970      	ldr	r1, [pc, #448]	@ (80008d0 <StartButtonTask+0x1cc>)
 8000710:	4870      	ldr	r0, [pc, #448]	@ (80008d4 <StartButtonTask+0x1d0>)
 8000712:	f000 fd72 	bl	80011fa <Button_Init>
	Button_Init(&hBtnLed2, GPIOB, GPIO_PIN_3);
 8000716:	2208      	movs	r2, #8
 8000718:	496d      	ldr	r1, [pc, #436]	@ (80008d0 <StartButtonTask+0x1cc>)
 800071a:	486f      	ldr	r0, [pc, #444]	@ (80008d8 <StartButtonTask+0x1d4>)
 800071c:	f000 fd6d 	bl	80011fa <Button_Init>
	Button_Init(&hBtnLed3, GPIOB, GPIO_PIN_10);
 8000720:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000724:	496a      	ldr	r1, [pc, #424]	@ (80008d0 <StartButtonTask+0x1cc>)
 8000726:	486d      	ldr	r0, [pc, #436]	@ (80008dc <StartButtonTask+0x1d8>)
 8000728:	f000 fd67 	bl	80011fa <Button_Init>

	LCD_Init(&hi2c1);
 800072c:	486c      	ldr	r0, [pc, #432]	@ (80008e0 <StartButtonTask+0x1dc>)
 800072e:	f000 ff4d 	bl	80015cc <LCD_Init>
	//MyQue_Init(&qBtnLed, sizeof(btn_led_t));
	btn_led_t *btnData; // 이미 포인터로 선언을 해왔으니 상관 X
	btn_led_t *fndData;

	char str[30];
	uint32_t counter = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	637b      	str	r3, [r7, #52]	@ 0x34

	/* Infinite loop */

	for (;;) {
		if (Button_GetState(&hBtnLed1) == ACT_RELEASED) {
 8000736:	4867      	ldr	r0, [pc, #412]	@ (80008d4 <StartButtonTask+0x1d0>)
 8000738:	f000 fd75 	bl	8001226 <Button_GetState>
 800073c:	4603      	mov	r3, r0
 800073e:	2b02      	cmp	r3, #2
 8000740:	d133      	bne.n	80007aa <StartButtonTask+0xa6>
			btnData = osMailAlloc(btnMail, osWaitForever);
 8000742:	4b68      	ldr	r3, [pc, #416]	@ (80008e4 <StartButtonTask+0x1e0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f04f 31ff 	mov.w	r1, #4294967295
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fbfc 	bl	8003f48 <osMailAlloc>
 8000750:	6338      	str	r0, [r7, #48]	@ 0x30
			fndData = osMailAlloc(fndMail, osWaitForever);
 8000752:	4b65      	ldr	r3, [pc, #404]	@ (80008e8 <StartButtonTask+0x1e4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f04f 31ff 	mov.w	r1, #4294967295
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fbf4 	bl	8003f48 <osMailAlloc>
 8000760:	62f8      	str	r0, [r7, #44]	@ 0x2c
			btnData->id = BTN_LED1;
 8000762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
			fndData->id = RUN;
 8000768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
			osMailPut(btnMail, btnData);
 800076e:	4b5d      	ldr	r3, [pc, #372]	@ (80008e4 <StartButtonTask+0x1e0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fbfd 	bl	8003f74 <osMailPut>
			osMailPut(fndMail, fndData);
 800077a:	4b5b      	ldr	r3, [pc, #364]	@ (80008e8 <StartButtonTask+0x1e4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fbf7 	bl	8003f74 <osMailPut>
			//MyenQue(&qBtnLed, &btnData);

			osMutexWait(LcdMutexHandle, osWaitForever);
 8000786:	4b59      	ldr	r3, [pc, #356]	@ (80008ec <StartButtonTask+0x1e8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f04f 31ff 	mov.w	r1, #4294967295
 800078e:	4618      	mov	r0, r3
 8000790:	f003 f9fe 	bl	8003b90 <osMutexWait>
			LCD_writeStringXY(0, 0, "BTN1");
 8000794:	4a56      	ldr	r2, [pc, #344]	@ (80008f0 <StartButtonTask+0x1ec>)
 8000796:	2100      	movs	r1, #0
 8000798:	2000      	movs	r0, #0
 800079a:	f001 f866 	bl	800186a <LCD_writeStringXY>
			osMutexRelease(LcdMutexHandle);
 800079e:	4b53      	ldr	r3, [pc, #332]	@ (80008ec <StartButtonTask+0x1e8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fa42 	bl	8003c2c <osMutexRelease>
 80007a8:	e072      	b.n	8000890 <StartButtonTask+0x18c>

		} else if (Button_GetState(&hBtnLed2) == ACT_RELEASED) {
 80007aa:	484b      	ldr	r0, [pc, #300]	@ (80008d8 <StartButtonTask+0x1d4>)
 80007ac:	f000 fd3b 	bl	8001226 <Button_GetState>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d133      	bne.n	800081e <StartButtonTask+0x11a>
			btnData = osMailAlloc(btnMail, osWaitForever);
 80007b6:	4b4b      	ldr	r3, [pc, #300]	@ (80008e4 <StartButtonTask+0x1e0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f04f 31ff 	mov.w	r1, #4294967295
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fbc2 	bl	8003f48 <osMailAlloc>
 80007c4:	6338      	str	r0, [r7, #48]	@ 0x30
			fndData = osMailAlloc(fndMail, osWaitForever);
 80007c6:	4b48      	ldr	r3, [pc, #288]	@ (80008e8 <StartButtonTask+0x1e4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f04f 31ff 	mov.w	r1, #4294967295
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fbba 	bl	8003f48 <osMailAlloc>
 80007d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
			btnData->id = BTN_LED2;
 80007d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
			fndData->id = STOP;
 80007dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007de:	2201      	movs	r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
			osMailPut(btnMail, btnData);
 80007e2:	4b40      	ldr	r3, [pc, #256]	@ (80008e4 <StartButtonTask+0x1e0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fbc3 	bl	8003f74 <osMailPut>
			osMailPut(fndMail, fndData);
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <StartButtonTask+0x1e4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 fbbd 	bl	8003f74 <osMailPut>
			//			MyenQue(&qBtnLed, &btnData);

			osMutexWait(LcdMutexHandle, osWaitForever);
 80007fa:	4b3c      	ldr	r3, [pc, #240]	@ (80008ec <StartButtonTask+0x1e8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f04f 31ff 	mov.w	r1, #4294967295
 8000802:	4618      	mov	r0, r3
 8000804:	f003 f9c4 	bl	8003b90 <osMutexWait>
			LCD_writeStringXY(0, 0, "BTN2");
 8000808:	4a3a      	ldr	r2, [pc, #232]	@ (80008f4 <StartButtonTask+0x1f0>)
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f001 f82c 	bl	800186a <LCD_writeStringXY>
			osMutexRelease(LcdMutexHandle);
 8000812:	4b36      	ldr	r3, [pc, #216]	@ (80008ec <StartButtonTask+0x1e8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fa08 	bl	8003c2c <osMutexRelease>
 800081c:	e038      	b.n	8000890 <StartButtonTask+0x18c>

		} else if (Button_GetState(&hBtnLed3) == ACT_RELEASED) {
 800081e:	482f      	ldr	r0, [pc, #188]	@ (80008dc <StartButtonTask+0x1d8>)
 8000820:	f000 fd01 	bl	8001226 <Button_GetState>
 8000824:	4603      	mov	r3, r0
 8000826:	2b02      	cmp	r3, #2
 8000828:	d132      	bne.n	8000890 <StartButtonTask+0x18c>
			btnData = osMailAlloc(btnMail, osWaitForever);
 800082a:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <StartButtonTask+0x1e0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f04f 31ff 	mov.w	r1, #4294967295
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fb88 	bl	8003f48 <osMailAlloc>
 8000838:	6338      	str	r0, [r7, #48]	@ 0x30
			fndData = osMailAlloc(fndMail, osWaitForever);
 800083a:	4b2b      	ldr	r3, [pc, #172]	@ (80008e8 <StartButtonTask+0x1e4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f04f 31ff 	mov.w	r1, #4294967295
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fb80 	bl	8003f48 <osMailAlloc>
 8000848:	62f8      	str	r0, [r7, #44]	@ 0x2c
			btnData->id = BTN_LED3;
 800084a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800084c:	2202      	movs	r2, #2
 800084e:	601a      	str	r2, [r3, #0]
			fndData->id = CLEAR;
 8000850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000852:	2202      	movs	r2, #2
 8000854:	601a      	str	r2, [r3, #0]
			osMailPut(btnMail, btnData);
 8000856:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <StartButtonTask+0x1e0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800085c:	4618      	mov	r0, r3
 800085e:	f003 fb89 	bl	8003f74 <osMailPut>
			osMailPut(fndMail, fndData);
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <StartButtonTask+0x1e4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fb83 	bl	8003f74 <osMailPut>
			//			MyenQue(&qBtnLed, &btnData);

			osMutexWait(LcdMutexHandle, osWaitForever);
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <StartButtonTask+0x1e8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f04f 31ff 	mov.w	r1, #4294967295
 8000876:	4618      	mov	r0, r3
 8000878:	f003 f98a 	bl	8003b90 <osMutexWait>
			LCD_writeStringXY(0, 0, "BTN3");
 800087c:	4a1e      	ldr	r2, [pc, #120]	@ (80008f8 <StartButtonTask+0x1f4>)
 800087e:	2100      	movs	r1, #0
 8000880:	2000      	movs	r0, #0
 8000882:	f000 fff2 	bl	800186a <LCD_writeStringXY>
			osMutexRelease(LcdMutexHandle);
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <StartButtonTask+0x1e8>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f003 f9ce 	bl	8003c2c <osMutexRelease>
		}
		sprintf(str, ":cnt%u", (unsigned int) counter++);
 8000890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	637a      	str	r2, [r7, #52]	@ 0x34
 8000896:	f107 000c 	add.w	r0, r7, #12
 800089a:	461a      	mov	r2, r3
 800089c:	4917      	ldr	r1, [pc, #92]	@ (80008fc <StartButtonTask+0x1f8>)
 800089e:	f006 f959 	bl	8006b54 <siprintf>
		osMutexWait(LcdMutexHandle, osWaitForever);
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <StartButtonTask+0x1e8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f04f 31ff 	mov.w	r1, #4294967295
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 f970 	bl	8003b90 <osMutexWait>
		LCD_writeStringXY(0, 5, str);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	461a      	mov	r2, r3
 80008b6:	2105      	movs	r1, #5
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 ffd6 	bl	800186a <LCD_writeStringXY>
		osMutexRelease(LcdMutexHandle);
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <StartButtonTask+0x1e8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 f9b2 	bl	8003c2c <osMutexRelease>
		osDelay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f003 f934 	bl	8003b36 <osDelay>
		if (Button_GetState(&hBtnLed1) == ACT_RELEASED) {
 80008ce:	e732      	b.n	8000736 <StartButtonTask+0x32>
 80008d0:	40020400 	.word	0x40020400
 80008d4:	200004c8 	.word	0x200004c8
 80008d8:	200004d4 	.word	0x200004d4
 80008dc:	200004e0 	.word	0x200004e0
 80008e0:	200003e0 	.word	0x200003e0
 80008e4:	20000134 	.word	0x20000134
 80008e8:	2000013c 	.word	0x2000013c
 80008ec:	2000012c 	.word	0x2000012c
 80008f0:	080074b0 	.word	0x080074b0
 80008f4:	080074b8 	.word	0x080074b8
 80008f8:	080074c0 	.word	0x080074c0
 80008fc:	080074c8 	.word	0x080074c8

08000900 <StartLedTask>:
 * @brief Function implementing the myLedTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const *argument) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b092      	sub	sp, #72	@ 0x48
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	btn_led_t *btnData;
	osEvent evt;

	uint8_t ledData = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t prevTime = 0, curTime = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	643b      	str	r3, [r7, #64]	@ 0x40
 8000912:	2300      	movs	r3, #0
 8000914:	63bb      	str	r3, [r7, #56]	@ 0x38
	char str[30];
	uint32_t counter = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	63fb      	str	r3, [r7, #60]	@ 0x3c

	for (;;) {
		curTime = HAL_GetTick();
 800091a:	f001 f82b 	bl	8001974 <HAL_GetTick>
 800091e:	63b8      	str	r0, [r7, #56]	@ 0x38
		if (curTime - prevTime >= 500) {
 8000920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800092a:	d30c      	bcc.n	8000946 <StartLedTask+0x46>
			prevTime = curTime;
 800092c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800092e:	643b      	str	r3, [r7, #64]	@ 0x40
			ledData ^= (1 << 0);
 8000930:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000934:	f083 0301 	eor.w	r3, r3, #1
 8000938:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			LedBar_Write(ledData);
 800093c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000940:	4618      	mov	r0, r3
 8000942:	f000 ffa7 	bl	8001894 <LedBar_Write>
		}
		evt = osMailGet(btnMail, 0);
 8000946:	4b4a      	ldr	r3, [pc, #296]	@ (8000a70 <StartLedTask+0x170>)
 8000948:	6819      	ldr	r1, [r3, #0]
 800094a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800094e:	2200      	movs	r2, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f003 fb4d 	bl	8003ff0 <osMailGet>
		if (evt.status == osEventMail) {
 8000956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000958:	2b20      	cmp	r3, #32
 800095a:	d169      	bne.n	8000a30 <StartLedTask+0x130>
			btnData = evt.value.p;
 800095c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800095e:	637b      	str	r3, [r7, #52]	@ 0x34
			if (btnData->id == BTN_LED1) {
 8000960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d11c      	bne.n	80009a2 <StartLedTask+0xa2>
				ledData ^= (1 << 1);
 8000968:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800096c:	f083 0302 	eor.w	r3, r3, #2
 8000970:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				LedBar_Write(ledData);
 8000974:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000978:	4618      	mov	r0, r3
 800097a:	f000 ff8b 	bl	8001894 <LedBar_Write>
				osMutexWait(LcdMutexHandle, osWaitForever);
 800097e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a74 <StartLedTask+0x174>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f04f 31ff 	mov.w	r1, #4294967295
 8000986:	4618      	mov	r0, r3
 8000988:	f003 f902 	bl	8003b90 <osMutexWait>
				LCD_writeStringXY(1, 0, "LED1");
 800098c:	4a3a      	ldr	r2, [pc, #232]	@ (8000a78 <StartLedTask+0x178>)
 800098e:	2100      	movs	r1, #0
 8000990:	2001      	movs	r0, #1
 8000992:	f000 ff6a 	bl	800186a <LCD_writeStringXY>
				osMutexRelease(LcdMutexHandle);
 8000996:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <StartLedTask+0x174>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f003 f946 	bl	8003c2c <osMutexRelease>
 80009a0:	e040      	b.n	8000a24 <StartLedTask+0x124>
			} else if (btnData->id == BTN_LED2) {
 80009a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d11c      	bne.n	80009e4 <StartLedTask+0xe4>
				ledData ^= (1 << 2);
 80009aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80009ae:	f083 0304 	eor.w	r3, r3, #4
 80009b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				LedBar_Write(ledData);
 80009b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 ff6a 	bl	8001894 <LedBar_Write>
				osMutexWait(LcdMutexHandle, osWaitForever);
 80009c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <StartLedTask+0x174>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 f8e1 	bl	8003b90 <osMutexWait>
				LCD_writeStringXY(1, 0, "LED2");
 80009ce:	4a2b      	ldr	r2, [pc, #172]	@ (8000a7c <StartLedTask+0x17c>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 ff49 	bl	800186a <LCD_writeStringXY>
				osMutexRelease(LcdMutexHandle);
 80009d8:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <StartLedTask+0x174>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 f925 	bl	8003c2c <osMutexRelease>
 80009e2:	e01f      	b.n	8000a24 <StartLedTask+0x124>
			} else if (btnData->id == BTN_LED3) {
 80009e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d11b      	bne.n	8000a24 <StartLedTask+0x124>
				ledData ^= (1 << 3);
 80009ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80009f0:	f083 0308 	eor.w	r3, r3, #8
 80009f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				LedBar_Write(ledData);
 80009f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 ff49 	bl	8001894 <LedBar_Write>
				osMutexWait(LcdMutexHandle, osWaitForever);
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <StartLedTask+0x174>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 f8c0 	bl	8003b90 <osMutexWait>
				LCD_writeStringXY(1, 0, "LED3");
 8000a10:	4a1b      	ldr	r2, [pc, #108]	@ (8000a80 <StartLedTask+0x180>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 ff28 	bl	800186a <LCD_writeStringXY>
				osMutexRelease(LcdMutexHandle);
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <StartLedTask+0x174>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 f904 	bl	8003c2c <osMutexRelease>
			}
			osMailFree(btnMail, btnData);
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <StartLedTask+0x170>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 fb54 	bl	80040d8 <osMailFree>
		}
		sprintf(str, ":cnt%u", (unsigned int) counter++);
 8000a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000a36:	f107 0008 	add.w	r0, r7, #8
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4911      	ldr	r1, [pc, #68]	@ (8000a84 <StartLedTask+0x184>)
 8000a3e:	f006 f889 	bl	8006b54 <siprintf>
		osMutexWait(LcdMutexHandle, osWaitForever);
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <StartLedTask+0x174>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 f8a0 	bl	8003b90 <osMutexWait>
		LCD_writeStringXY(1, 5, str);
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	461a      	mov	r2, r3
 8000a56:	2105      	movs	r1, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 ff06 	bl	800186a <LCD_writeStringXY>
		osMutexRelease(LcdMutexHandle);
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <StartLedTask+0x174>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 f8e2 	bl	8003c2c <osMutexRelease>
		osDelay(10);
 8000a68:	200a      	movs	r0, #10
 8000a6a:	f003 f864 	bl	8003b36 <osDelay>
		curTime = HAL_GetTick();
 8000a6e:	e754      	b.n	800091a <StartLedTask+0x1a>
 8000a70:	20000134 	.word	0x20000134
 8000a74:	2000012c 	.word	0x2000012c
 8000a78:	080074d0 	.word	0x080074d0
 8000a7c:	080074d8 	.word	0x080074d8
 8000a80:	080074e0 	.word	0x080074e0
 8000a84:	080074c8 	.word	0x080074c8

08000a88 <StartFNDTask>:
 * @brief Function implementing the myFNDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartFNDTask */
void StartFNDTask(void const *argument) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartFNDTask */
	/* Infinite loop */

	btn_led_t *fndData;
	osEvent evt;
	int run = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]

	int counter = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
	for (;;) {
		evt = osMailGet(fndMail, 0);
 8000a98:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <StartFNDTask+0x9c>)
 8000a9a:	6819      	ldr	r1, [r3, #0]
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 faa4 	bl	8003ff0 <osMailGet>
		if (evt.status == osEventMail) {
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	2b20      	cmp	r3, #32
 8000aac:	d11e      	bne.n	8000aec <StartFNDTask+0x64>
			fndData = evt.value.p;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	617b      	str	r3, [r7, #20]
			if (fndData->id == RUN) {
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <StartFNDTask+0x38>
				run = 1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61fb      	str	r3, [r7, #28]
 8000abe:	e00f      	b.n	8000ae0 <StartFNDTask+0x58>
			} else if (fndData->id == STOP) {
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d102      	bne.n	8000ace <StartFNDTask+0x46>
				run = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	e008      	b.n	8000ae0 <StartFNDTask+0x58>
			} else if (fndData->id == CLEAR) {
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d104      	bne.n	8000ae0 <StartFNDTask+0x58>
				if(!run) counter = 0;
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d101      	bne.n	8000ae0 <StartFNDTask+0x58>
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
			}
			osMailFree(fndMail, fndData);
 8000ae0:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <StartFNDTask+0x9c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6979      	ldr	r1, [r7, #20]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 faf6 	bl	80040d8 <osMailFree>
		}
		if(run){
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00f      	beq.n	8000b12 <StartFNDTask+0x8a>
			counter++;
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	3301      	adds	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
			counter%= 10000;
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <StartFNDTask+0xa0>)
 8000afc:	fb82 1203 	smull	r1, r2, r2, r3
 8000b00:	1311      	asrs	r1, r2, #12
 8000b02:	17da      	asrs	r2, r3, #31
 8000b04:	1a8a      	subs	r2, r1, r2
 8000b06:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000b0a:	fb01 f202 	mul.w	r2, r1, r2
 8000b0e:	1a9b      	subs	r3, r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
		}
		FND_WriteData(counter);
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fbb6 	bl	8001288 <FND_WriteData>
		osDelay(10);
 8000b1c:	200a      	movs	r0, #10
 8000b1e:	f003 f80a 	bl	8003b36 <osDelay>
		evt = osMailGet(fndMail, 0);
 8000b22:	e7b9      	b.n	8000a98 <StartFNDTask+0x10>
 8000b24:	2000013c 	.word	0x2000013c
 8000b28:	68db8bad 	.word	0x68db8bad

08000b2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	@ 0x28
 8000b30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b49      	ldr	r3, [pc, #292]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a48      	ldr	r2, [pc, #288]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b46      	ldr	r3, [pc, #280]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b42      	ldr	r3, [pc, #264]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a41      	ldr	r2, [pc, #260]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a3a      	ldr	r2, [pc, #232]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b38      	ldr	r3, [pc, #224]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b34      	ldr	r3, [pc, #208]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a33      	ldr	r2, [pc, #204]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b31      	ldr	r3, [pc, #196]	@ (8000c6c <MX_GPIO_Init+0x140>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f240 117f 	movw	r1, #383	@ 0x17f
 8000bb8:	482d      	ldr	r0, [pc, #180]	@ (8000c70 <MX_GPIO_Init+0x144>)
 8000bba:	f001 f989 	bl	8001ed0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f641 0113 	movw	r1, #6163	@ 0x1813
 8000bc4:	482b      	ldr	r0, [pc, #172]	@ (8000c74 <MX_GPIO_Init+0x148>)
 8000bc6:	f001 f983 	bl	8001ed0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f24f 0107 	movw	r1, #61447	@ 0xf007
 8000bd0:	4829      	ldr	r0, [pc, #164]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000bd2:	f001 f97d 	bl	8001ed0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bd6:	f240 137f 	movw	r3, #383	@ 0x17f
 8000bda:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4820      	ldr	r0, [pc, #128]	@ (8000c70 <MX_GPIO_Init+0x144>)
 8000bf0:	f000 ffd2 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000bf4:	f641 0313 	movw	r3, #6163	@ 0x1813
 8000bf8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4819      	ldr	r0, [pc, #100]	@ (8000c74 <MX_GPIO_Init+0x148>)
 8000c0e:	f000 ffc3 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8000c12:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4813      	ldr	r0, [pc, #76]	@ (8000c74 <MX_GPIO_Init+0x148>)
 8000c28:	f000 ffb6 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000c2c:	f24f 0307 	movw	r3, #61447	@ 0xf007
 8000c30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000c46:	f000 ffa7 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000c4a:	2328      	movs	r3, #40	@ 0x28
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000c5e:	f000 ff9b 	bl	8001b98 <HAL_GPIO_Init>

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40020400 	.word	0x40020400

08000c7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c82:	4a13      	ldr	r2, [pc, #76]	@ (8000cd0 <MX_I2C1_Init+0x54>)
 8000c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c88:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <MX_I2C1_Init+0x58>)
 8000c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000cba:	f001 f923 	bl	8001f04 <HAL_I2C_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc4:	f000 f8e2 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200003e0 	.word	0x200003e0
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	000186a0 	.word	0x000186a0

08000cd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	@ (8000d5c <HAL_I2C_MspInit+0x84>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d12c      	bne.n	8000d54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a17      	ldr	r2, [pc, #92]	@ (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1c:	2312      	movs	r3, #18
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <HAL_I2C_MspInit+0x8c>)
 8000d34:	f000 ff30 	bl	8001b98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d40:	4a07      	ldr	r2, [pc, #28]	@ (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	@ 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020400 	.word	0x40020400

08000d68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d6c:	f000 fdcc 	bl	8001908 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d70:	f000 f80c 	bl	8000d8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d74:	f7ff feda 	bl	8000b2c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000d78:	f7ff ff80 	bl	8000c7c <MX_I2C1_Init>
	MX_TIM2_Init();
 8000d7c:	f000 f9a2 	bl	80010c4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000d80:	f7ff fc2e 	bl	80005e0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000d84:	f002 fe84 	bl	8003a90 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <main+0x20>

08000d8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	@ 0x50
 8000d90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	2230      	movs	r2, #48	@ 0x30
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f005 fefc 	bl	8006b98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <SystemClock_Config+0xc8>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	4a26      	ldr	r2, [pc, #152]	@ (8000e54 <SystemClock_Config+0xc8>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc0:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <SystemClock_Config+0xc8>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a20      	ldr	r2, [pc, #128]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000e00:	2364      	movs	r3, #100	@ 0x64
 8000e02:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fd15 	bl	8002840 <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x94>
		Error_Handler();
 8000e1c:	f000 f836 	bl	8000e8c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	2302      	movs	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e30:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 ff77 	bl	8002d30 <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xc0>
		Error_Handler();
 8000e48:	f000 f820 	bl	8000e8c <Error_Handler>
	}
}
 8000e4c:	bf00      	nop
 8000e4e:	3750      	adds	r7, #80	@ 0x50
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM11) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000e6e:	f000 fd6d 	bl	800194c <HAL_IncTick>
	}
	if (htim->Instance == TIM2) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e7a:	d101      	bne.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x24>
		FND_DispDataCallBack();
 8000e7c:	f000 fa14 	bl	80012a8 <FND_DispDataCallBack>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40014800 	.word	0x40014800

08000e8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <Error_Handler+0x8>

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_MspInit+0x54>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	4a11      	ldr	r2, [pc, #68]	@ (8000eec <HAL_MspInit+0x54>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <HAL_MspInit+0x54>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <HAL_MspInit+0x54>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <HAL_MspInit+0x54>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_MspInit+0x54>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	210f      	movs	r1, #15
 8000eda:	f06f 0001 	mvn.w	r0, #1
 8000ede:	f000 fe31 	bl	8001b44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <HAL_InitTick+0xd0>)
 8000f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f08:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc0 <HAL_InitTick+0xd0>)
 8000f0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <HAL_InitTick+0xd0>)
 8000f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f1c:	f107 020c 	add.w	r2, r7, #12
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 f922 	bl	8003170 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f2c:	f002 f90c 	bl	8003148 <HAL_RCC_GetPCLK2Freq>
 8000f30:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f34:	4a23      	ldr	r2, [pc, #140]	@ (8000fc4 <HAL_InitTick+0xd4>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	0c9b      	lsrs	r3, r3, #18
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000f40:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <HAL_InitTick+0xd8>)
 8000f42:	4a22      	ldr	r2, [pc, #136]	@ (8000fcc <HAL_InitTick+0xdc>)
 8000f44:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000f46:	4b20      	ldr	r3, [pc, #128]	@ (8000fc8 <HAL_InitTick+0xd8>)
 8000f48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f4c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc8 <HAL_InitTick+0xd8>)
 8000f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f52:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <HAL_InitTick+0xd8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <HAL_InitTick+0xd8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <HAL_InitTick+0xd8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000f66:	4818      	ldr	r0, [pc, #96]	@ (8000fc8 <HAL_InitTick+0xd8>)
 8000f68:	f002 f934 	bl	80031d4 <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d11b      	bne.n	8000fb2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000f7a:	4813      	ldr	r0, [pc, #76]	@ (8000fc8 <HAL_InitTick+0xd8>)
 8000f7c:	f002 f97a 	bl	8003274 <HAL_TIM_Base_Start_IT>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d111      	bne.n	8000fb2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f8e:	201a      	movs	r0, #26
 8000f90:	f000 fdf4 	bl	8001b7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	d808      	bhi.n	8000fac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	201a      	movs	r0, #26
 8000fa0:	f000 fdd0 	bl	8001b44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_InitTick+0xe0>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e002      	b.n	8000fb2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3730      	adds	r7, #48	@ 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	431bde83 	.word	0x431bde83
 8000fc8:	20000434 	.word	0x20000434
 8000fcc:	40014800 	.word	0x40014800
 8000fd0:	200000a4 	.word	0x200000a4

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <NMI_Handler+0x4>

08000fdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001012:	f002 f991 	bl	8003338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000434 	.word	0x20000434

08001020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <TIM2_IRQHandler+0x10>)
 8001026:	f002 f987 	bl	8003338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000480 	.word	0x20000480

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f005 fe0e 	bl	8006c84 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20020000 	.word	0x20020000
 8001094:	00000400 	.word	0x00000400
 8001098:	2000047c 	.word	0x2000047c
 800109c:	200043a0 	.word	0x200043a0

080010a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <MX_TIM2_Init+0x94>)
 80010e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <MX_TIM2_Init+0x94>)
 80010ea:	2263      	movs	r2, #99	@ 0x63
 80010ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <MX_TIM2_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80010f4:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <MX_TIM2_Init+0x94>)
 80010f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <MX_TIM2_Init+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_TIM2_Init+0x94>)
 8001104:	2280      	movs	r2, #128	@ 0x80
 8001106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001108:	4813      	ldr	r0, [pc, #76]	@ (8001158 <MX_TIM2_Init+0x94>)
 800110a:	f002 f863 	bl	80031d4 <HAL_TIM_Base_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001114:	f7ff feba 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4619      	mov	r1, r3
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <MX_TIM2_Init+0x94>)
 8001126:	f002 f9f7 	bl	8003518 <HAL_TIM_ConfigClockSource>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001130:	f7ff feac 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_TIM2_Init+0x94>)
 8001142:	f002 fbf9 	bl	8003938 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800114c:	f7ff fe9e 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000480 	.word	0x20000480

0800115c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800116c:	d115      	bne.n	800119a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_TIM_Base_MspInit+0x48>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	4a0b      	ldr	r2, [pc, #44]	@ (80011a4 <HAL_TIM_Base_MspInit+0x48>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6413      	str	r3, [r2, #64]	@ 0x40
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_TIM_Base_MspInit+0x48>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2105      	movs	r1, #5
 800118e:	201c      	movs	r0, #28
 8001190:	f000 fcd8 	bl	8001b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001194:	201c      	movs	r0, #28
 8001196:	f000 fcf1 	bl	8001b7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ac:	f7ff ff78 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	@ (80011f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f005 fd5b 	bl	8006c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff fdc5 	bl	8000d68 <main>
  bx  lr    
 80011de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80011ec:	08007570 	.word	0x08007570
  ldr r2, =_sbss
 80011f0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80011f4:	2000439c 	.word	0x2000439c

080011f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC_IRQHandler>

080011fa <Button_Init>:
Button_Handler_t hBtnLed2;
Button_Handler_t hBtnLed3;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b085      	sub	sp, #20
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	4613      	mov	r3, r2
 8001206:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	88fa      	ldrh	r2, [r7, #6]
 8001212:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2201      	movs	r2, #1
 8001218:	609a      	str	r2, [r3, #8]
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	889b      	ldrh	r3, [r3, #4]
 8001236:	4619      	mov	r1, r3
 8001238:	4610      	mov	r0, r2
 800123a:	f000 fe31 	bl	8001ea0 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10a      	bne.n	8001260 <Button_GetState+0x3a>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d107      	bne.n	8001260 <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 8001250:	2002      	movs	r0, #2
 8001252:	f000 fb9b 	bl	800198c <HAL_Delay>
		hbtn->prevState = PUSHED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 800125c:	2301      	movs	r3, #1
 800125e:	e00f      	b.n	8001280 <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10a      	bne.n	800127e <Button_GetState+0x58>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 800126e:	2002      	movs	r0, #2
 8001270:	f000 fb8c 	bl	800198c <HAL_Delay>
		hbtn->prevState = RELEASED;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 800127a:	2302      	movs	r3, #2
 800127c:	e000      	b.n	8001280 <Button_GetState+0x5a>
	}
	return NO_ACT;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <FND_WriteData>:
		fndDispDp &= ~dpData;
	}
}

void FND_WriteData(uint16_t data)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 8001292:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <FND_WriteData+0x1c>)
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	8013      	strh	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	200004ee 	.word	0x200004ee

080012a8 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDisNum
void FND_DispDataCallBack()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	static int digitPos = 0; // digit 자리 표현 변수
	// interrupt 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos + 1) % 8; // 0~3까지 출력 반복
 80012ac:	4b80      	ldr	r3, [pc, #512]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	425a      	negs	r2, r3
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	f002 0207 	and.w	r2, r2, #7
 80012bc:	bf58      	it	pl
 80012be:	4253      	negpl	r3, r2
 80012c0:	4a7b      	ldr	r2, [pc, #492]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 80012c2:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 80012c4:	4b7a      	ldr	r3, [pc, #488]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	f200 80ee 	bhi.w	80014aa <FND_DispDataCallBack+0x202>
 80012ce:	a201      	add	r2, pc, #4	@ (adr r2, 80012d4 <FND_DispDataCallBack+0x2c>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012f5 	.word	0x080012f5
 80012d8:	08001323 	.word	0x08001323
 80012dc:	0800135b 	.word	0x0800135b
 80012e0:	08001393 	.word	0x08001393
 80012e4:	080013cb 	.word	0x080013cb
 80012e8:	08001403 	.word	0x08001403
 80012ec:	0800143b 	.word	0x0800143b
 80012f0:	08001473 	.word	0x08001473
	{
	// 계속 켜져있으면 FND 켜져있을 때 데이터가 바뀌면서 잔상이 생긴다
	// -> FND를 끄고 데이터를 바꾸고 다시 킨다.
	case DIGIT_1:
		FND_DispOffALL();
 80012f4:	f000 f900 	bl	80014f8 <FND_DispOffALL>
		FND_DispDigit(fndDispNum%10);
 80012f8:	4b6e      	ldr	r3, [pc, #440]	@ (80014b4 <FND_DispDataCallBack+0x20c>)
 80012fa:	881a      	ldrh	r2, [r3, #0]
 80012fc:	4b6e      	ldr	r3, [pc, #440]	@ (80014b8 <FND_DispDataCallBack+0x210>)
 80012fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001302:	08d9      	lsrs	r1, r3, #3
 8001304:	460b      	mov	r3, r1
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f913 	bl	800153c <FND_DispDigit>
		FND_DispOn(digitPos);
 8001316:	4b66      	ldr	r3, [pc, #408]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f8d4 	bl	80014c8 <FND_DispOn>
		break;
 8001320:	e0c3      	b.n	80014aa <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffALL();
 8001322:	f000 f8e9 	bl	80014f8 <FND_DispOffALL>
		FND_DispDigit((fndDispNum/10)%10);
 8001326:	4b63      	ldr	r3, [pc, #396]	@ (80014b4 <FND_DispDataCallBack+0x20c>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	4a63      	ldr	r2, [pc, #396]	@ (80014b8 <FND_DispDataCallBack+0x210>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	08db      	lsrs	r3, r3, #3
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b60      	ldr	r3, [pc, #384]	@ (80014b8 <FND_DispDataCallBack+0x210>)
 8001336:	fba3 1302 	umull	r1, r3, r3, r2
 800133a:	08d9      	lsrs	r1, r3, #3
 800133c:	460b      	mov	r3, r1
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f8f7 	bl	800153c <FND_DispDigit>
		FND_DispOn(digitPos);
 800134e:	4b58      	ldr	r3, [pc, #352]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f8b8 	bl	80014c8 <FND_DispOn>
		break;
 8001358:	e0a7      	b.n	80014aa <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffALL();
 800135a:	f000 f8cd 	bl	80014f8 <FND_DispOffALL>
		FND_DispDigit((fndDispNum /100)%10);
 800135e:	4b55      	ldr	r3, [pc, #340]	@ (80014b4 <FND_DispDataCallBack+0x20c>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	4a56      	ldr	r2, [pc, #344]	@ (80014bc <FND_DispDataCallBack+0x214>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	095b      	lsrs	r3, r3, #5
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b52      	ldr	r3, [pc, #328]	@ (80014b8 <FND_DispDataCallBack+0x210>)
 800136e:	fba3 1302 	umull	r1, r3, r3, r2
 8001372:	08d9      	lsrs	r1, r3, #3
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	b29b      	uxth	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f8db 	bl	800153c <FND_DispDigit>
		FND_DispOn(digitPos);
 8001386:	4b4a      	ldr	r3, [pc, #296]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f89c 	bl	80014c8 <FND_DispOn>
		break;
 8001390:	e08b      	b.n	80014aa <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffALL();
 8001392:	f000 f8b1 	bl	80014f8 <FND_DispOffALL>
		FND_DispDigit((fndDispNum/1000)%10);
 8001396:	4b47      	ldr	r3, [pc, #284]	@ (80014b4 <FND_DispDataCallBack+0x20c>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	4a49      	ldr	r2, [pc, #292]	@ (80014c0 <FND_DispDataCallBack+0x218>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b44      	ldr	r3, [pc, #272]	@ (80014b8 <FND_DispDataCallBack+0x210>)
 80013a6:	fba3 1302 	umull	r1, r3, r3, r2
 80013aa:	08d9      	lsrs	r1, r3, #3
 80013ac:	460b      	mov	r3, r1
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f8bf 	bl	800153c <FND_DispDigit>
		FND_DispOn(digitPos);
 80013be:	4b3c      	ldr	r3, [pc, #240]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f880 	bl	80014c8 <FND_DispOn>
		break;
 80013c8:	e06f      	b.n	80014aa <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		FND_DispOffALL();
 80013ca:	f000 f895 	bl	80014f8 <FND_DispOffALL>
		if (fndDispDp & (1<<0)) {
 80013ce:	4b3d      	ldr	r3, [pc, #244]	@ (80014c4 <FND_DispDataCallBack+0x21c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 80013da:	200a      	movs	r0, #10
 80013dc:	f000 f8ae 	bl	800153c <FND_DispDigit>
 80013e0:	e002      	b.n	80013e8 <FND_DispDataCallBack+0x140>
		}else {
			FND_DispDigit(11);
 80013e2:	200b      	movs	r0, #11
 80013e4:	f000 f8aa 	bl	800153c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80013e8:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	425a      	negs	r2, r3
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	bf58      	it	pl
 80013f8:	4253      	negpl	r3, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f864 	bl	80014c8 <FND_DispOn>
		break;
 8001400:	e053      	b.n	80014aa <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		FND_DispOffALL();
 8001402:	f000 f879 	bl	80014f8 <FND_DispOffALL>
		if (fndDispDp & (1<<1)) {
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <FND_DispDataCallBack+0x21c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <FND_DispDataCallBack+0x172>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 8001412:	200a      	movs	r0, #10
 8001414:	f000 f892 	bl	800153c <FND_DispDigit>
 8001418:	e002      	b.n	8001420 <FND_DispDataCallBack+0x178>
		}else {
			FND_DispDigit(11);
 800141a:	200b      	movs	r0, #11
 800141c:	f000 f88e 	bl	800153c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001420:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	425a      	negs	r2, r3
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	bf58      	it	pl
 8001430:	4253      	negpl	r3, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f848 	bl	80014c8 <FND_DispOn>
		break;
 8001438:	e037      	b.n	80014aa <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		FND_DispOffALL();
 800143a:	f000 f85d 	bl	80014f8 <FND_DispOffALL>
		if (fndDispDp & (1<<2)) {
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <FND_DispDataCallBack+0x21c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 800144a:	200a      	movs	r0, #10
 800144c:	f000 f876 	bl	800153c <FND_DispDigit>
 8001450:	e002      	b.n	8001458 <FND_DispDataCallBack+0x1b0>
		}else {
			FND_DispDigit(11);
 8001452:	200b      	movs	r0, #11
 8001454:	f000 f872 	bl	800153c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	425a      	negs	r2, r3
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	f002 0203 	and.w	r2, r2, #3
 8001466:	bf58      	it	pl
 8001468:	4253      	negpl	r3, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f82c 	bl	80014c8 <FND_DispOn>
		break;
 8001470:	e01b      	b.n	80014aa <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		FND_DispOffALL();
 8001472:	f000 f841 	bl	80014f8 <FND_DispOffALL>
		if (fndDispDp & (1<<3)) {
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <FND_DispDataCallBack+0x21c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 8001482:	200a      	movs	r0, #10
 8001484:	f000 f85a 	bl	800153c <FND_DispDigit>
 8001488:	e002      	b.n	8001490 <FND_DispDataCallBack+0x1e8>
		}else {
			FND_DispDigit(11);
 800148a:	200b      	movs	r0, #11
 800148c:	f000 f856 	bl	800153c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <FND_DispDataCallBack+0x208>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	425a      	negs	r2, r3
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	f002 0203 	and.w	r2, r2, #3
 800149e:	bf58      	it	pl
 80014a0:	4253      	negpl	r3, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f810 	bl	80014c8 <FND_DispOn>
		break;
 80014a8:	bf00      	nop
	}
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200004f0 	.word	0x200004f0
 80014b4:	200004ee 	.word	0x200004ee
 80014b8:	cccccccd 	.word	0xcccccccd
 80014bc:	51eb851f 	.word	0x51eb851f
 80014c0:	10624dd3 	.word	0x10624dd3
 80014c4:	200004ec 	.word	0x200004ec

080014c8 <FND_DispOn>:
//   // GPIO_WritePin(GPIOx, PiNum, SET); - Cathode type(Anode type은 반대)
//   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
//}

void FND_DispOn(int fndPos)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	// GPIO_WritePin(GPIOx, PiNum, RESET); - Cathode type(Anode type은 반대)
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 80014d0:	4a08      	ldr	r2, [pc, #32]	@ (80014f4 <FND_DispOn+0x2c>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80014d8:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <FND_DispOn+0x2c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	f000 fcf2 	bl	8001ed0 <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000004 	.word	0x20000004

080014f8 <FND_DispOffALL>:

void FND_DispOffALL()
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
	for(int i=0; i<4; i++){
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	e010      	b.n	8001526 <FND_DispOffALL+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, RESET);
 8001504:	4a0c      	ldr	r2, [pc, #48]	@ (8001538 <FND_DispOffALL+0x40>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800150c:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <FND_DispOffALL+0x40>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	b29b      	uxth	r3, r3
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	f000 fcd8 	bl	8001ed0 <HAL_GPIO_WritePin>
	for(int i=0; i<4; i++){
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3301      	adds	r3, #1
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b03      	cmp	r3, #3
 800152a:	ddeb      	ble.n	8001504 <FND_DispOffALL+0xc>
	}
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000004 	.word	0x20000004

0800153c <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 8001546:	4a1f      	ldr	r2, [pc, #124]	@ (80015c4 <FND_DispDigit+0x88>)
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	ca07      	ldmia	r2, {r0, r1, r2}
 800154e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x7F, // 8
			0x6F,  // 9
			0x80, //dp => 10000000
			0x00 // dp => 00000000
	};
	for(int i=0; i<8; i++){
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e02c      	b.n	80015b2 <FND_DispDigit+0x76>
		if(!(segFont[digit] & (1<<i))){
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	3318      	adds	r3, #24
 800155c:	443b      	add	r3, r7
 800155e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001562:	461a      	mov	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa42 f303 	asr.w	r3, r2, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10e      	bne.n	8001590 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);    // data = 0 -> offCathode type(Anode type은 반대)
 8001572:	4a15      	ldr	r2, [pc, #84]	@ (80015c8 <FND_DispDigit+0x8c>)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800157a:	4a13      	ldr	r2, [pc, #76]	@ (80015c8 <FND_DispDigit+0x8c>)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	b29b      	uxth	r3, r3
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	f000 fca1 	bl	8001ed0 <HAL_GPIO_WritePin>
 800158e:	e00d      	b.n	80015ac <FND_DispDigit+0x70>
		}
		else{
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);      // data = 1 -> onCathode type(Anode type은 반대)
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <FND_DispDigit+0x8c>)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001598:	4a0b      	ldr	r2, [pc, #44]	@ (80015c8 <FND_DispDigit+0x8c>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	f000 fc92 	bl	8001ed0 <HAL_GPIO_WritePin>
	for(int i=0; i<8; i++){
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	ddcf      	ble.n	8001558 <FND_DispDigit+0x1c>
		}
	}
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	080074e8 	.word	0x080074e8
 80015c8:	20000024 	.word	0x20000024

080015cc <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 80015d4:	4a18      	ldr	r2, [pc, #96]	@ (8001638 <LCD_Init+0x6c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 80015da:	2032      	movs	r0, #50	@ 0x32
 80015dc:	f000 f9d6 	bl	800198c <HAL_Delay>
	LCD_cmdMode();
 80015e0:	f000 f852 	bl	8001688 <LCD_cmdMode>
	LCD_writeMode();
 80015e4:	f000 f874 	bl	80016d0 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 80015e8:	2030      	movs	r0, #48	@ 0x30
 80015ea:	f000 f8a7 	bl	800173c <LCD_sendNibbleData>
	HAL_Delay(5);
 80015ee:	2005      	movs	r0, #5
 80015f0:	f000 f9cc 	bl	800198c <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80015f4:	2030      	movs	r0, #48	@ 0x30
 80015f6:	f000 f8a1 	bl	800173c <LCD_sendNibbleData>
	HAL_Delay(1);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f000 f9c6 	bl	800198c <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8001600:	2030      	movs	r0, #48	@ 0x30
 8001602:	f000 f89b 	bl	800173c <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8001606:	2020      	movs	r0, #32
 8001608:	f000 f898 	bl	800173c <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 800160c:	2028      	movs	r0, #40	@ 0x28
 800160e:	f000 f8b9 	bl	8001784 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8001612:	2008      	movs	r0, #8
 8001614:	f000 f8b6 	bl	8001784 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8001618:	2001      	movs	r0, #1
 800161a:	f000 f8b3 	bl	8001784 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 800161e:	2006      	movs	r0, #6
 8001620:	f000 f8b0 	bl	8001784 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8001624:	200c      	movs	r0, #12
 8001626:	f000 f8ad 	bl	8001784 <LCD_sendData>
	LCD_backLightOn();
 800162a:	f000 f81d 	bl	8001668 <LCD_backLightOn>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200004f8 	.word	0x200004f8

0800163c <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af02      	add	r7, sp, #8
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 1000);
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <LCD_sendI2C+0x28>)
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	1dfa      	adds	r2, r7, #7
 800164c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2301      	movs	r3, #1
 8001654:	214e      	movs	r1, #78	@ 0x4e
 8001656:	f000 fd99 	bl	800218c <HAL_I2C_Master_Transmit>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200004f8 	.word	0x200004f8

08001668 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <LCD_backLightOn+0x1c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <LCD_backLightOn+0x1c>)
 8001678:	701a      	strb	r2, [r3, #0]
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	200004f4 	.word	0x200004f4

08001688 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <LCD_cmdMode+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <LCD_cmdMode+0x20>)
 8001698:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800169a:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <LCD_cmdMode+0x20>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ffcc 	bl	800163c <LCD_sendI2C>
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200004f4 	.word	0x200004f4

080016ac <LCD_charMode>:

void LCD_charMode()
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <LCD_charMode+0x20>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <LCD_charMode+0x20>)
 80016bc:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80016be:	4b03      	ldr	r3, [pc, #12]	@ (80016cc <LCD_charMode+0x20>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ffba 	bl	800163c <LCD_sendI2C>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200004f4 	.word	0x200004f4

080016d0 <LCD_writeMode>:

void LCD_writeMode()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <LCD_writeMode+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	f023 0302 	bic.w	r3, r3, #2
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <LCD_writeMode+0x20>)
 80016e0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80016e2:	4b03      	ldr	r3, [pc, #12]	@ (80016f0 <LCD_writeMode+0x20>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ffa8 	bl	800163c <LCD_sendI2C>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200004f4 	.word	0x200004f4

080016f4 <LCD_E_High>:

void LCD_E_High()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <LCD_E_High+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <LCD_E_High+0x20>)
 8001704:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8001706:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <LCD_E_High+0x20>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff96 	bl	800163c <LCD_sendI2C>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200004f4 	.word	0x200004f4

08001718 <LCD_E_Low>:

void LCD_E_Low()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <LCD_E_Low+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <LCD_E_Low+0x20>)
 8001728:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800172a:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <LCD_E_Low+0x20>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff84 	bl	800163c <LCD_sendI2C>
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200004f4 	.word	0x200004f4

0800173c <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8001746:	f7ff ffd5 	bl	80016f4 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	f023 030f 	bic.w	r3, r3, #15
 8001752:	b25a      	sxtb	r2, r3
 8001754:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <LCD_sendNibbleData+0x44>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b25b      	sxtb	r3, r3
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	b25b      	sxtb	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b25b      	sxtb	r3, r3
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <LCD_sendNibbleData+0x44>)
 8001768:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <LCD_sendNibbleData+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff64 	bl	800163c <LCD_sendI2C>
	LCD_E_Low();
 8001774:	f7ff ffd0 	bl	8001718 <LCD_E_Low>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200004f4 	.word	0x200004f4

08001784 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ffd3 	bl	800173c <LCD_sendNibbleData>

	data = data << 4;
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ffcc 	bl	800173c <LCD_sendNibbleData>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 80017b6:	f7ff ff8b 	bl	80016d0 <LCD_writeMode>
	LCD_cmdMode();
 80017ba:	f7ff ff65 	bl	8001688 <LCD_cmdMode>
	LCD_sendData(data);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ffdf 	bl	8001784 <LCD_sendData>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 80017d8:	f7ff ff7a 	bl	80016d0 <LCD_writeMode>
	LCD_charMode();
 80017dc:	f7ff ff66 	bl	80016ac <LCD_charMode>
	LCD_sendData(data);
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ffce 	bl	8001784 <LCD_sendData>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <LCD_writeString>:

void LCD_writeString(char *str)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e009      	b.n	8001812 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ffe1 	bl	80017ce <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ef      	bne.n	80017fe <LCD_writeString+0xe>
	}
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	460a      	mov	r2, r1
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	4613      	mov	r3, r2
 8001836:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	019b      	lsls	r3, r3, #6
 800184c:	b2da      	uxtb	r2, r3
 800184e:	79bb      	ldrb	r3, [r7, #6]
 8001850:	4413      	add	r3, r2
 8001852:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	3b80      	subs	r3, #128	@ 0x80
 8001858:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800185a:	7bbb      	ldrb	r3, [r7, #14]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ffa5 	bl	80017ac <LCD_writeCmdData>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	603a      	str	r2, [r7, #0]
 8001874:	71fb      	strb	r3, [r7, #7]
 8001876:	460b      	mov	r3, r1
 8001878:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800187a:	79ba      	ldrb	r2, [r7, #6]
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ffd1 	bl	8001828 <LCD_gotoXY>
	LCD_writeString(str);
 8001886:	6838      	ldr	r0, [r7, #0]
 8001888:	f7ff ffb2 	bl	80017f0 <LCD_writeString>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <LedBar_Write>:
		{GPIOC, GPIO_PIN_2},
		{GPIOC, GPIO_PIN_3}
};

void LedBar_Write(uint8_t data)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++) {
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e027      	b.n	80018f4 <LedBar_Write+0x60>
		if ((data & (1<<i)) == 0) {
 80018a4:	79fa      	ldrb	r2, [r7, #7]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	fa42 f303 	asr.w	r3, r2, r3
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10e      	bne.n	80018d2 <LedBar_Write+0x3e>
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, RESET);
 80018b4:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <LedBar_Write+0x70>)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80018bc:	4a11      	ldr	r2, [pc, #68]	@ (8001904 <LedBar_Write+0x70>)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4413      	add	r3, r2
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	f000 fb00 	bl	8001ed0 <HAL_GPIO_WritePin>
 80018d0:	e00d      	b.n	80018ee <LedBar_Write+0x5a>
		}
		else {
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, SET);
 80018d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001904 <LedBar_Write+0x70>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <LedBar_Write+0x70>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2201      	movs	r2, #1
 80018e8:	4619      	mov	r1, r3
 80018ea:	f000 faf1 	bl	8001ed0 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	ddd4      	ble.n	80018a4 <LedBar_Write+0x10>
		}
	}
}
 80018fa:	bf00      	nop
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000064 	.word	0x20000064

08001908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800190c:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0d      	ldr	r2, [pc, #52]	@ (8001948 <HAL_Init+0x40>)
 8001912:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <HAL_Init+0x40>)
 800191e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	@ (8001948 <HAL_Init+0x40>)
 800192a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 f8fc 	bl	8001b2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	200f      	movs	r0, #15
 8001938:	f7ff fada 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff faac 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023c00 	.word	0x40023c00

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	200000a8 	.word	0x200000a8
 8001970:	200004fc 	.word	0x200004fc

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	200004fc 	.word	0x200004fc

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffde 	bl	8001974 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000a8 	.word	0x200000a8

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0b      	blt.n	8001a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	4907      	ldr	r1, [pc, #28]	@ (8001a70 <__NVIC_EnableIRQ+0x38>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	@ (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	@ (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	@ 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ff4c 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b56:	f7ff ff61 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001b5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	6978      	ldr	r0, [r7, #20]
 8001b62:	f7ff ffb1 	bl	8001ac8 <NVIC_EncodePriority>
 8001b66:	4602      	mov	r2, r0
 8001b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff80 	bl	8001a74 <__NVIC_SetPriority>
}
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff54 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	@ 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	e159      	b.n	8001e68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	f040 8148 	bne.w	8001e62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d005      	beq.n	8001bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d130      	bne.n	8001c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 0201 	and.w	r2, r3, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d017      	beq.n	8001c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	69b9      	ldr	r1, [r7, #24]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a2 	beq.w	8001e62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b57      	ldr	r3, [pc, #348]	@ (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	4a56      	ldr	r2, [pc, #344]	@ (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2e:	4b54      	ldr	r3, [pc, #336]	@ (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3a:	4a52      	ldr	r2, [pc, #328]	@ (8001e84 <HAL_GPIO_Init+0x2ec>)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	220f      	movs	r2, #15
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a49      	ldr	r2, [pc, #292]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_GPIO_Init+0x202>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a48      	ldr	r2, [pc, #288]	@ (8001e8c <HAL_GPIO_Init+0x2f4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0x1fe>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a47      	ldr	r2, [pc, #284]	@ (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00d      	beq.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a46      	ldr	r2, [pc, #280]	@ (8001e94 <HAL_GPIO_Init+0x2fc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <HAL_GPIO_Init+0x1f6>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a45      	ldr	r2, [pc, #276]	@ (8001e98 <HAL_GPIO_Init+0x300>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_GPIO_Init+0x1f2>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dac:	4935      	ldr	r1, [pc, #212]	@ (8001e84 <HAL_GPIO_Init+0x2ec>)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dba:	4b38      	ldr	r3, [pc, #224]	@ (8001e9c <HAL_GPIO_Init+0x304>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dde:	4a2f      	ldr	r2, [pc, #188]	@ (8001e9c <HAL_GPIO_Init+0x304>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <HAL_GPIO_Init+0x304>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e08:	4a24      	ldr	r2, [pc, #144]	@ (8001e9c <HAL_GPIO_Init+0x304>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0e:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <HAL_GPIO_Init+0x304>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e32:	4a1a      	ldr	r2, [pc, #104]	@ (8001e9c <HAL_GPIO_Init+0x304>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e38:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <HAL_GPIO_Init+0x304>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e9c <HAL_GPIO_Init+0x304>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	f67f aea2 	bls.w	8001bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3724      	adds	r7, #36	@ 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40013800 	.word	0x40013800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	e001      	b.n	8001ec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eec:	e003      	b.n	8001ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	619a      	str	r2, [r3, #24]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e12b      	b.n	800216e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fed4 	bl	8000cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2224      	movs	r2, #36	@ 0x24
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f68:	f001 f8da 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8001f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a81      	ldr	r2, [pc, #516]	@ (8002178 <HAL_I2C_Init+0x274>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d807      	bhi.n	8001f88 <HAL_I2C_Init+0x84>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a80      	ldr	r2, [pc, #512]	@ (800217c <HAL_I2C_Init+0x278>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	bf94      	ite	ls
 8001f80:	2301      	movls	r3, #1
 8001f82:	2300      	movhi	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e006      	b.n	8001f96 <HAL_I2C_Init+0x92>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8002180 <HAL_I2C_Init+0x27c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	bf94      	ite	ls
 8001f90:	2301      	movls	r3, #1
 8001f92:	2300      	movhi	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0e7      	b.n	800216e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4a78      	ldr	r2, [pc, #480]	@ (8002184 <HAL_I2C_Init+0x280>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	0c9b      	lsrs	r3, r3, #18
 8001fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8002178 <HAL_I2C_Init+0x274>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d802      	bhi.n	8001fd8 <HAL_I2C_Init+0xd4>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	e009      	b.n	8001fec <HAL_I2C_Init+0xe8>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	4a69      	ldr	r2, [pc, #420]	@ (8002188 <HAL_I2C_Init+0x284>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	3301      	adds	r3, #1
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ffe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	495c      	ldr	r1, [pc, #368]	@ (8002178 <HAL_I2C_Init+0x274>)
 8002008:	428b      	cmp	r3, r1
 800200a:	d819      	bhi.n	8002040 <HAL_I2C_Init+0x13c>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1e59      	subs	r1, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fbb1 f3f3 	udiv	r3, r1, r3
 800201a:	1c59      	adds	r1, r3, #1
 800201c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002020:	400b      	ands	r3, r1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_I2C_Init+0x138>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1e59      	subs	r1, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fbb1 f3f3 	udiv	r3, r1, r3
 8002034:	3301      	adds	r3, #1
 8002036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203a:	e051      	b.n	80020e0 <HAL_I2C_Init+0x1dc>
 800203c:	2304      	movs	r3, #4
 800203e:	e04f      	b.n	80020e0 <HAL_I2C_Init+0x1dc>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d111      	bne.n	800206c <HAL_I2C_Init+0x168>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1e58      	subs	r0, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	440b      	add	r3, r1
 8002056:	fbb0 f3f3 	udiv	r3, r0, r3
 800205a:	3301      	adds	r3, #1
 800205c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e012      	b.n	8002092 <HAL_I2C_Init+0x18e>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1e58      	subs	r0, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	0099      	lsls	r1, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002082:	3301      	adds	r3, #1
 8002084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_Init+0x196>
 8002096:	2301      	movs	r3, #1
 8002098:	e022      	b.n	80020e0 <HAL_I2C_Init+0x1dc>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10e      	bne.n	80020c0 <HAL_I2C_Init+0x1bc>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1e58      	subs	r0, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	440b      	add	r3, r1
 80020b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020be:	e00f      	b.n	80020e0 <HAL_I2C_Init+0x1dc>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	0099      	lsls	r1, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	6809      	ldr	r1, [r1, #0]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800210e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6911      	ldr	r1, [r2, #16]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68d2      	ldr	r2, [r2, #12]
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	430b      	orrs	r3, r1
 8002122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	000186a0 	.word	0x000186a0
 800217c:	001e847f 	.word	0x001e847f
 8002180:	003d08ff 	.word	0x003d08ff
 8002184:	431bde83 	.word	0x431bde83
 8002188:	10624dd3 	.word	0x10624dd3

0800218c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	460b      	mov	r3, r1
 800219a:	817b      	strh	r3, [r7, #10]
 800219c:	4613      	mov	r3, r2
 800219e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff fbe8 	bl	8001974 <HAL_GetTick>
 80021a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	f040 80e0 	bne.w	8002374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2319      	movs	r3, #25
 80021ba:	2201      	movs	r2, #1
 80021bc:	4970      	ldr	r1, [pc, #448]	@ (8002380 <HAL_I2C_Master_Transmit+0x1f4>)
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f964 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
 80021cc:	e0d3      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_I2C_Master_Transmit+0x50>
 80021d8:	2302      	movs	r3, #2
 80021da:	e0cc      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d007      	beq.n	8002202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2221      	movs	r2, #33	@ 0x21
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2210      	movs	r2, #16
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	893a      	ldrh	r2, [r7, #8]
 8002232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a50      	ldr	r2, [pc, #320]	@ (8002384 <HAL_I2C_Master_Transmit+0x1f8>)
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002244:	8979      	ldrh	r1, [r7, #10]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	6a3a      	ldr	r2, [r7, #32]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f89c 	bl	8002388 <I2C_MasterRequestWrite>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e08d      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002270:	e066      	b.n	8002340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	6a39      	ldr	r1, [r7, #32]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fa22 	bl	80026c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00d      	beq.n	800229e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	2b04      	cmp	r3, #4
 8002288:	d107      	bne.n	800229a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06b      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d11b      	bne.n	8002314 <HAL_I2C_Master_Transmit+0x188>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d017      	beq.n	8002314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	6a39      	ldr	r1, [r7, #32]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fa19 	bl	8002750 <I2C_WaitOnBTFFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00d      	beq.n	8002340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	2b04      	cmp	r3, #4
 800232a:	d107      	bne.n	800233c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e01a      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d194      	bne.n	8002272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e000      	b.n	8002376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002374:	2302      	movs	r3, #2
  }
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	00100002 	.word	0x00100002
 8002384:	ffff0000 	.word	0xffff0000

08002388 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	460b      	mov	r3, r1
 8002396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d006      	beq.n	80023b2 <I2C_MasterRequestWrite+0x2a>
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d003      	beq.n	80023b2 <I2C_MasterRequestWrite+0x2a>
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023b0:	d108      	bne.n	80023c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e00b      	b.n	80023dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	2b12      	cmp	r3, #18
 80023ca:	d107      	bne.n	80023dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f84f 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002402:	d103      	bne.n	800240c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e035      	b.n	800247c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002418:	d108      	bne.n	800242c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800241a:	897b      	ldrh	r3, [r7, #10]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	e01b      	b.n	8002464 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800242c:	897b      	ldrh	r3, [r7, #10]
 800242e:	11db      	asrs	r3, r3, #7
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f003 0306 	and.w	r3, r3, #6
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f063 030f 	orn	r3, r3, #15
 800243c:	b2da      	uxtb	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	490e      	ldr	r1, [pc, #56]	@ (8002484 <I2C_MasterRequestWrite+0xfc>)
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f898 	bl	8002580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e010      	b.n	800247c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4907      	ldr	r1, [pc, #28]	@ (8002488 <I2C_MasterRequestWrite+0x100>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f888 	bl	8002580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	00010008 	.word	0x00010008
 8002488:	00010002 	.word	0x00010002

0800248c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800249c:	e048      	b.n	8002530 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d044      	beq.n	8002530 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a6:	f7ff fa65 	bl	8001974 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d302      	bcc.n	80024bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d139      	bne.n	8002530 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	0c1b      	lsrs	r3, r3, #16
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d10d      	bne.n	80024e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	43da      	mvns	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4013      	ands	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	e00c      	b.n	80024fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	43da      	mvns	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4013      	ands	r3, r2
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d116      	bne.n	8002530 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e023      	b.n	8002578 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	0c1b      	lsrs	r3, r3, #16
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10d      	bne.n	8002556 <I2C_WaitOnFlagUntilTimeout+0xca>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	43da      	mvns	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	e00c      	b.n	8002570 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	43da      	mvns	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	429a      	cmp	r2, r3
 8002574:	d093      	beq.n	800249e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800258e:	e071      	b.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800259e:	d123      	bne.n	80025e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	f043 0204 	orr.w	r2, r3, #4
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e067      	b.n	80026b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d041      	beq.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f0:	f7ff f9c0 	bl	8001974 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d302      	bcc.n	8002606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d136      	bne.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10c      	bne.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4013      	ands	r3, r2
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	bf14      	ite	ne
 8002622:	2301      	movne	r3, #1
 8002624:	2300      	moveq	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	e00b      	b.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	43da      	mvns	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4013      	ands	r3, r2
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e021      	b.n	80026b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	0c1b      	lsrs	r3, r3, #16
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d10c      	bne.n	8002698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	43da      	mvns	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4013      	ands	r3, r2
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	e00b      	b.n	80026b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f47f af6d 	bne.w	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026cc:	e034      	b.n	8002738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f886 	bl	80027e0 <I2C_IsAcknowledgeFailed>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e034      	b.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d028      	beq.n	8002738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7ff f945 	bl	8001974 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d11d      	bne.n	8002738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002706:	2b80      	cmp	r3, #128	@ 0x80
 8002708:	d016      	beq.n	8002738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e007      	b.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002742:	2b80      	cmp	r3, #128	@ 0x80
 8002744:	d1c3      	bne.n	80026ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800275c:	e034      	b.n	80027c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f83e 	bl	80027e0 <I2C_IsAcknowledgeFailed>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e034      	b.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d028      	beq.n	80027c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002776:	f7ff f8fd 	bl	8001974 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11d      	bne.n	80027c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d016      	beq.n	80027c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e007      	b.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d1c3      	bne.n	800275e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f6:	d11b      	bne.n	8002830 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002800:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	f043 0204 	orr.w	r2, r3, #4
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e267      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d075      	beq.n	800294a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800285e:	4b88      	ldr	r3, [pc, #544]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b04      	cmp	r3, #4
 8002868:	d00c      	beq.n	8002884 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286a:	4b85      	ldr	r3, [pc, #532]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002872:	2b08      	cmp	r3, #8
 8002874:	d112      	bne.n	800289c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002876:	4b82      	ldr	r3, [pc, #520]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800287e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002882:	d10b      	bne.n	800289c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	4b7e      	ldr	r3, [pc, #504]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d05b      	beq.n	8002948 <HAL_RCC_OscConfig+0x108>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d157      	bne.n	8002948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e242      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a4:	d106      	bne.n	80028b4 <HAL_RCC_OscConfig+0x74>
 80028a6:	4b76      	ldr	r3, [pc, #472]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a75      	ldr	r2, [pc, #468]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e01d      	b.n	80028f0 <HAL_RCC_OscConfig+0xb0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x98>
 80028be:	4b70      	ldr	r3, [pc, #448]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0xb0>
 80028d8:	4b69      	ldr	r3, [pc, #420]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a68      	ldr	r2, [pc, #416]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b66      	ldr	r3, [pc, #408]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a65      	ldr	r2, [pc, #404]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d013      	beq.n	8002920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7ff f83c 	bl	8001974 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002900:	f7ff f838 	bl	8001974 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	@ 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e207      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	4b5b      	ldr	r3, [pc, #364]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0xc0>
 800291e:	e014      	b.n	800294a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff f828 	bl	8001974 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7ff f824 	bl	8001974 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e1f3      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	4b51      	ldr	r3, [pc, #324]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0xe8>
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d063      	beq.n	8002a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002956:	4b4a      	ldr	r3, [pc, #296]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002962:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800296a:	2b08      	cmp	r3, #8
 800296c:	d11c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b44      	ldr	r3, [pc, #272]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d116      	bne.n	80029a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_RCC_OscConfig+0x152>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e1c7      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002992:	4b3b      	ldr	r3, [pc, #236]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4937      	ldr	r1, [pc, #220]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	e03a      	b.n	8002a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b0:	4b34      	ldr	r3, [pc, #208]	@ (8002a84 <HAL_RCC_OscConfig+0x244>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe ffdd 	bl	8001974 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029be:	f7fe ffd9 	bl	8001974 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e1a8      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4925      	ldr	r1, [pc, #148]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
 80029f0:	e015      	b.n	8002a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f2:	4b24      	ldr	r3, [pc, #144]	@ (8002a84 <HAL_RCC_OscConfig+0x244>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe ffbc 	bl	8001974 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe ffb8 	bl	8001974 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e187      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d036      	beq.n	8002a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d016      	beq.n	8002a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a32:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <HAL_RCC_OscConfig+0x248>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe ff9c 	bl	8001974 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fe ff98 	bl	8001974 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e167      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x200>
 8002a5e:	e01b      	b.n	8002a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a60:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <HAL_RCC_OscConfig+0x248>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a66:	f7fe ff85 	bl	8001974 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	e00e      	b.n	8002a8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe ff81 	bl	8001974 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d907      	bls.n	8002a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e150      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
 8002a80:	40023800 	.word	0x40023800
 8002a84:	42470000 	.word	0x42470000
 8002a88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	4b88      	ldr	r3, [pc, #544]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ea      	bne.n	8002a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8097 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aaa:	4b81      	ldr	r3, [pc, #516]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	4b7d      	ldr	r3, [pc, #500]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a7c      	ldr	r2, [pc, #496]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b77      	ldr	r3, [pc, #476]	@ (8002cb4 <HAL_RCC_OscConfig+0x474>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b74      	ldr	r3, [pc, #464]	@ (8002cb4 <HAL_RCC_OscConfig+0x474>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a73      	ldr	r2, [pc, #460]	@ (8002cb4 <HAL_RCC_OscConfig+0x474>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe ff41 	bl	8001974 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7fe ff3d 	bl	8001974 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e10c      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b6a      	ldr	r3, [pc, #424]	@ (8002cb4 <HAL_RCC_OscConfig+0x474>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x2ea>
 8002b1c:	4b64      	ldr	r3, [pc, #400]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	4a63      	ldr	r2, [pc, #396]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b28:	e01c      	b.n	8002b64 <HAL_RCC_OscConfig+0x324>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x30c>
 8002b32:	4b5f      	ldr	r3, [pc, #380]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	4a5e      	ldr	r2, [pc, #376]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b42:	4a5b      	ldr	r2, [pc, #364]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0x324>
 8002b4c:	4b58      	ldr	r3, [pc, #352]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b50:	4a57      	ldr	r2, [pc, #348]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b58:	4b55      	ldr	r3, [pc, #340]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5c:	4a54      	ldr	r2, [pc, #336]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	f023 0304 	bic.w	r3, r3, #4
 8002b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe ff02 	bl	8001974 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe fefe 	bl	8001974 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0cb      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8a:	4b49      	ldr	r3, [pc, #292]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ee      	beq.n	8002b74 <HAL_RCC_OscConfig+0x334>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b98:	f7fe feec 	bl	8001974 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fee8 	bl	8001974 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e0b5      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1ee      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc8:	4b39      	ldr	r3, [pc, #228]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	4a38      	ldr	r2, [pc, #224]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a1 	beq.w	8002d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bde:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d05c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d141      	bne.n	8002c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b31      	ldr	r3, [pc, #196]	@ (8002cb8 <HAL_RCC_OscConfig+0x478>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe febc 	bl	8001974 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe feb8 	bl	8001974 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e087      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	3b01      	subs	r3, #1
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	491b      	ldr	r1, [pc, #108]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_RCC_OscConfig+0x478>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fe91 	bl	8001974 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fe fe8d 	bl	8001974 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e05c      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c68:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x416>
 8002c74:	e054      	b.n	8002d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_RCC_OscConfig+0x478>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fe7a 	bl	8001974 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe fe76 	bl	8001974 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e045      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x444>
 8002ca2:	e03d      	b.n	8002d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e038      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <HAL_RCC_OscConfig+0x4ec>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d028      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d121      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d11a      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cec:	4013      	ands	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d111      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	3b01      	subs	r3, #1
 8002d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800

08002d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0cc      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b68      	ldr	r3, [pc, #416]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d90c      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b65      	ldr	r3, [pc, #404]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b63      	ldr	r3, [pc, #396]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0b8      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d84:	4b59      	ldr	r3, [pc, #356]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a58      	ldr	r2, [pc, #352]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d9c:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a52      	ldr	r2, [pc, #328]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da8:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	494d      	ldr	r1, [pc, #308]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d044      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b47      	ldr	r3, [pc, #284]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d119      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e07f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	4b3f      	ldr	r3, [pc, #252]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e06f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e067      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0e:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f023 0203 	bic.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4934      	ldr	r1, [pc, #208]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e20:	f7fe fda8 	bl	8001974 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f7fe fda4 	bl	8001974 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e04f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 020c 	and.w	r2, r3, #12
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1eb      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e50:	4b25      	ldr	r3, [pc, #148]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d20c      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b20      	ldr	r3, [pc, #128]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e032      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4916      	ldr	r1, [pc, #88]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea2:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	490e      	ldr	r1, [pc, #56]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eb6:	f000 f821 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	490a      	ldr	r1, [pc, #40]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	5ccb      	ldrb	r3, [r1, r3]
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	4a09      	ldr	r2, [pc, #36]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ed2:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe f80a 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023c00 	.word	0x40023c00
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08007514 	.word	0x08007514
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	200000a4 	.word	0x200000a4

08002efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f00:	b094      	sub	sp, #80	@ 0x50
 8002f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f14:	4b79      	ldr	r3, [pc, #484]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d00d      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x40>
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	f200 80e1 	bhi.w	80030e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x34>
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d003      	beq.n	8002f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f2e:	e0db      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f30:	4b73      	ldr	r3, [pc, #460]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f34:	e0db      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f36:	4b73      	ldr	r3, [pc, #460]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f3a:	e0d8      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f46:	4b6d      	ldr	r3, [pc, #436]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d063      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f52:	4b6a      	ldr	r3, [pc, #424]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	099b      	lsrs	r3, r3, #6
 8002f58:	2200      	movs	r2, #0
 8002f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f66:	2300      	movs	r3, #0
 8002f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f6e:	4622      	mov	r2, r4
 8002f70:	462b      	mov	r3, r5
 8002f72:	f04f 0000 	mov.w	r0, #0
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	0159      	lsls	r1, r3, #5
 8002f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f80:	0150      	lsls	r0, r2, #5
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4621      	mov	r1, r4
 8002f88:	1a51      	subs	r1, r2, r1
 8002f8a:	6139      	str	r1, [r7, #16]
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	018b      	lsls	r3, r1, #6
 8002fa4:	4651      	mov	r1, sl
 8002fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002faa:	4651      	mov	r1, sl
 8002fac:	018a      	lsls	r2, r1, #6
 8002fae:	4651      	mov	r1, sl
 8002fb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002fb4:	4659      	mov	r1, fp
 8002fb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fce:	4690      	mov	r8, r2
 8002fd0:	4699      	mov	r9, r3
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	eb18 0303 	adds.w	r3, r8, r3
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	462b      	mov	r3, r5
 8002fdc:	eb49 0303 	adc.w	r3, r9, r3
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fee:	4629      	mov	r1, r5
 8002ff0:	024b      	lsls	r3, r1, #9
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	024a      	lsls	r2, r1, #9
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003002:	2200      	movs	r2, #0
 8003004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003008:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800300c:	f7fd f938 	bl	8000280 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4613      	mov	r3, r2
 8003016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003018:	e058      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b38      	ldr	r3, [pc, #224]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	4618      	mov	r0, r3
 8003024:	4611      	mov	r1, r2
 8003026:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	2300      	movs	r3, #0
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003030:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	f04f 0000 	mov.w	r0, #0
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	0159      	lsls	r1, r3, #5
 8003042:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003046:	0150      	lsls	r0, r2, #5
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4641      	mov	r1, r8
 800304e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003052:	4649      	mov	r1, r9
 8003054:	eb63 0b01 	sbc.w	fp, r3, r1
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003064:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003068:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800306c:	ebb2 040a 	subs.w	r4, r2, sl
 8003070:	eb63 050b 	sbc.w	r5, r3, fp
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	00eb      	lsls	r3, r5, #3
 800307e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003082:	00e2      	lsls	r2, r4, #3
 8003084:	4614      	mov	r4, r2
 8003086:	461d      	mov	r5, r3
 8003088:	4643      	mov	r3, r8
 800308a:	18e3      	adds	r3, r4, r3
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	464b      	mov	r3, r9
 8003090:	eb45 0303 	adc.w	r3, r5, r3
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030a2:	4629      	mov	r1, r5
 80030a4:	028b      	lsls	r3, r1, #10
 80030a6:	4621      	mov	r1, r4
 80030a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030ac:	4621      	mov	r1, r4
 80030ae:	028a      	lsls	r2, r1, #10
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b6:	2200      	movs	r2, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	61fa      	str	r2, [r7, #28]
 80030bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c0:	f7fd f8de 	bl	8000280 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	3301      	adds	r3, #1
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030e6:	e002      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3750      	adds	r7, #80	@ 0x50
 80030f4:	46bd      	mov	sp, r7
 80030f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	00f42400 	.word	0x00f42400
 8003104:	007a1200 	.word	0x007a1200

08003108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800310c:	4b03      	ldr	r3, [pc, #12]	@ (800311c <HAL_RCC_GetHCLKFreq+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000000 	.word	0x20000000

08003120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003124:	f7ff fff0 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003128:	4602      	mov	r2, r0
 800312a:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	0a9b      	lsrs	r3, r3, #10
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	4903      	ldr	r1, [pc, #12]	@ (8003144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003136:	5ccb      	ldrb	r3, [r1, r3]
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800313c:	4618      	mov	r0, r3
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40023800 	.word	0x40023800
 8003144:	08007524 	.word	0x08007524

08003148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800314c:	f7ff ffdc 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003150:	4602      	mov	r2, r0
 8003152:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	0b5b      	lsrs	r3, r3, #13
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4903      	ldr	r1, [pc, #12]	@ (800316c <HAL_RCC_GetPCLK2Freq+0x24>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	08007524 	.word	0x08007524

08003170 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	220f      	movs	r2, #15
 800317e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003180:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0203 	and.w	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800318c:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031a4:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031b2:	4b07      	ldr	r3, [pc, #28]	@ (80031d0 <HAL_RCC_GetClockConfig+0x60>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0207 	and.w	r2, r3, #7
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	601a      	str	r2, [r3, #0]
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e041      	b.n	800326a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fd ffae 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f000 fa70 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d001      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e044      	b.n	8003316 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003324 <HAL_TIM_Base_Start_IT+0xb0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d018      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x6c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b6:	d013      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x6c>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <HAL_TIM_Base_Start_IT+0xb4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00e      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x6c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a19      	ldr	r2, [pc, #100]	@ (800332c <HAL_TIM_Base_Start_IT+0xb8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d009      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x6c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a17      	ldr	r2, [pc, #92]	@ (8003330 <HAL_TIM_Base_Start_IT+0xbc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x6c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a16      	ldr	r2, [pc, #88]	@ (8003334 <HAL_TIM_Base_Start_IT+0xc0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d111      	bne.n	8003304 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d010      	beq.n	8003314 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003302:	e007      	b.n	8003314 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40014000 	.word	0x40014000

08003338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d020      	beq.n	800339c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01b      	beq.n	800339c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0202 	mvn.w	r2, #2
 800336c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f999 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f98b 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f99c 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d020      	beq.n	80033e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01b      	beq.n	80033e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0204 	mvn.w	r2, #4
 80033b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f973 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f965 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f976 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0208 	mvn.w	r2, #8
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2204      	movs	r2, #4
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f94d 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f93f 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f950 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	d020      	beq.n	8003480 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0210 	mvn.w	r2, #16
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2208      	movs	r2, #8
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f927 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f919 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f92a 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00c      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0201 	mvn.w	r2, #1
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fcdc 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00c      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fab0 	bl	8003a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00c      	beq.n	80034ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8fb 	bl	80036e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00c      	beq.n	8003510 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0220 	mvn.w	r2, #32
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa82 	bl	8003a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIM_ConfigClockSource+0x1c>
 8003530:	2302      	movs	r3, #2
 8003532:	e0b4      	b.n	800369e <HAL_TIM_ConfigClockSource+0x186>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800355a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800356c:	d03e      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0xd4>
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003572:	f200 8087 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800357a:	f000 8086 	beq.w	800368a <HAL_TIM_ConfigClockSource+0x172>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003582:	d87f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b70      	cmp	r3, #112	@ 0x70
 8003586:	d01a      	beq.n	80035be <HAL_TIM_ConfigClockSource+0xa6>
 8003588:	2b70      	cmp	r3, #112	@ 0x70
 800358a:	d87b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b60      	cmp	r3, #96	@ 0x60
 800358e:	d050      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x11a>
 8003590:	2b60      	cmp	r3, #96	@ 0x60
 8003592:	d877      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b50      	cmp	r3, #80	@ 0x50
 8003596:	d03c      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0xfa>
 8003598:	2b50      	cmp	r3, #80	@ 0x50
 800359a:	d873      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b40      	cmp	r3, #64	@ 0x40
 800359e:	d058      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x13a>
 80035a0:	2b40      	cmp	r3, #64	@ 0x40
 80035a2:	d86f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b30      	cmp	r3, #48	@ 0x30
 80035a6:	d064      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b30      	cmp	r3, #48	@ 0x30
 80035aa:	d86b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d060      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d867      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05c      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d05a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035bc:	e062      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ce:	f000 f993 	bl	80038f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	609a      	str	r2, [r3, #8]
      break;
 80035ea:	e04f      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035fc:	f000 f97c 	bl	80038f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800360e:	609a      	str	r2, [r3, #8]
      break;
 8003610:	e03c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361e:	461a      	mov	r2, r3
 8003620:	f000 f8f0 	bl	8003804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2150      	movs	r1, #80	@ 0x50
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f949 	bl	80038c2 <TIM_ITRx_SetConfig>
      break;
 8003630:	e02c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800363e:	461a      	mov	r2, r3
 8003640:	f000 f90f 	bl	8003862 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2160      	movs	r1, #96	@ 0x60
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f939 	bl	80038c2 <TIM_ITRx_SetConfig>
      break;
 8003650:	e01c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800365e:	461a      	mov	r2, r3
 8003660:	f000 f8d0 	bl	8003804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	@ 0x40
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f929 	bl	80038c2 <TIM_ITRx_SetConfig>
      break;
 8003670:	e00c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 f920 	bl	80038c2 <TIM_ITRx_SetConfig>
      break;
 8003682:	e003      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      break;
 8003688:	e000      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800368a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a37      	ldr	r2, [pc, #220]	@ (80037e8 <TIM_Base_SetConfig+0xf0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00f      	beq.n	8003730 <TIM_Base_SetConfig+0x38>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003716:	d00b      	beq.n	8003730 <TIM_Base_SetConfig+0x38>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a34      	ldr	r2, [pc, #208]	@ (80037ec <TIM_Base_SetConfig+0xf4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d007      	beq.n	8003730 <TIM_Base_SetConfig+0x38>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a33      	ldr	r2, [pc, #204]	@ (80037f0 <TIM_Base_SetConfig+0xf8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <TIM_Base_SetConfig+0x38>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a32      	ldr	r2, [pc, #200]	@ (80037f4 <TIM_Base_SetConfig+0xfc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d108      	bne.n	8003742 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a28      	ldr	r2, [pc, #160]	@ (80037e8 <TIM_Base_SetConfig+0xf0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d01b      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003750:	d017      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a25      	ldr	r2, [pc, #148]	@ (80037ec <TIM_Base_SetConfig+0xf4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a24      	ldr	r2, [pc, #144]	@ (80037f0 <TIM_Base_SetConfig+0xf8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00f      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a23      	ldr	r2, [pc, #140]	@ (80037f4 <TIM_Base_SetConfig+0xfc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00b      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <TIM_Base_SetConfig+0x100>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a21      	ldr	r2, [pc, #132]	@ (80037fc <TIM_Base_SetConfig+0x104>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d003      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a20      	ldr	r2, [pc, #128]	@ (8003800 <TIM_Base_SetConfig+0x108>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d108      	bne.n	8003794 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a0c      	ldr	r2, [pc, #48]	@ (80037e8 <TIM_Base_SetConfig+0xf0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d103      	bne.n	80037c2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f043 0204 	orr.w	r2, r3, #4
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800
 80037f4:	40000c00 	.word	0x40000c00
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800

08003804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f023 0201 	bic.w	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800382e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 030a 	bic.w	r3, r3, #10
 8003840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003862:	b480      	push	{r7}
 8003864:	b087      	sub	sp, #28
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f023 0210 	bic.w	r2, r3, #16
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800388c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	031b      	lsls	r3, r3, #12
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800389e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	f043 0307 	orr.w	r3, r3, #7
 80038e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	609a      	str	r2, [r3, #8]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	021a      	lsls	r2, r3, #8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	431a      	orrs	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	609a      	str	r2, [r3, #8]
}
 800392c:	bf00      	nop
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800394c:	2302      	movs	r3, #2
 800394e:	e050      	b.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d018      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800399c:	d013      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a18      	ldr	r2, [pc, #96]	@ (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00e      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a16      	ldr	r2, [pc, #88]	@ (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a15      	ldr	r2, [pc, #84]	@ (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a13      	ldr	r2, [pc, #76]	@ (8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10c      	bne.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800
 8003a0c:	40000c00 	.word	0x40000c00
 8003a10:	40014000 	.word	0x40014000

08003a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a4e:	2b84      	cmp	r3, #132	@ 0x84
 8003a50:	d005      	beq.n	8003a5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	3303      	adds	r3, #3
 8003a5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a72:	f3ef 8305 	mrs	r3, IPSR
 8003a76:	607b      	str	r3, [r7, #4]
  return(result);
 8003a78:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf14      	ite	ne
 8003a7e:	2301      	movne	r3, #1
 8003a80:	2300      	moveq	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a94:	f001 fd2a 	bl	80054ec <vTaskStartScheduler>
  
  return osOK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa0:	b089      	sub	sp, #36	@ 0x24
 8003aa2:	af04      	add	r7, sp, #16
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d020      	beq.n	8003af2 <osThreadCreate+0x54>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01c      	beq.n	8003af2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685c      	ldr	r4, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691e      	ldr	r6, [r3, #16]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ffb6 	bl	8003a3c <makeFreeRtosPriority>
 8003ad0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ada:	9202      	str	r2, [sp, #8]
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	9100      	str	r1, [sp, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4632      	mov	r2, r6
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f001 fb1a 	bl	8005120 <xTaskCreateStatic>
 8003aec:	4603      	mov	r3, r0
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e01c      	b.n	8003b2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685c      	ldr	r4, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003afe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff ff98 	bl	8003a3c <makeFreeRtosPriority>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f107 030c 	add.w	r3, r7, #12
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	9200      	str	r2, [sp, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	4632      	mov	r2, r6
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f001 fb5f 	bl	80051e0 <xTaskCreate>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d001      	beq.n	8003b2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e000      	b.n	8003b2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <osDelay+0x16>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	e000      	b.n	8003b4e <osDelay+0x18>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 fc96 	bl	8005480 <vTaskDelay>
  
  return osOK;
 8003b54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4619      	mov	r1, r3
 8003b74:	2001      	movs	r0, #1
 8003b76:	f000 fcec 	bl	8004552 <xQueueCreateMutexStatic>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	e003      	b.n	8003b86 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f000 fccf 	bl	8004522 <xQueueCreateMutex>
 8003b84:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <osMutexWait+0x18>
    return osErrorParameter;
 8003ba4:	2380      	movs	r3, #128	@ 0x80
 8003ba6:	e03a      	b.n	8003c1e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d103      	bne.n	8003bbc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e009      	b.n	8003bd0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d006      	beq.n	8003bd0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <osMutexWait+0x40>
      ticks = 1;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003bd0:	f7ff ff4c 	bl	8003a6c <inHandlerMode>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d017      	beq.n	8003c0a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003bda:	f107 0308 	add.w	r3, r7, #8
 8003bde:	461a      	mov	r2, r3
 8003be0:	2100      	movs	r1, #0
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 f8f2 	bl	8004dcc <xQueueReceiveFromISR>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d001      	beq.n	8003bf2 <osMutexWait+0x62>
      return osErrorOS;
 8003bee:	23ff      	movs	r3, #255	@ 0xff
 8003bf0:	e015      	b.n	8003c1e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d011      	beq.n	8003c1c <osMutexWait+0x8c>
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <osMutexWait+0x98>)
 8003bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	e008      	b.n	8003c1c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003c0a:	68f9      	ldr	r1, [r7, #12]
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 ffcd 	bl	8004bac <xQueueSemaphoreTake>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d001      	beq.n	8003c1c <osMutexWait+0x8c>
    return osErrorOS;
 8003c18:	23ff      	movs	r3, #255	@ 0xff
 8003c1a:	e000      	b.n	8003c1e <osMutexWait+0x8e>
  }
  
  return osOK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003c3c:	f7ff ff16 	bl	8003a6c <inHandlerMode>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fe3b 	bl	80048c8 <xQueueGiveFromISR>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d001      	beq.n	8003c5c <osMutexRelease+0x30>
      return osErrorOS;
 8003c58:	23ff      	movs	r3, #255	@ 0xff
 8003c5a:	e017      	b.n	8003c8c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d013      	beq.n	8003c8a <osMutexRelease+0x5e>
 8003c62:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <osMutexRelease+0x68>)
 8003c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	e00a      	b.n	8003c8a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003c74:	2300      	movs	r3, #0
 8003c76:	2200      	movs	r2, #0
 8003c78:	2100      	movs	r1, #0
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fc84 	bl	8004588 <xQueueGenericSend>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d001      	beq.n	8003c8a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003c86:	23ff      	movs	r3, #255	@ 0xff
 8003c88:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	e000ed04 	.word	0xe000ed04

08003c98 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	3303      	adds	r3, #3
 8003ca6:	f023 0303 	bic.w	r3, r3, #3
 8003caa:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8003cac:	2014      	movs	r0, #20
 8003cae:	f002 fcb5 	bl	800661c <pvPortMalloc>
 8003cb2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d046      	beq.n	8003d48 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f002 fca2 	bl	800661c <pvPortMalloc>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d02b      	beq.n	8003d3e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	fb02 f303 	mul.w	r3, r2, r3
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f002 fc93 	bl	800661c <pvPortMalloc>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d011      	beq.n	8003d28 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	e008      	b.n	8003d1c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3f1      	bcc.n	8003d0a <osPoolCreate+0x72>
 8003d26:	e00f      	b.n	8003d48 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 fd43 	bl	80067b8 <vPortFree>
        vPortFree(thePool);
 8003d32:	6978      	ldr	r0, [r7, #20]
 8003d34:	f002 fd40 	bl	80067b8 <vPortFree>
        thePool = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e004      	b.n	8003d48 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003d3e:	6978      	ldr	r0, [r7, #20]
 8003d40:	f002 fd3a 	bl	80067b8 <vPortFree>
      thePool = NULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003d48:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b08a      	sub	sp, #40	@ 0x28
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8003d62:	f7ff fe83 	bl	8003a6c <inHandlerMode>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00e      	beq.n	8003d8a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d6c:	f3ef 8211 	mrs	r2, BASEPRI
 8003d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	617a      	str	r2, [r7, #20]
 8003d82:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d84:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d88:	e001      	b.n	8003d8e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8003d8a:	f002 fb25 	bl	80063d8 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	e029      	b.n	8003de8 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6892      	ldr	r2, [r2, #8]
 8003da0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003da4:	fb01 f202 	mul.w	r2, r1, r2
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	4413      	add	r3, r2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d113      	bne.n	8003de2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	440b      	add	r3, r1
 8003dd8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	611a      	str	r2, [r3, #16]
      break;
 8003de0:	e007      	b.n	8003df2 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d3d0      	bcc.n	8003d94 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8003df2:	f7ff fe3b 	bl	8003a6c <inHandlerMode>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e06:	e001      	b.n	8003e0c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8003e08:	f002 fb18 	bl	800643c <vPortExitCritical>
  }
  
  return p;
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3728      	adds	r7, #40	@ 0x28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <osPoolFree+0x14>
    return osErrorParameter;
 8003e26:	2380      	movs	r3, #128	@ 0x80
 8003e28:	e030      	b.n	8003e8c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <osPoolFree+0x1e>
    return osErrorParameter;
 8003e30:	2380      	movs	r3, #128	@ 0x80
 8003e32:	e02b      	b.n	8003e8c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d201      	bcs.n	8003e42 <osPoolFree+0x2c>
    return osErrorParameter;
 8003e3e:	2380      	movs	r3, #128	@ 0x80
 8003e40:	e024      	b.n	8003e8c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e56:	fb01 f202 	mul.w	r2, r1, r2
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <osPoolFree+0x4e>
    return osErrorParameter;
 8003e60:	2380      	movs	r3, #128	@ 0x80
 8003e62:	e013      	b.n	8003e8c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d301      	bcc.n	8003e7e <osPoolFree+0x68>
    return osErrorParameter;
 8003e7a:	2380      	movs	r3, #128	@ 0x80
 8003e7c:	e006      	b.n	8003e8c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689c      	ldr	r4, [r3, #8]
 8003eb6:	200c      	movs	r0, #12
 8003eb8:	f002 fbb0 	bl	800661c <pvPortMalloc>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <osMailCreate+0x36>
    return NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e038      	b.n	8003f40 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	681c      	ldr	r4, [r3, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2104      	movs	r1, #4
 8003ee6:	f000 faa8 	bl	800443a <xQueueGenericCreate>
 8003eea:	4603      	mov	r3, r0
 8003eec:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d107      	bne.n	8003f0a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f002 fc59 	bl	80067b8 <vPortFree>
    return NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e01a      	b.n	8003f40 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	681c      	ldr	r4, [r3, #0]
 8003f10:	f107 030c 	add.w	r3, r7, #12
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff febf 	bl	8003c98 <osPoolCreate>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d107      	bne.n	8003f3a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f002 fc41 	bl	80067b8 <vPortFree>
    return NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e002      	b.n	8003f40 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd90      	pop	{r4, r7, pc}

08003f48 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <osMailAlloc+0x14>
    return NULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e006      	b.n	8003f6a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fef6 	bl	8003d52 <osPoolAlloc>
 8003f66:	60f8      	str	r0, [r7, #12]
  
  return p;
 8003f68:	68fb      	ldr	r3, [r7, #12]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <osMailPut+0x14>
    return osErrorParameter;
 8003f84:	2380      	movs	r3, #128	@ 0x80
 8003f86:	e02c      	b.n	8003fe2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8003f8c:	f7ff fd6e 	bl	8003a6c <inHandlerMode>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d018      	beq.n	8003fc8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6858      	ldr	r0, [r3, #4]
 8003f9a:	f107 020c 	add.w	r2, r7, #12
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f000 fbf3 	bl	800478c <xQueueGenericSendFromISR>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <osMailPut+0x3c>
      return osErrorOS;
 8003fac:	23ff      	movs	r3, #255	@ 0xff
 8003fae:	e018      	b.n	8003fe2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d014      	beq.n	8003fe0 <osMailPut+0x6c>
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <osMailPut+0x78>)
 8003fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	e00b      	b.n	8003fe0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6858      	ldr	r0, [r3, #4]
 8003fcc:	4639      	mov	r1, r7
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f000 fad9 	bl	8004588 <xQueueGenericSend>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d001      	beq.n	8003fe0 <osMailPut+0x6c>
      return osErrorOS;
 8003fdc:	23ff      	movs	r3, #255	@ 0xff
 8003fde:	e000      	b.n	8003fe2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b08b      	sub	sp, #44	@ 0x2c
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8004006:	2380      	movs	r3, #128	@ 0x80
 8004008:	617b      	str	r3, [r7, #20]
    return event;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	461c      	mov	r4, r3
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800401a:	e056      	b.n	80040ca <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800401c:	2300      	movs	r3, #0
 800401e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d103      	bne.n	8004034 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800402c:	f04f 33ff 	mov.w	r3, #4294967295
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
 8004032:	e009      	b.n	8004048 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d006      	beq.n	8004048 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <osMailGet+0x58>
      ticks = 1;
 8004044:	2301      	movs	r3, #1
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004048:	f7ff fd10 	bl	8003a6c <inHandlerMode>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01d      	beq.n	800408e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6858      	ldr	r0, [r3, #4]
 8004056:	f107 0220 	add.w	r2, r7, #32
 800405a:	f107 0314 	add.w	r3, r7, #20
 800405e:	3304      	adds	r3, #4
 8004060:	4619      	mov	r1, r3
 8004062:	f000 feb3 	bl	8004dcc <xQueueReceiveFromISR>
 8004066:	4603      	mov	r3, r0
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800406c:	2320      	movs	r3, #32
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e001      	b.n	8004076 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01e      	beq.n	80040ba <osMailGet+0xca>
 800407c:	4b15      	ldr	r3, [pc, #84]	@ (80040d4 <osMailGet+0xe4>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	e015      	b.n	80040ba <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6858      	ldr	r0, [r3, #4]
 8004092:	f107 0314 	add.w	r3, r7, #20
 8004096:	3304      	adds	r3, #4
 8004098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409a:	4619      	mov	r1, r3
 800409c:	f000 fca4 	bl	80049e8 <xQueueReceive>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d102      	bne.n	80040ac <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80040a6:	2320      	movs	r3, #32
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e006      	b.n	80040ba <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <osMailGet+0xc6>
 80040b2:	2300      	movs	r3, #0
 80040b4:	e000      	b.n	80040b8 <osMailGet+0xc8>
 80040b6:	2340      	movs	r3, #64	@ 0x40
 80040b8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	461c      	mov	r4, r3
 80040be:	f107 0314 	add.w	r3, r7, #20
 80040c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	372c      	adds	r7, #44	@ 0x2c
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd90      	pop	{r4, r7, pc}
 80040d2:	bf00      	nop
 80040d4:	e000ed04 	.word	0xe000ed04

080040d8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <osMailFree+0x14>
    return osErrorParameter;
 80040e8:	2380      	movs	r3, #128	@ 0x80
 80040ea:	e006      	b.n	80040fa <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	6839      	ldr	r1, [r7, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fe8f 	bl	8003e16 <osPoolFree>
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f103 0208 	add.w	r2, r3, #8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f04f 32ff 	mov.w	r2, #4294967295
 800411a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f103 0208 	add.w	r2, r3, #8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f103 0208 	add.w	r2, r3, #8
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d103      	bne.n	80041c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	e00c      	b.n	80041de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3308      	adds	r3, #8
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e002      	b.n	80041d2 <vListInsert+0x2e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d2f6      	bcs.n	80041cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6892      	ldr	r2, [r2, #8]
 800422c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6852      	ldr	r2, [r2, #4]
 8004236:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	429a      	cmp	r2, r3
 8004240:	d103      	bne.n	800424a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1e5a      	subs	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10b      	bne.n	8004298 <xQueueGenericReset+0x2c>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60bb      	str	r3, [r7, #8]
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004298:	f002 f89e 	bl	80063d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	68f9      	ldr	r1, [r7, #12]
 80042a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	441a      	add	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	3b01      	subs	r3, #1
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	441a      	add	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	22ff      	movs	r2, #255	@ 0xff
 80042dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	22ff      	movs	r2, #255	@ 0xff
 80042e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d114      	bne.n	8004318 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01a      	beq.n	800432c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3310      	adds	r3, #16
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 fb50 	bl	80059a0 <xTaskRemoveFromEventList>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d012      	beq.n	800432c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004306:	4b0d      	ldr	r3, [pc, #52]	@ (800433c <xQueueGenericReset+0xd0>)
 8004308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	e009      	b.n	800432c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3310      	adds	r3, #16
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fef0 	bl	8004102 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3324      	adds	r3, #36	@ 0x24
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff feeb 	bl	8004102 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800432c:	f002 f886 	bl	800643c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004330:	2301      	movs	r3, #1
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08e      	sub	sp, #56	@ 0x38
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10b      	bne.n	800438a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	e7fd      	b.n	8004386 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <xQueueGenericCreateStatic+0x56>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <xQueueGenericCreateStatic+0x5a>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <xQueueGenericCreateStatic+0x5c>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	623b      	str	r3, [r7, #32]
}
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	e7fd      	b.n	80043b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <xQueueGenericCreateStatic+0x84>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <xQueueGenericCreateStatic+0x88>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <xQueueGenericCreateStatic+0x8a>
 80043c8:	2300      	movs	r3, #0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10b      	bne.n	80043e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	61fb      	str	r3, [r7, #28]
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	e7fd      	b.n	80043e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043e6:	2348      	movs	r3, #72	@ 0x48
 80043e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b48      	cmp	r3, #72	@ 0x48
 80043ee:	d00b      	beq.n	8004408 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	61bb      	str	r3, [r7, #24]
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004408:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800440e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00d      	beq.n	8004430 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800441c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f840 	bl	80044b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004432:	4618      	mov	r0, r3
 8004434:	3730      	adds	r7, #48	@ 0x30
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800443a:	b580      	push	{r7, lr}
 800443c:	b08a      	sub	sp, #40	@ 0x28
 800443e:	af02      	add	r7, sp, #8
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	4613      	mov	r3, r2
 8004446:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <xQueueGenericCreate+0x2c>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	613b      	str	r3, [r7, #16]
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	3348      	adds	r3, #72	@ 0x48
 8004474:	4618      	mov	r0, r3
 8004476:	f002 f8d1 	bl	800661c <pvPortMalloc>
 800447a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d011      	beq.n	80044a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	3348      	adds	r3, #72	@ 0x48
 800448a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004494:	79fa      	ldrb	r2, [r7, #7]
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f805 	bl	80044b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044a6:	69bb      	ldr	r3, [r7, #24]
	}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e002      	b.n	80044d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044de:	2101      	movs	r1, #1
 80044e0:	69b8      	ldr	r0, [r7, #24]
 80044e2:	f7ff fec3 	bl	800426c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800450e:	2300      	movs	r3, #0
 8004510:	2200      	movs	r2, #0
 8004512:	2100      	movs	r1, #0
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f837 	bl	8004588 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800452c:	2301      	movs	r3, #1
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	461a      	mov	r2, r3
 8004538:	6939      	ldr	r1, [r7, #16]
 800453a:	6978      	ldr	r0, [r7, #20]
 800453c:	f7ff ff7d 	bl	800443a <xQueueGenericCreate>
 8004540:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff ffd3 	bl	80044ee <prvInitialiseMutex>

		return xNewQueue;
 8004548:	68fb      	ldr	r3, [r7, #12]
	}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004552:	b580      	push	{r7, lr}
 8004554:	b088      	sub	sp, #32
 8004556:	af02      	add	r7, sp, #8
 8004558:	4603      	mov	r3, r0
 800455a:	6039      	str	r1, [r7, #0]
 800455c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800455e:	2301      	movs	r3, #1
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2200      	movs	r2, #0
 800456e:	6939      	ldr	r1, [r7, #16]
 8004570:	6978      	ldr	r0, [r7, #20]
 8004572:	f7ff fee5 	bl	8004340 <xQueueGenericCreateStatic>
 8004576:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff ffb8 	bl	80044ee <prvInitialiseMutex>

		return xNewQueue;
 800457e:	68fb      	ldr	r3, [r7, #12]
	}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08e      	sub	sp, #56	@ 0x38
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <xQueueGenericSend+0x34>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <xQueueGenericSend+0x42>
 80045c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <xQueueGenericSend+0x46>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <xQueueGenericSend+0x48>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <xQueueGenericSend+0x64>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d103      	bne.n	80045fa <xQueueGenericSend+0x72>
 80045f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <xQueueGenericSend+0x76>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <xQueueGenericSend+0x78>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <xQueueGenericSend+0x94>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	623b      	str	r3, [r7, #32]
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800461c:	f001 fb86 	bl	8005d2c <xTaskGetSchedulerState>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <xQueueGenericSend+0xa4>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <xQueueGenericSend+0xa8>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <xQueueGenericSend+0xaa>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <xQueueGenericSend+0xc6>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	61fb      	str	r3, [r7, #28]
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	e7fd      	b.n	800464a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800464e:	f001 fec3 	bl	80063d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <xQueueGenericSend+0xdc>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d129      	bne.n	80046b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800466a:	f000 fc49 	bl	8004f00 <prvCopyDataToQueue>
 800466e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	3324      	adds	r3, #36	@ 0x24
 800467c:	4618      	mov	r0, r3
 800467e:	f001 f98f 	bl	80059a0 <xTaskRemoveFromEventList>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004688:	4b3f      	ldr	r3, [pc, #252]	@ (8004788 <xQueueGenericSend+0x200>)
 800468a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	e00a      	b.n	80046b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800469a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046a0:	4b39      	ldr	r3, [pc, #228]	@ (8004788 <xQueueGenericSend+0x200>)
 80046a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046b0:	f001 fec4 	bl	800643c <vPortExitCritical>
				return pdPASS;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e063      	b.n	8004780 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046be:	f001 febd 	bl	800643c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e05c      	b.n	8004780 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046cc:	f107 0314 	add.w	r3, r7, #20
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 f9c9 	bl	8005a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046d6:	2301      	movs	r3, #1
 80046d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046da:	f001 feaf 	bl	800643c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046de:	f000 ff6f 	bl	80055c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046e2:	f001 fe79 	bl	80063d8 <vPortEnterCritical>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046ec:	b25b      	sxtb	r3, r3
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d103      	bne.n	80046fc <xQueueGenericSend+0x174>
 80046f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004702:	b25b      	sxtb	r3, r3
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d103      	bne.n	8004712 <xQueueGenericSend+0x18a>
 800470a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004712:	f001 fe93 	bl	800643c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004716:	1d3a      	adds	r2, r7, #4
 8004718:	f107 0314 	add.w	r3, r7, #20
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f001 f9b8 	bl	8005a94 <xTaskCheckForTimeOut>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d124      	bne.n	8004774 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800472a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800472c:	f000 fce0 	bl	80050f0 <prvIsQueueFull>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d018      	beq.n	8004768 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	3310      	adds	r3, #16
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f001 f908 	bl	8005954 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004744:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004746:	f000 fc6b 	bl	8005020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800474a:	f000 ff47 	bl	80055dc <xTaskResumeAll>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	f47f af7c 	bne.w	800464e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004756:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <xQueueGenericSend+0x200>)
 8004758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	e772      	b.n	800464e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800476a:	f000 fc59 	bl	8005020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800476e:	f000 ff35 	bl	80055dc <xTaskResumeAll>
 8004772:	e76c      	b.n	800464e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004776:	f000 fc53 	bl	8005020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800477a:	f000 ff2f 	bl	80055dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800477e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004780:	4618      	mov	r0, r3
 8004782:	3738      	adds	r7, #56	@ 0x38
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b090      	sub	sp, #64	@ 0x40
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800479e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d103      	bne.n	80047ca <xQueueGenericSendFromISR+0x3e>
 80047c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <xQueueGenericSendFromISR+0x42>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <xQueueGenericSendFromISR+0x44>
 80047ce:	2300      	movs	r3, #0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d103      	bne.n	80047fa <xQueueGenericSendFromISR+0x6e>
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <xQueueGenericSendFromISR+0x72>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <xQueueGenericSendFromISR+0x74>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	623b      	str	r3, [r7, #32]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800481c:	f001 febc 	bl	8006598 <vPortValidateInterruptPriority>
	__asm volatile
 8004820:	f3ef 8211 	mrs	r2, BASEPRI
 8004824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	61fa      	str	r2, [r7, #28]
 8004836:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004838:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800483a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800483c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004844:	429a      	cmp	r2, r3
 8004846:	d302      	bcc.n	800484e <xQueueGenericSendFromISR+0xc2>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d12f      	bne.n	80048ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800484e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004850:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004854:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004864:	f000 fb4c 	bl	8004f00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004868:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d112      	bne.n	8004898 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	d016      	beq.n	80048a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800487a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487c:	3324      	adds	r3, #36	@ 0x24
 800487e:	4618      	mov	r0, r3
 8004880:	f001 f88e 	bl	80059a0 <xTaskRemoveFromEventList>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00e      	beq.n	80048a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e007      	b.n	80048a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004898:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800489c:	3301      	adds	r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	b25a      	sxtb	r2, r3
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80048a8:	2301      	movs	r3, #1
 80048aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80048ac:	e001      	b.n	80048b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b4:	617b      	str	r3, [r7, #20]
	__asm volatile
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f383 8811 	msr	BASEPRI, r3
}
 80048bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3740      	adds	r7, #64	@ 0x40
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08e      	sub	sp, #56	@ 0x38
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	623b      	str	r3, [r7, #32]
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	e7fd      	b.n	80048f0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	61fb      	str	r3, [r7, #28]
}
 800490e:	bf00      	nop
 8004910:	bf00      	nop
 8004912:	e7fd      	b.n	8004910 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <xQueueGiveFromISR+0x5c>
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <xQueueGiveFromISR+0x60>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <xQueueGiveFromISR+0x62>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	61bb      	str	r3, [r7, #24]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004946:	f001 fe27 	bl	8006598 <vPortValidateInterruptPriority>
	__asm volatile
 800494a:	f3ef 8211 	mrs	r2, BASEPRI
 800494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	617a      	str	r2, [r7, #20]
 8004960:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004962:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004964:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004972:	429a      	cmp	r2, r3
 8004974:	d22b      	bcs.n	80049ce <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800497c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004988:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d112      	bne.n	80049b8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	3324      	adds	r3, #36	@ 0x24
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fffe 	bl	80059a0 <xTaskRemoveFromEventList>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00e      	beq.n	80049c8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	e007      	b.n	80049c8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049bc:	3301      	adds	r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	b25a      	sxtb	r2, r3
 80049c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80049c8:	2301      	movs	r3, #1
 80049ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80049cc:	e001      	b.n	80049d2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f383 8811 	msr	BASEPRI, r3
}
 80049dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3738      	adds	r7, #56	@ 0x38
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08c      	sub	sp, #48	@ 0x30
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <xQueueReceive+0x32>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	623b      	str	r3, [r7, #32]
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	e7fd      	b.n	8004a16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d103      	bne.n	8004a28 <xQueueReceive+0x40>
 8004a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <xQueueReceive+0x44>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <xQueueReceive+0x46>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <xQueueReceive+0x62>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	61fb      	str	r3, [r7, #28]
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a4a:	f001 f96f 	bl	8005d2c <xTaskGetSchedulerState>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <xQueueReceive+0x72>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <xQueueReceive+0x76>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <xQueueReceive+0x78>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <xQueueReceive+0x94>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	61bb      	str	r3, [r7, #24]
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a7c:	f001 fcac 	bl	80063d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01f      	beq.n	8004acc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a90:	f000 faa0 	bl	8004fd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	1e5a      	subs	r2, r3, #1
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00f      	beq.n	8004ac4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa6:	3310      	adds	r3, #16
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 ff79 	bl	80059a0 <xTaskRemoveFromEventList>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ba8 <xQueueReceive+0x1c0>)
 8004ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ac4:	f001 fcba 	bl	800643c <vPortExitCritical>
				return pdPASS;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e069      	b.n	8004ba0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ad2:	f001 fcb3 	bl	800643c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e062      	b.n	8004ba0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ae0:	f107 0310 	add.w	r3, r7, #16
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 ffbf 	bl	8005a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004aea:	2301      	movs	r3, #1
 8004aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aee:	f001 fca5 	bl	800643c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004af2:	f000 fd65 	bl	80055c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004af6:	f001 fc6f 	bl	80063d8 <vPortEnterCritical>
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b00:	b25b      	sxtb	r3, r3
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b06:	d103      	bne.n	8004b10 <xQueueReceive+0x128>
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b16:	b25b      	sxtb	r3, r3
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d103      	bne.n	8004b26 <xQueueReceive+0x13e>
 8004b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b26:	f001 fc89 	bl	800643c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b2a:	1d3a      	adds	r2, r7, #4
 8004b2c:	f107 0310 	add.w	r3, r7, #16
 8004b30:	4611      	mov	r1, r2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 ffae 	bl	8005a94 <xTaskCheckForTimeOut>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d123      	bne.n	8004b86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b40:	f000 fac0 	bl	80050c4 <prvIsQueueEmpty>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d017      	beq.n	8004b7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4c:	3324      	adds	r3, #36	@ 0x24
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4611      	mov	r1, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fefe 	bl	8005954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b5a:	f000 fa61 	bl	8005020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b5e:	f000 fd3d 	bl	80055dc <xTaskResumeAll>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d189      	bne.n	8004a7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004b68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba8 <xQueueReceive+0x1c0>)
 8004b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	e780      	b.n	8004a7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b7c:	f000 fa50 	bl	8005020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b80:	f000 fd2c 	bl	80055dc <xTaskResumeAll>
 8004b84:	e77a      	b.n	8004a7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b88:	f000 fa4a 	bl	8005020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b8c:	f000 fd26 	bl	80055dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b92:	f000 fa97 	bl	80050c4 <prvIsQueueEmpty>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f43f af6f 	beq.w	8004a7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3730      	adds	r7, #48	@ 0x30
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08e      	sub	sp, #56	@ 0x38
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10b      	bne.n	8004be0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	623b      	str	r3, [r7, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	bf00      	nop
 8004bde:	e7fd      	b.n	8004bdc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00b      	beq.n	8004c00 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	61fb      	str	r3, [r7, #28]
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	e7fd      	b.n	8004bfc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c00:	f001 f894 	bl	8005d2c <xTaskGetSchedulerState>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d102      	bne.n	8004c10 <xQueueSemaphoreTake+0x64>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <xQueueSemaphoreTake+0x68>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <xQueueSemaphoreTake+0x6a>
 8004c14:	2300      	movs	r3, #0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	61bb      	str	r3, [r7, #24]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c32:	f001 fbd1 	bl	80063d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d024      	beq.n	8004c8c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	1e5a      	subs	r2, r3, #1
 8004c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c48:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004c52:	f001 fa17 	bl	8006084 <pvTaskIncrementMutexHeldCount>
 8004c56:	4602      	mov	r2, r0
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00f      	beq.n	8004c84 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c66:	3310      	adds	r3, #16
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fe99 	bl	80059a0 <xTaskRemoveFromEventList>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c74:	4b54      	ldr	r3, [pc, #336]	@ (8004dc8 <xQueueSemaphoreTake+0x21c>)
 8004c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c84:	f001 fbda 	bl	800643c <vPortExitCritical>
				return pdPASS;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e098      	b.n	8004dbe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d112      	bne.n	8004cb8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	617b      	str	r3, [r7, #20]
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004cb0:	f001 fbc4 	bl	800643c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e082      	b.n	8004dbe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cbe:	f107 030c 	add.w	r3, r7, #12
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fed0 	bl	8005a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ccc:	f001 fbb6 	bl	800643c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cd0:	f000 fc76 	bl	80055c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cd4:	f001 fb80 	bl	80063d8 <vPortEnterCritical>
 8004cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cde:	b25b      	sxtb	r3, r3
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d103      	bne.n	8004cee <xQueueSemaphoreTake+0x142>
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cf4:	b25b      	sxtb	r3, r3
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d103      	bne.n	8004d04 <xQueueSemaphoreTake+0x158>
 8004cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d04:	f001 fb9a 	bl	800643c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d08:	463a      	mov	r2, r7
 8004d0a:	f107 030c 	add.w	r3, r7, #12
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 febf 	bl	8005a94 <xTaskCheckForTimeOut>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d132      	bne.n	8004d82 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d1e:	f000 f9d1 	bl	80050c4 <prvIsQueueEmpty>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d026      	beq.n	8004d76 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004d30:	f001 fb52 	bl	80063d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 f815 	bl	8005d68 <xTaskPriorityInherit>
 8004d3e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004d40:	f001 fb7c 	bl	800643c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d46:	3324      	adds	r3, #36	@ 0x24
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fe01 	bl	8005954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d54:	f000 f964 	bl	8005020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d58:	f000 fc40 	bl	80055dc <xTaskResumeAll>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f47f af67 	bne.w	8004c32 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004d64:	4b18      	ldr	r3, [pc, #96]	@ (8004dc8 <xQueueSemaphoreTake+0x21c>)
 8004d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	e75d      	b.n	8004c32 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004d76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d78:	f000 f952 	bl	8005020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d7c:	f000 fc2e 	bl	80055dc <xTaskResumeAll>
 8004d80:	e757      	b.n	8004c32 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004d82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d84:	f000 f94c 	bl	8005020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d88:	f000 fc28 	bl	80055dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d8e:	f000 f999 	bl	80050c4 <prvIsQueueEmpty>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f43f af4c 	beq.w	8004c32 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00d      	beq.n	8004dbc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004da0:	f001 fb1a 	bl	80063d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004da4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004da6:	f000 f893 	bl	8004ed0 <prvGetDisinheritPriorityAfterTimeout>
 8004daa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 f8d6 	bl	8005f64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004db8:	f001 fb40 	bl	800643c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3738      	adds	r7, #56	@ 0x38
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08e      	sub	sp, #56	@ 0x38
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	623b      	str	r3, [r7, #32]
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	e7fd      	b.n	8004df6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <xQueueReceiveFromISR+0x3c>
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <xQueueReceiveFromISR+0x40>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <xQueueReceiveFromISR+0x42>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	61fb      	str	r3, [r7, #28]
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	e7fd      	b.n	8004e26 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e2a:	f001 fbb5 	bl	8006598 <vPortValidateInterruptPriority>
	__asm volatile
 8004e2e:	f3ef 8211 	mrs	r2, BASEPRI
 8004e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	61ba      	str	r2, [r7, #24]
 8004e44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004e46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d02f      	beq.n	8004eb6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e64:	f000 f8b6 	bl	8004fd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	1e5a      	subs	r2, r3, #1
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004e70:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d112      	bne.n	8004ea0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d016      	beq.n	8004eb0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e84:	3310      	adds	r3, #16
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fd8a 	bl	80059a0 <xTaskRemoveFromEventList>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00e      	beq.n	8004eb0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00b      	beq.n	8004eb0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e007      	b.n	8004eb0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	b25a      	sxtb	r2, r3
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eb4:	e001      	b.n	8004eba <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f383 8811 	msr	BASEPRI, r3
}
 8004ec4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3738      	adds	r7, #56	@ 0x38
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d006      	beq.n	8004eee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f1c3 0307 	rsb	r3, r3, #7
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e001      	b.n	8004ef2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
	}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10d      	bne.n	8004f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d14d      	bne.n	8004fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 ff92 	bl	8005e54 <xTaskPriorityDisinherit>
 8004f30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	e043      	b.n	8004fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d119      	bne.n	8004f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6858      	ldr	r0, [r3, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	f001 fec6 	bl	8006cdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	441a      	add	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d32b      	bcc.n	8004fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	605a      	str	r2, [r3, #4]
 8004f72:	e026      	b.n	8004fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	68d8      	ldr	r0, [r3, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	f001 feac 	bl	8006cdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	441a      	add	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d207      	bcs.n	8004fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	425b      	negs	r3, r3
 8004faa:	441a      	add	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d105      	bne.n	8004fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004fca:	697b      	ldr	r3, [r7, #20]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d018      	beq.n	8005018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	441a      	add	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d303      	bcc.n	8005008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68d9      	ldr	r1, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	461a      	mov	r2, r3
 8005012:	6838      	ldr	r0, [r7, #0]
 8005014:	f001 fe62 	bl	8006cdc <memcpy>
	}
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005028:	f001 f9d6 	bl	80063d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005034:	e011      	b.n	800505a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503a:	2b00      	cmp	r3, #0
 800503c:	d012      	beq.n	8005064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3324      	adds	r3, #36	@ 0x24
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fcac 	bl	80059a0 <xTaskRemoveFromEventList>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800504e:	f000 fd85 	bl	8005b5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	3b01      	subs	r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800505a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505e:	2b00      	cmp	r3, #0
 8005060:	dce9      	bgt.n	8005036 <prvUnlockQueue+0x16>
 8005062:	e000      	b.n	8005066 <prvUnlockQueue+0x46>
					break;
 8005064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	22ff      	movs	r2, #255	@ 0xff
 800506a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800506e:	f001 f9e5 	bl	800643c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005072:	f001 f9b1 	bl	80063d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800507c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800507e:	e011      	b.n	80050a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d012      	beq.n	80050ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3310      	adds	r3, #16
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fc87 	bl	80059a0 <xTaskRemoveFromEventList>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005098:	f000 fd60 	bl	8005b5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800509c:	7bbb      	ldrb	r3, [r7, #14]
 800509e:	3b01      	subs	r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dce9      	bgt.n	8005080 <prvUnlockQueue+0x60>
 80050ac:	e000      	b.n	80050b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	22ff      	movs	r2, #255	@ 0xff
 80050b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80050b8:	f001 f9c0 	bl	800643c <vPortExitCritical>
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050cc:	f001 f984 	bl	80063d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050d8:	2301      	movs	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e001      	b.n	80050e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050e2:	f001 f9ab 	bl	800643c <vPortExitCritical>

	return xReturn;
 80050e6:	68fb      	ldr	r3, [r7, #12]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050f8:	f001 f96e 	bl	80063d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005104:	429a      	cmp	r2, r3
 8005106:	d102      	bne.n	800510e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005108:	2301      	movs	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e001      	b.n	8005112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005112:	f001 f993 	bl	800643c <vPortExitCritical>

	return xReturn;
 8005116:	68fb      	ldr	r3, [r7, #12]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08e      	sub	sp, #56	@ 0x38
 8005124:	af04      	add	r7, sp, #16
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800512e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	623b      	str	r3, [r7, #32]
}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	e7fd      	b.n	8005148 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800514c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	61fb      	str	r3, [r7, #28]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800516a:	23a0      	movs	r3, #160	@ 0xa0
 800516c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2ba0      	cmp	r3, #160	@ 0xa0
 8005172:	d00b      	beq.n	800518c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	61bb      	str	r3, [r7, #24]
}
 8005186:	bf00      	nop
 8005188:	bf00      	nop
 800518a:	e7fd      	b.n	8005188 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800518c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800518e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01e      	beq.n	80051d2 <xTaskCreateStatic+0xb2>
 8005194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01b      	beq.n	80051d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800519a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051ac:	2300      	movs	r3, #0
 80051ae:	9303      	str	r3, [sp, #12]
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b2:	9302      	str	r3, [sp, #8]
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f851 	bl	800526c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051cc:	f000 f8ee 	bl	80053ac <prvAddNewTaskToReadyList>
 80051d0:	e001      	b.n	80051d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051d6:	697b      	ldr	r3, [r7, #20]
	}
 80051d8:	4618      	mov	r0, r3
 80051da:	3728      	adds	r7, #40	@ 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	@ 0x30
 80051e4:	af04      	add	r7, sp, #16
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 fa11 	bl	800661c <pvPortMalloc>
 80051fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00e      	beq.n	8005220 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005202:	20a0      	movs	r0, #160	@ 0xa0
 8005204:	f001 fa0a 	bl	800661c <pvPortMalloc>
 8005208:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	631a      	str	r2, [r3, #48]	@ 0x30
 8005216:	e005      	b.n	8005224 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005218:	6978      	ldr	r0, [r7, #20]
 800521a:	f001 facd 	bl	80067b8 <vPortFree>
 800521e:	e001      	b.n	8005224 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d017      	beq.n	800525a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	2300      	movs	r3, #0
 8005236:	9303      	str	r3, [sp, #12]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	9302      	str	r3, [sp, #8]
 800523c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f80f 	bl	800526c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800524e:	69f8      	ldr	r0, [r7, #28]
 8005250:	f000 f8ac 	bl	80053ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005254:	2301      	movs	r3, #1
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	e002      	b.n	8005260 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800525a:	f04f 33ff 	mov.w	r3, #4294967295
 800525e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005260:	69bb      	ldr	r3, [r7, #24]
	}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005284:	3b01      	subs	r3, #1
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f023 0307 	bic.w	r3, r3, #7
 8005292:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	617b      	str	r3, [r7, #20]
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	e7fd      	b.n	80052b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01f      	beq.n	80052fc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052bc:	2300      	movs	r3, #0
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	e012      	b.n	80052e8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	7819      	ldrb	r1, [r3, #0]
 80052ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	3334      	adds	r3, #52	@ 0x34
 80052d2:	460a      	mov	r2, r1
 80052d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d006      	beq.n	80052f0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3301      	adds	r3, #1
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	d9e9      	bls.n	80052c2 <prvInitialiseNewTask+0x56>
 80052ee:	e000      	b.n	80052f2 <prvInitialiseNewTask+0x86>
			{
				break;
 80052f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052fa:	e003      	b.n	8005304 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005306:	2b06      	cmp	r3, #6
 8005308:	d901      	bls.n	800530e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800530a:	2306      	movs	r3, #6
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005312:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005316:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005318:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	2200      	movs	r2, #0
 800531e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	3304      	adds	r3, #4
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe ff0c 	bl	8004142 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	3318      	adds	r3, #24
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe ff07 	bl	8004142 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005338:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533c:	f1c3 0207 	rsb	r2, r3, #7
 8005340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005342:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005348:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534c:	2200      	movs	r2, #0
 800534e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	2200      	movs	r2, #0
 8005356:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	334c      	adds	r3, #76	@ 0x4c
 800535e:	224c      	movs	r2, #76	@ 0x4c
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f001 fc18 	bl	8006b98 <memset>
 8005368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536a:	4a0d      	ldr	r2, [pc, #52]	@ (80053a0 <prvInitialiseNewTask+0x134>)
 800536c:	651a      	str	r2, [r3, #80]	@ 0x50
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	4a0c      	ldr	r2, [pc, #48]	@ (80053a4 <prvInitialiseNewTask+0x138>)
 8005372:	655a      	str	r2, [r3, #84]	@ 0x54
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	4a0c      	ldr	r2, [pc, #48]	@ (80053a8 <prvInitialiseNewTask+0x13c>)
 8005378:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	69b8      	ldr	r0, [r7, #24]
 8005380:	f000 fefa 	bl	8006178 <pxPortInitialiseStack>
 8005384:	4602      	mov	r2, r0
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005396:	bf00      	nop
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	2000425c 	.word	0x2000425c
 80053a4:	200042c4 	.word	0x200042c4
 80053a8:	2000432c 	.word	0x2000432c

080053ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053b4:	f001 f810 	bl	80063d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005464 <prvAddNewTaskToReadyList+0xb8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3301      	adds	r3, #1
 80053be:	4a29      	ldr	r2, [pc, #164]	@ (8005464 <prvAddNewTaskToReadyList+0xb8>)
 80053c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053c2:	4b29      	ldr	r3, [pc, #164]	@ (8005468 <prvAddNewTaskToReadyList+0xbc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053ca:	4a27      	ldr	r2, [pc, #156]	@ (8005468 <prvAddNewTaskToReadyList+0xbc>)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053d0:	4b24      	ldr	r3, [pc, #144]	@ (8005464 <prvAddNewTaskToReadyList+0xb8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d110      	bne.n	80053fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053d8:	f000 fbe4 	bl	8005ba4 <prvInitialiseTaskLists>
 80053dc:	e00d      	b.n	80053fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053de:	4b23      	ldr	r3, [pc, #140]	@ (800546c <prvAddNewTaskToReadyList+0xc0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053e6:	4b20      	ldr	r3, [pc, #128]	@ (8005468 <prvAddNewTaskToReadyList+0xbc>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d802      	bhi.n	80053fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005468 <prvAddNewTaskToReadyList+0xbc>)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005470 <prvAddNewTaskToReadyList+0xc4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3301      	adds	r3, #1
 8005400:	4a1b      	ldr	r2, [pc, #108]	@ (8005470 <prvAddNewTaskToReadyList+0xc4>)
 8005402:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	2201      	movs	r2, #1
 800540a:	409a      	lsls	r2, r3
 800540c:	4b19      	ldr	r3, [pc, #100]	@ (8005474 <prvAddNewTaskToReadyList+0xc8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4313      	orrs	r3, r2
 8005412:	4a18      	ldr	r2, [pc, #96]	@ (8005474 <prvAddNewTaskToReadyList+0xc8>)
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800541a:	4613      	mov	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4a15      	ldr	r2, [pc, #84]	@ (8005478 <prvAddNewTaskToReadyList+0xcc>)
 8005424:	441a      	add	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f7fe fe95 	bl	800415c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005432:	f001 f803 	bl	800643c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005436:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <prvAddNewTaskToReadyList+0xc0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00e      	beq.n	800545c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800543e:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <prvAddNewTaskToReadyList+0xbc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005448:	429a      	cmp	r2, r3
 800544a:	d207      	bcs.n	800545c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800544c:	4b0b      	ldr	r3, [pc, #44]	@ (800547c <prvAddNewTaskToReadyList+0xd0>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20000600 	.word	0x20000600
 8005468:	20000500 	.word	0x20000500
 800546c:	2000060c 	.word	0x2000060c
 8005470:	2000061c 	.word	0x2000061c
 8005474:	20000608 	.word	0x20000608
 8005478:	20000504 	.word	0x20000504
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d018      	beq.n	80054c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005492:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <vTaskDelay+0x64>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <vTaskDelay+0x32>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	60bb      	str	r3, [r7, #8]
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	e7fd      	b.n	80054ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054b2:	f000 f885 	bl	80055c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054b6:	2100      	movs	r1, #0
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fdf7 	bl	80060ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054be:	f000 f88d 	bl	80055dc <xTaskResumeAll>
 80054c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d107      	bne.n	80054da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80054ca:	4b07      	ldr	r3, [pc, #28]	@ (80054e8 <vTaskDelay+0x68>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000628 	.word	0x20000628
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	@ 0x28
 80054f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054fa:	463a      	mov	r2, r7
 80054fc:	1d39      	adds	r1, r7, #4
 80054fe:	f107 0308 	add.w	r3, r7, #8
 8005502:	4618      	mov	r0, r3
 8005504:	f7fb f852 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	9202      	str	r2, [sp, #8]
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	2300      	movs	r3, #0
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2300      	movs	r3, #0
 8005518:	460a      	mov	r2, r1
 800551a:	4921      	ldr	r1, [pc, #132]	@ (80055a0 <vTaskStartScheduler+0xb4>)
 800551c:	4821      	ldr	r0, [pc, #132]	@ (80055a4 <vTaskStartScheduler+0xb8>)
 800551e:	f7ff fdff 	bl	8005120 <xTaskCreateStatic>
 8005522:	4603      	mov	r3, r0
 8005524:	4a20      	ldr	r2, [pc, #128]	@ (80055a8 <vTaskStartScheduler+0xbc>)
 8005526:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005528:	4b1f      	ldr	r3, [pc, #124]	@ (80055a8 <vTaskStartScheduler+0xbc>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005530:	2301      	movs	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e001      	b.n	800553a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d11b      	bne.n	8005578 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	613b      	str	r3, [r7, #16]
}
 8005552:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005554:	4b15      	ldr	r3, [pc, #84]	@ (80055ac <vTaskStartScheduler+0xc0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	334c      	adds	r3, #76	@ 0x4c
 800555a:	4a15      	ldr	r2, [pc, #84]	@ (80055b0 <vTaskStartScheduler+0xc4>)
 800555c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800555e:	4b15      	ldr	r3, [pc, #84]	@ (80055b4 <vTaskStartScheduler+0xc8>)
 8005560:	f04f 32ff 	mov.w	r2, #4294967295
 8005564:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005566:	4b14      	ldr	r3, [pc, #80]	@ (80055b8 <vTaskStartScheduler+0xcc>)
 8005568:	2201      	movs	r2, #1
 800556a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800556c:	4b13      	ldr	r3, [pc, #76]	@ (80055bc <vTaskStartScheduler+0xd0>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005572:	f000 fe8d 	bl	8006290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005576:	e00f      	b.n	8005598 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557e:	d10b      	bne.n	8005598 <vTaskStartScheduler+0xac>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	60fb      	str	r3, [r7, #12]
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	e7fd      	b.n	8005594 <vTaskStartScheduler+0xa8>
}
 8005598:	bf00      	nop
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	080074f4 	.word	0x080074f4
 80055a4:	08005b75 	.word	0x08005b75
 80055a8:	20000624 	.word	0x20000624
 80055ac:	20000500 	.word	0x20000500
 80055b0:	200000b0 	.word	0x200000b0
 80055b4:	20000620 	.word	0x20000620
 80055b8:	2000060c 	.word	0x2000060c
 80055bc:	20000604 	.word	0x20000604

080055c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055c4:	4b04      	ldr	r3, [pc, #16]	@ (80055d8 <vTaskSuspendAll+0x18>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	4a03      	ldr	r2, [pc, #12]	@ (80055d8 <vTaskSuspendAll+0x18>)
 80055cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055ce:	bf00      	nop
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	20000628 	.word	0x20000628

080055dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055ea:	4b42      	ldr	r3, [pc, #264]	@ (80056f4 <xTaskResumeAll+0x118>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10b      	bne.n	800560a <xTaskResumeAll+0x2e>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	603b      	str	r3, [r7, #0]
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop
 8005608:	e7fd      	b.n	8005606 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800560a:	f000 fee5 	bl	80063d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800560e:	4b39      	ldr	r3, [pc, #228]	@ (80056f4 <xTaskResumeAll+0x118>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3b01      	subs	r3, #1
 8005614:	4a37      	ldr	r2, [pc, #220]	@ (80056f4 <xTaskResumeAll+0x118>)
 8005616:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005618:	4b36      	ldr	r3, [pc, #216]	@ (80056f4 <xTaskResumeAll+0x118>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d161      	bne.n	80056e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005620:	4b35      	ldr	r3, [pc, #212]	@ (80056f8 <xTaskResumeAll+0x11c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d05d      	beq.n	80056e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005628:	e02e      	b.n	8005688 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800562a:	4b34      	ldr	r3, [pc, #208]	@ (80056fc <xTaskResumeAll+0x120>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3318      	adds	r3, #24
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe fded 	bl	8004216 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3304      	adds	r3, #4
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fde8 	bl	8004216 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564a:	2201      	movs	r2, #1
 800564c:	409a      	lsls	r2, r3
 800564e:	4b2c      	ldr	r3, [pc, #176]	@ (8005700 <xTaskResumeAll+0x124>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4313      	orrs	r3, r2
 8005654:	4a2a      	ldr	r2, [pc, #168]	@ (8005700 <xTaskResumeAll+0x124>)
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4a27      	ldr	r2, [pc, #156]	@ (8005704 <xTaskResumeAll+0x128>)
 8005666:	441a      	add	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3304      	adds	r3, #4
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f7fe fd74 	bl	800415c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005678:	4b23      	ldr	r3, [pc, #140]	@ (8005708 <xTaskResumeAll+0x12c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	429a      	cmp	r2, r3
 8005680:	d302      	bcc.n	8005688 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005682:	4b22      	ldr	r3, [pc, #136]	@ (800570c <xTaskResumeAll+0x130>)
 8005684:	2201      	movs	r2, #1
 8005686:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005688:	4b1c      	ldr	r3, [pc, #112]	@ (80056fc <xTaskResumeAll+0x120>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1cc      	bne.n	800562a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005696:	f000 fb29 	bl	8005cec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800569a:	4b1d      	ldr	r3, [pc, #116]	@ (8005710 <xTaskResumeAll+0x134>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d010      	beq.n	80056c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056a6:	f000 f837 	bl	8005718 <xTaskIncrementTick>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056b0:	4b16      	ldr	r3, [pc, #88]	@ (800570c <xTaskResumeAll+0x130>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f1      	bne.n	80056a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056c2:	4b13      	ldr	r3, [pc, #76]	@ (8005710 <xTaskResumeAll+0x134>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056c8:	4b10      	ldr	r3, [pc, #64]	@ (800570c <xTaskResumeAll+0x130>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005714 <xTaskResumeAll+0x138>)
 80056d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056e4:	f000 feaa 	bl	800643c <vPortExitCritical>

	return xAlreadyYielded;
 80056e8:	68bb      	ldr	r3, [r7, #8]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000628 	.word	0x20000628
 80056f8:	20000600 	.word	0x20000600
 80056fc:	200005c0 	.word	0x200005c0
 8005700:	20000608 	.word	0x20000608
 8005704:	20000504 	.word	0x20000504
 8005708:	20000500 	.word	0x20000500
 800570c:	20000614 	.word	0x20000614
 8005710:	20000610 	.word	0x20000610
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005722:	4b4f      	ldr	r3, [pc, #316]	@ (8005860 <xTaskIncrementTick+0x148>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f040 808f 	bne.w	800584a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800572c:	4b4d      	ldr	r3, [pc, #308]	@ (8005864 <xTaskIncrementTick+0x14c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3301      	adds	r3, #1
 8005732:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005734:	4a4b      	ldr	r2, [pc, #300]	@ (8005864 <xTaskIncrementTick+0x14c>)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d121      	bne.n	8005784 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005740:	4b49      	ldr	r3, [pc, #292]	@ (8005868 <xTaskIncrementTick+0x150>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <xTaskIncrementTick+0x4a>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	603b      	str	r3, [r7, #0]
}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	e7fd      	b.n	800575e <xTaskIncrementTick+0x46>
 8005762:	4b41      	ldr	r3, [pc, #260]	@ (8005868 <xTaskIncrementTick+0x150>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	4b40      	ldr	r3, [pc, #256]	@ (800586c <xTaskIncrementTick+0x154>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a3e      	ldr	r2, [pc, #248]	@ (8005868 <xTaskIncrementTick+0x150>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	4a3e      	ldr	r2, [pc, #248]	@ (800586c <xTaskIncrementTick+0x154>)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	4b3e      	ldr	r3, [pc, #248]	@ (8005870 <xTaskIncrementTick+0x158>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	4a3c      	ldr	r2, [pc, #240]	@ (8005870 <xTaskIncrementTick+0x158>)
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	f000 fab4 	bl	8005cec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005784:	4b3b      	ldr	r3, [pc, #236]	@ (8005874 <xTaskIncrementTick+0x15c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	429a      	cmp	r2, r3
 800578c:	d348      	bcc.n	8005820 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800578e:	4b36      	ldr	r3, [pc, #216]	@ (8005868 <xTaskIncrementTick+0x150>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005798:	4b36      	ldr	r3, [pc, #216]	@ (8005874 <xTaskIncrementTick+0x15c>)
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	601a      	str	r2, [r3, #0]
					break;
 80057a0:	e03e      	b.n	8005820 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a2:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <xTaskIncrementTick+0x150>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d203      	bcs.n	80057c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005874 <xTaskIncrementTick+0x15c>)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057c0:	e02e      	b.n	8005820 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fd25 	bl	8004216 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d004      	beq.n	80057de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	3318      	adds	r3, #24
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fe fd1c 	bl	8004216 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e2:	2201      	movs	r2, #1
 80057e4:	409a      	lsls	r2, r3
 80057e6:	4b24      	ldr	r3, [pc, #144]	@ (8005878 <xTaskIncrementTick+0x160>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	4a22      	ldr	r2, [pc, #136]	@ (8005878 <xTaskIncrementTick+0x160>)
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4a1f      	ldr	r2, [pc, #124]	@ (800587c <xTaskIncrementTick+0x164>)
 80057fe:	441a      	add	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7fe fca8 	bl	800415c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005810:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <xTaskIncrementTick+0x168>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005816:	429a      	cmp	r2, r3
 8005818:	d3b9      	bcc.n	800578e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800581a:	2301      	movs	r3, #1
 800581c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581e:	e7b6      	b.n	800578e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005820:	4b17      	ldr	r3, [pc, #92]	@ (8005880 <xTaskIncrementTick+0x168>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005826:	4915      	ldr	r1, [pc, #84]	@ (800587c <xTaskIncrementTick+0x164>)
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d901      	bls.n	800583c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005838:	2301      	movs	r3, #1
 800583a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800583c:	4b11      	ldr	r3, [pc, #68]	@ (8005884 <xTaskIncrementTick+0x16c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e004      	b.n	8005854 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800584a:	4b0f      	ldr	r3, [pc, #60]	@ (8005888 <xTaskIncrementTick+0x170>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	4a0d      	ldr	r2, [pc, #52]	@ (8005888 <xTaskIncrementTick+0x170>)
 8005852:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005854:	697b      	ldr	r3, [r7, #20]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000628 	.word	0x20000628
 8005864:	20000604 	.word	0x20000604
 8005868:	200005b8 	.word	0x200005b8
 800586c:	200005bc 	.word	0x200005bc
 8005870:	20000618 	.word	0x20000618
 8005874:	20000620 	.word	0x20000620
 8005878:	20000608 	.word	0x20000608
 800587c:	20000504 	.word	0x20000504
 8005880:	20000500 	.word	0x20000500
 8005884:	20000614 	.word	0x20000614
 8005888:	20000610 	.word	0x20000610

0800588c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005892:	4b2a      	ldr	r3, [pc, #168]	@ (800593c <vTaskSwitchContext+0xb0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800589a:	4b29      	ldr	r3, [pc, #164]	@ (8005940 <vTaskSwitchContext+0xb4>)
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058a0:	e045      	b.n	800592e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80058a2:	4b27      	ldr	r3, [pc, #156]	@ (8005940 <vTaskSwitchContext+0xb4>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a8:	4b26      	ldr	r3, [pc, #152]	@ (8005944 <vTaskSwitchContext+0xb8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	fab3 f383 	clz	r3, r3
 80058b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058b6:	7afb      	ldrb	r3, [r7, #11]
 80058b8:	f1c3 031f 	rsb	r3, r3, #31
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	4922      	ldr	r1, [pc, #136]	@ (8005948 <vTaskSwitchContext+0xbc>)
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <vTaskSwitchContext+0x5e>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	e7fd      	b.n	80058e6 <vTaskSwitchContext+0x5a>
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4a14      	ldr	r2, [pc, #80]	@ (8005948 <vTaskSwitchContext+0xbc>)
 80058f6:	4413      	add	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	3308      	adds	r3, #8
 800590c:	429a      	cmp	r2, r3
 800590e:	d104      	bne.n	800591a <vTaskSwitchContext+0x8e>
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a0a      	ldr	r2, [pc, #40]	@ (800594c <vTaskSwitchContext+0xc0>)
 8005922:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005924:	4b09      	ldr	r3, [pc, #36]	@ (800594c <vTaskSwitchContext+0xc0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	334c      	adds	r3, #76	@ 0x4c
 800592a:	4a09      	ldr	r2, [pc, #36]	@ (8005950 <vTaskSwitchContext+0xc4>)
 800592c:	6013      	str	r3, [r2, #0]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	20000628 	.word	0x20000628
 8005940:	20000614 	.word	0x20000614
 8005944:	20000608 	.word	0x20000608
 8005948:	20000504 	.word	0x20000504
 800594c:	20000500 	.word	0x20000500
 8005950:	200000b0 	.word	0x200000b0

08005954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10b      	bne.n	800597c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	60fb      	str	r3, [r7, #12]
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800597c:	4b07      	ldr	r3, [pc, #28]	@ (800599c <vTaskPlaceOnEventList+0x48>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3318      	adds	r3, #24
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fe fc0d 	bl	80041a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800598a:	2101      	movs	r1, #1
 800598c:	6838      	ldr	r0, [r7, #0]
 800598e:	f000 fb8d 	bl	80060ac <prvAddCurrentTaskToDelayedList>
}
 8005992:	bf00      	nop
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000500 	.word	0x20000500

080059a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60fb      	str	r3, [r7, #12]
}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	e7fd      	b.n	80059ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	3318      	adds	r3, #24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fc1f 	bl	8004216 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a50 <xTaskRemoveFromEventList+0xb0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d11c      	bne.n	8005a1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fe fc16 	bl	8004216 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	2201      	movs	r2, #1
 80059f0:	409a      	lsls	r2, r3
 80059f2:	4b18      	ldr	r3, [pc, #96]	@ (8005a54 <xTaskRemoveFromEventList+0xb4>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	4a16      	ldr	r2, [pc, #88]	@ (8005a54 <xTaskRemoveFromEventList+0xb4>)
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4a13      	ldr	r2, [pc, #76]	@ (8005a58 <xTaskRemoveFromEventList+0xb8>)
 8005a0a:	441a      	add	r2, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f7fe fba2 	bl	800415c <vListInsertEnd>
 8005a18:	e005      	b.n	8005a26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	3318      	adds	r3, #24
 8005a1e:	4619      	mov	r1, r3
 8005a20:	480e      	ldr	r0, [pc, #56]	@ (8005a5c <xTaskRemoveFromEventList+0xbc>)
 8005a22:	f7fe fb9b 	bl	800415c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a60 <xTaskRemoveFromEventList+0xc0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d905      	bls.n	8005a40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	@ (8005a64 <xTaskRemoveFromEventList+0xc4>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e001      	b.n	8005a44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a44:	697b      	ldr	r3, [r7, #20]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000628 	.word	0x20000628
 8005a54:	20000608 	.word	0x20000608
 8005a58:	20000504 	.word	0x20000504
 8005a5c:	200005c0 	.word	0x200005c0
 8005a60:	20000500 	.word	0x20000500
 8005a64:	20000614 	.word	0x20000614

08005a68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a70:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <vTaskInternalSetTimeOutState+0x24>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <vTaskInternalSetTimeOutState+0x28>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	605a      	str	r2, [r3, #4]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20000618 	.word	0x20000618
 8005a90:	20000604 	.word	0x20000604

08005a94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	613b      	str	r3, [r7, #16]
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	60fb      	str	r3, [r7, #12]
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	e7fd      	b.n	8005ad6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005ada:	f000 fc7d 	bl	80063d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ade:	4b1d      	ldr	r3, [pc, #116]	@ (8005b54 <xTaskCheckForTimeOut+0xc0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d102      	bne.n	8005afe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e023      	b.n	8005b46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b15      	ldr	r3, [pc, #84]	@ (8005b58 <xTaskCheckForTimeOut+0xc4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d007      	beq.n	8005b1a <xTaskCheckForTimeOut+0x86>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d302      	bcc.n	8005b1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	e015      	b.n	8005b46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d20b      	bcs.n	8005b3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	1ad2      	subs	r2, r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ff99 	bl	8005a68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e004      	b.n	8005b46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b42:	2301      	movs	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b46:	f000 fc79 	bl	800643c <vPortExitCritical>

	return xReturn;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3720      	adds	r7, #32
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20000604 	.word	0x20000604
 8005b58:	20000618 	.word	0x20000618

08005b5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b60:	4b03      	ldr	r3, [pc, #12]	@ (8005b70 <vTaskMissedYield+0x14>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
}
 8005b66:	bf00      	nop
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	20000614 	.word	0x20000614

08005b74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b7c:	f000 f852 	bl	8005c24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b80:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <prvIdleTask+0x28>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d9f9      	bls.n	8005b7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b88:	4b05      	ldr	r3, [pc, #20]	@ (8005ba0 <prvIdleTask+0x2c>)
 8005b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b98:	e7f0      	b.n	8005b7c <prvIdleTask+0x8>
 8005b9a:	bf00      	nop
 8005b9c:	20000504 	.word	0x20000504
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005baa:	2300      	movs	r3, #0
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	e00c      	b.n	8005bca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4a12      	ldr	r2, [pc, #72]	@ (8005c04 <prvInitialiseTaskLists+0x60>)
 8005bbc:	4413      	add	r3, r2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fa9f 	bl	8004102 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	607b      	str	r3, [r7, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d9ef      	bls.n	8005bb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bd0:	480d      	ldr	r0, [pc, #52]	@ (8005c08 <prvInitialiseTaskLists+0x64>)
 8005bd2:	f7fe fa96 	bl	8004102 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bd6:	480d      	ldr	r0, [pc, #52]	@ (8005c0c <prvInitialiseTaskLists+0x68>)
 8005bd8:	f7fe fa93 	bl	8004102 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bdc:	480c      	ldr	r0, [pc, #48]	@ (8005c10 <prvInitialiseTaskLists+0x6c>)
 8005bde:	f7fe fa90 	bl	8004102 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005be2:	480c      	ldr	r0, [pc, #48]	@ (8005c14 <prvInitialiseTaskLists+0x70>)
 8005be4:	f7fe fa8d 	bl	8004102 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005be8:	480b      	ldr	r0, [pc, #44]	@ (8005c18 <prvInitialiseTaskLists+0x74>)
 8005bea:	f7fe fa8a 	bl	8004102 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bee:	4b0b      	ldr	r3, [pc, #44]	@ (8005c1c <prvInitialiseTaskLists+0x78>)
 8005bf0:	4a05      	ldr	r2, [pc, #20]	@ (8005c08 <prvInitialiseTaskLists+0x64>)
 8005bf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <prvInitialiseTaskLists+0x7c>)
 8005bf6:	4a05      	ldr	r2, [pc, #20]	@ (8005c0c <prvInitialiseTaskLists+0x68>)
 8005bf8:	601a      	str	r2, [r3, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000504 	.word	0x20000504
 8005c08:	20000590 	.word	0x20000590
 8005c0c:	200005a4 	.word	0x200005a4
 8005c10:	200005c0 	.word	0x200005c0
 8005c14:	200005d4 	.word	0x200005d4
 8005c18:	200005ec 	.word	0x200005ec
 8005c1c:	200005b8 	.word	0x200005b8
 8005c20:	200005bc 	.word	0x200005bc

08005c24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c2a:	e019      	b.n	8005c60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c2c:	f000 fbd4 	bl	80063d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c30:	4b10      	ldr	r3, [pc, #64]	@ (8005c74 <prvCheckTasksWaitingTermination+0x50>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fe faea 	bl	8004216 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <prvCheckTasksWaitingTermination+0x54>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	4a0b      	ldr	r2, [pc, #44]	@ (8005c78 <prvCheckTasksWaitingTermination+0x54>)
 8005c4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <prvCheckTasksWaitingTermination+0x58>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	4a0a      	ldr	r2, [pc, #40]	@ (8005c7c <prvCheckTasksWaitingTermination+0x58>)
 8005c54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c56:	f000 fbf1 	bl	800643c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f810 	bl	8005c80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c60:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <prvCheckTasksWaitingTermination+0x58>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e1      	bne.n	8005c2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	200005d4 	.word	0x200005d4
 8005c78:	20000600 	.word	0x20000600
 8005c7c:	200005e8 	.word	0x200005e8

08005c80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	334c      	adds	r3, #76	@ 0x4c
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 ff8b 	bl	8006ba8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d108      	bne.n	8005cae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fd89 	bl	80067b8 <vPortFree>
				vPortFree( pxTCB );
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fd86 	bl	80067b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cac:	e019      	b.n	8005ce2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d103      	bne.n	8005cc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fd7d 	bl	80067b8 <vPortFree>
	}
 8005cbe:	e010      	b.n	8005ce2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d00b      	beq.n	8005ce2 <prvDeleteTCB+0x62>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	60fb      	str	r3, [r7, #12]
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	e7fd      	b.n	8005cde <prvDeleteTCB+0x5e>
	}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d24 <prvResetNextTaskUnblockTime+0x38>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d28 <prvResetNextTaskUnblockTime+0x3c>)
 8005cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005d02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d04:	e008      	b.n	8005d18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d06:	4b07      	ldr	r3, [pc, #28]	@ (8005d24 <prvResetNextTaskUnblockTime+0x38>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4a04      	ldr	r2, [pc, #16]	@ (8005d28 <prvResetNextTaskUnblockTime+0x3c>)
 8005d16:	6013      	str	r3, [r2, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	200005b8 	.word	0x200005b8
 8005d28:	20000620 	.word	0x20000620

08005d2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d32:	4b0b      	ldr	r3, [pc, #44]	@ (8005d60 <xTaskGetSchedulerState+0x34>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	607b      	str	r3, [r7, #4]
 8005d3e:	e008      	b.n	8005d52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d40:	4b08      	ldr	r3, [pc, #32]	@ (8005d64 <xTaskGetSchedulerState+0x38>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	e001      	b.n	8005d52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d52:	687b      	ldr	r3, [r7, #4]
	}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	2000060c 	.word	0x2000060c
 8005d64:	20000628 	.word	0x20000628

08005d68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d05e      	beq.n	8005e3c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d82:	4b31      	ldr	r3, [pc, #196]	@ (8005e48 <xTaskPriorityInherit+0xe0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d24e      	bcs.n	8005e2a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db06      	blt.n	8005da2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d94:	4b2c      	ldr	r3, [pc, #176]	@ (8005e48 <xTaskPriorityInherit+0xe0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9a:	f1c3 0207 	rsb	r2, r3, #7
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6959      	ldr	r1, [r3, #20]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4a26      	ldr	r2, [pc, #152]	@ (8005e4c <xTaskPriorityInherit+0xe4>)
 8005db4:	4413      	add	r3, r2
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d12f      	bne.n	8005e1a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fa29 	bl	8004216 <uxListRemove>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	2201      	movs	r2, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	43da      	mvns	r2, r3
 8005dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e50 <xTaskPriorityInherit+0xe8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e50 <xTaskPriorityInherit+0xe8>)
 8005dde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005de0:	4b19      	ldr	r3, [pc, #100]	@ (8005e48 <xTaskPriorityInherit+0xe0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	2201      	movs	r2, #1
 8005df0:	409a      	lsls	r2, r3
 8005df2:	4b17      	ldr	r3, [pc, #92]	@ (8005e50 <xTaskPriorityInherit+0xe8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	4a15      	ldr	r2, [pc, #84]	@ (8005e50 <xTaskPriorityInherit+0xe8>)
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4a10      	ldr	r2, [pc, #64]	@ (8005e4c <xTaskPriorityInherit+0xe4>)
 8005e0a:	441a      	add	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f7fe f9a2 	bl	800415c <vListInsertEnd>
 8005e18:	e004      	b.n	8005e24 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e48 <xTaskPriorityInherit+0xe0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e24:	2301      	movs	r3, #1
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	e008      	b.n	8005e3c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e2e:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <xTaskPriorityInherit+0xe0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d201      	bcs.n	8005e3c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
	}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000500 	.word	0x20000500
 8005e4c:	20000504 	.word	0x20000504
 8005e50:	20000608 	.word	0x20000608

08005e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d070      	beq.n	8005f4c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f58 <xTaskPriorityDisinherit+0x104>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d00b      	beq.n	8005e8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	60fb      	str	r3, [r7, #12]
}
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	e7fd      	b.n	8005e88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	60bb      	str	r3, [r7, #8]
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb0:	1e5a      	subs	r2, r3, #1
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d044      	beq.n	8005f4c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d140      	bne.n	8005f4c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe f9a1 	bl	8004216 <uxListRemove>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d115      	bne.n	8005f06 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ede:	491f      	ldr	r1, [pc, #124]	@ (8005f5c <xTaskPriorityDisinherit+0x108>)
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xTaskPriorityDisinherit+0xb2>
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43da      	mvns	r2, r3
 8005efc:	4b18      	ldr	r3, [pc, #96]	@ (8005f60 <xTaskPriorityDisinherit+0x10c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4013      	ands	r3, r2
 8005f02:	4a17      	ldr	r2, [pc, #92]	@ (8005f60 <xTaskPriorityDisinherit+0x10c>)
 8005f04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f12:	f1c3 0207 	rsb	r2, r3, #7
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	2201      	movs	r2, #1
 8005f20:	409a      	lsls	r2, r3
 8005f22:	4b0f      	ldr	r3, [pc, #60]	@ (8005f60 <xTaskPriorityDisinherit+0x10c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	4a0d      	ldr	r2, [pc, #52]	@ (8005f60 <xTaskPriorityDisinherit+0x10c>)
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4a08      	ldr	r2, [pc, #32]	@ (8005f5c <xTaskPriorityDisinherit+0x108>)
 8005f3a:	441a      	add	r2, r3
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4619      	mov	r1, r3
 8005f42:	4610      	mov	r0, r2
 8005f44:	f7fe f90a 	bl	800415c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f4c:	697b      	ldr	r3, [r7, #20]
	}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000500 	.word	0x20000500
 8005f5c:	20000504 	.word	0x20000504
 8005f60:	20000608 	.word	0x20000608

08005f64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f72:	2301      	movs	r3, #1
 8005f74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d079      	beq.n	8006070 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	60fb      	str	r3, [r7, #12]
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	e7fd      	b.n	8005f98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d902      	bls.n	8005fac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	e002      	b.n	8005fb2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d059      	beq.n	8006070 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d154      	bne.n	8006070 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8006078 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d10b      	bne.n	8005fe8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60bb      	str	r3, [r7, #8]
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	e7fd      	b.n	8005fe4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	db04      	blt.n	8006006 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f1c3 0207 	rsb	r2, r3, #7
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	6959      	ldr	r1, [r3, #20]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4a19      	ldr	r2, [pc, #100]	@ (800607c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006016:	4413      	add	r3, r2
 8006018:	4299      	cmp	r1, r3
 800601a:	d129      	bne.n	8006070 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	3304      	adds	r3, #4
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe f8f8 	bl	8004216 <uxListRemove>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	2201      	movs	r2, #1
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43da      	mvns	r2, r3
 8006038:	4b11      	ldr	r3, [pc, #68]	@ (8006080 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4013      	ands	r3, r2
 800603e:	4a10      	ldr	r2, [pc, #64]	@ (8006080 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006040:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006046:	2201      	movs	r2, #1
 8006048:	409a      	lsls	r2, r3
 800604a:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4313      	orrs	r3, r2
 8006050:	4a0b      	ldr	r2, [pc, #44]	@ (8006080 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4a06      	ldr	r2, [pc, #24]	@ (800607c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006062:	441a      	add	r2, r3
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	3304      	adds	r3, #4
 8006068:	4619      	mov	r1, r3
 800606a:	4610      	mov	r0, r2
 800606c:	f7fe f876 	bl	800415c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006070:	bf00      	nop
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000500 	.word	0x20000500
 800607c:	20000504 	.word	0x20000504
 8006080:	20000608 	.word	0x20000608

08006084 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006088:	4b07      	ldr	r3, [pc, #28]	@ (80060a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006090:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006096:	3201      	adds	r2, #1
 8006098:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800609a:	4b03      	ldr	r3, [pc, #12]	@ (80060a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800609c:	681b      	ldr	r3, [r3, #0]
	}
 800609e:	4618      	mov	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	20000500 	.word	0x20000500

080060ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060b6:	4b29      	ldr	r3, [pc, #164]	@ (800615c <prvAddCurrentTaskToDelayedList+0xb0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060bc:	4b28      	ldr	r3, [pc, #160]	@ (8006160 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3304      	adds	r3, #4
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe f8a7 	bl	8004216 <uxListRemove>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80060ce:	4b24      	ldr	r3, [pc, #144]	@ (8006160 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d4:	2201      	movs	r2, #1
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	43da      	mvns	r2, r3
 80060dc:	4b21      	ldr	r3, [pc, #132]	@ (8006164 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4013      	ands	r3, r2
 80060e2:	4a20      	ldr	r2, [pc, #128]	@ (8006164 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d10a      	bne.n	8006104 <prvAddCurrentTaskToDelayedList+0x58>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d007      	beq.n	8006104 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006160 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4619      	mov	r1, r3
 80060fc:	481a      	ldr	r0, [pc, #104]	@ (8006168 <prvAddCurrentTaskToDelayedList+0xbc>)
 80060fe:	f7fe f82d 	bl	800415c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006102:	e026      	b.n	8006152 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4413      	add	r3, r2
 800610a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800610c:	4b14      	ldr	r3, [pc, #80]	@ (8006160 <prvAddCurrentTaskToDelayedList+0xb4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	429a      	cmp	r2, r3
 800611a:	d209      	bcs.n	8006130 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800611c:	4b13      	ldr	r3, [pc, #76]	@ (800616c <prvAddCurrentTaskToDelayedList+0xc0>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	4b0f      	ldr	r3, [pc, #60]	@ (8006160 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3304      	adds	r3, #4
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f7fe f83b 	bl	80041a4 <vListInsert>
}
 800612e:	e010      	b.n	8006152 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006130:	4b0f      	ldr	r3, [pc, #60]	@ (8006170 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	4b0a      	ldr	r3, [pc, #40]	@ (8006160 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3304      	adds	r3, #4
 800613a:	4619      	mov	r1, r3
 800613c:	4610      	mov	r0, r2
 800613e:	f7fe f831 	bl	80041a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006142:	4b0c      	ldr	r3, [pc, #48]	@ (8006174 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	429a      	cmp	r2, r3
 800614a:	d202      	bcs.n	8006152 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800614c:	4a09      	ldr	r2, [pc, #36]	@ (8006174 <prvAddCurrentTaskToDelayedList+0xc8>)
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6013      	str	r3, [r2, #0]
}
 8006152:	bf00      	nop
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000604 	.word	0x20000604
 8006160:	20000500 	.word	0x20000500
 8006164:	20000608 	.word	0x20000608
 8006168:	200005ec 	.word	0x200005ec
 800616c:	200005bc 	.word	0x200005bc
 8006170:	200005b8 	.word	0x200005b8
 8006174:	20000620 	.word	0x20000620

08006178 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3b04      	subs	r3, #4
 8006188:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3b04      	subs	r3, #4
 8006196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f023 0201 	bic.w	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3b04      	subs	r3, #4
 80061a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061a8:	4a0c      	ldr	r2, [pc, #48]	@ (80061dc <pxPortInitialiseStack+0x64>)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3b14      	subs	r3, #20
 80061b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3b04      	subs	r3, #4
 80061be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f06f 0202 	mvn.w	r2, #2
 80061c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3b20      	subs	r3, #32
 80061cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061ce:	68fb      	ldr	r3, [r7, #12]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	080061e1 	.word	0x080061e1

080061e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061ea:	4b13      	ldr	r3, [pc, #76]	@ (8006238 <prvTaskExitError+0x58>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d00b      	beq.n	800620c <prvTaskExitError+0x2c>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	60fb      	str	r3, [r7, #12]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <prvTaskExitError+0x28>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60bb      	str	r3, [r7, #8]
}
 800621e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006220:	bf00      	nop
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0fc      	beq.n	8006222 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	200000ac 	.word	0x200000ac
 800623c:	00000000 	.word	0x00000000

08006240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006240:	4b07      	ldr	r3, [pc, #28]	@ (8006260 <pxCurrentTCBConst2>)
 8006242:	6819      	ldr	r1, [r3, #0]
 8006244:	6808      	ldr	r0, [r1, #0]
 8006246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624a:	f380 8809 	msr	PSP, r0
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f04f 0000 	mov.w	r0, #0
 8006256:	f380 8811 	msr	BASEPRI, r0
 800625a:	4770      	bx	lr
 800625c:	f3af 8000 	nop.w

08006260 <pxCurrentTCBConst2>:
 8006260:	20000500 	.word	0x20000500
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop

08006268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006268:	4808      	ldr	r0, [pc, #32]	@ (800628c <prvPortStartFirstTask+0x24>)
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	6800      	ldr	r0, [r0, #0]
 800626e:	f380 8808 	msr	MSP, r0
 8006272:	f04f 0000 	mov.w	r0, #0
 8006276:	f380 8814 	msr	CONTROL, r0
 800627a:	b662      	cpsie	i
 800627c:	b661      	cpsie	f
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	df00      	svc	0
 8006288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800628a:	bf00      	nop
 800628c:	e000ed08 	.word	0xe000ed08

08006290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006296:	4b47      	ldr	r3, [pc, #284]	@ (80063b4 <xPortStartScheduler+0x124>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a47      	ldr	r2, [pc, #284]	@ (80063b8 <xPortStartScheduler+0x128>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d10b      	bne.n	80062b8 <xPortStartScheduler+0x28>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	60fb      	str	r3, [r7, #12]
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062b8:	4b3e      	ldr	r3, [pc, #248]	@ (80063b4 <xPortStartScheduler+0x124>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a3f      	ldr	r2, [pc, #252]	@ (80063bc <xPortStartScheduler+0x12c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10b      	bne.n	80062da <xPortStartScheduler+0x4a>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	613b      	str	r3, [r7, #16]
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	e7fd      	b.n	80062d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062da:	4b39      	ldr	r3, [pc, #228]	@ (80063c0 <xPortStartScheduler+0x130>)
 80062dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	22ff      	movs	r2, #255	@ 0xff
 80062ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	4b31      	ldr	r3, [pc, #196]	@ (80063c4 <xPortStartScheduler+0x134>)
 8006300:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006302:	4b31      	ldr	r3, [pc, #196]	@ (80063c8 <xPortStartScheduler+0x138>)
 8006304:	2207      	movs	r2, #7
 8006306:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006308:	e009      	b.n	800631e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800630a:	4b2f      	ldr	r3, [pc, #188]	@ (80063c8 <xPortStartScheduler+0x138>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3b01      	subs	r3, #1
 8006310:	4a2d      	ldr	r2, [pc, #180]	@ (80063c8 <xPortStartScheduler+0x138>)
 8006312:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800631e:	78fb      	ldrb	r3, [r7, #3]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006326:	2b80      	cmp	r3, #128	@ 0x80
 8006328:	d0ef      	beq.n	800630a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800632a:	4b27      	ldr	r3, [pc, #156]	@ (80063c8 <xPortStartScheduler+0x138>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f1c3 0307 	rsb	r3, r3, #7
 8006332:	2b04      	cmp	r3, #4
 8006334:	d00b      	beq.n	800634e <xPortStartScheduler+0xbe>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60bb      	str	r3, [r7, #8]
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800634e:	4b1e      	ldr	r3, [pc, #120]	@ (80063c8 <xPortStartScheduler+0x138>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	4a1c      	ldr	r2, [pc, #112]	@ (80063c8 <xPortStartScheduler+0x138>)
 8006356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006358:	4b1b      	ldr	r3, [pc, #108]	@ (80063c8 <xPortStartScheduler+0x138>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006360:	4a19      	ldr	r2, [pc, #100]	@ (80063c8 <xPortStartScheduler+0x138>)
 8006362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800636c:	4b17      	ldr	r3, [pc, #92]	@ (80063cc <xPortStartScheduler+0x13c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a16      	ldr	r2, [pc, #88]	@ (80063cc <xPortStartScheduler+0x13c>)
 8006372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006378:	4b14      	ldr	r3, [pc, #80]	@ (80063cc <xPortStartScheduler+0x13c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a13      	ldr	r2, [pc, #76]	@ (80063cc <xPortStartScheduler+0x13c>)
 800637e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006384:	f000 f8da 	bl	800653c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006388:	4b11      	ldr	r3, [pc, #68]	@ (80063d0 <xPortStartScheduler+0x140>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800638e:	f000 f8f9 	bl	8006584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006392:	4b10      	ldr	r3, [pc, #64]	@ (80063d4 <xPortStartScheduler+0x144>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a0f      	ldr	r2, [pc, #60]	@ (80063d4 <xPortStartScheduler+0x144>)
 8006398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800639c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800639e:	f7ff ff63 	bl	8006268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063a2:	f7ff fa73 	bl	800588c <vTaskSwitchContext>
	prvTaskExitError();
 80063a6:	f7ff ff1b 	bl	80061e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	e000ed00 	.word	0xe000ed00
 80063b8:	410fc271 	.word	0x410fc271
 80063bc:	410fc270 	.word	0x410fc270
 80063c0:	e000e400 	.word	0xe000e400
 80063c4:	2000062c 	.word	0x2000062c
 80063c8:	20000630 	.word	0x20000630
 80063cc:	e000ed20 	.word	0xe000ed20
 80063d0:	200000ac 	.word	0x200000ac
 80063d4:	e000ef34 	.word	0xe000ef34

080063d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063f2:	4b10      	ldr	r3, [pc, #64]	@ (8006434 <vPortEnterCritical+0x5c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3301      	adds	r3, #1
 80063f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006434 <vPortEnterCritical+0x5c>)
 80063fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <vPortEnterCritical+0x5c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d110      	bne.n	8006426 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006404:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <vPortEnterCritical+0x60>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <vPortEnterCritical+0x4e>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	603b      	str	r3, [r7, #0]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <vPortEnterCritical+0x4a>
	}
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	200000ac 	.word	0x200000ac
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006442:	4b12      	ldr	r3, [pc, #72]	@ (800648c <vPortExitCritical+0x50>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <vPortExitCritical+0x26>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	607b      	str	r3, [r7, #4]
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006462:	4b0a      	ldr	r3, [pc, #40]	@ (800648c <vPortExitCritical+0x50>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3b01      	subs	r3, #1
 8006468:	4a08      	ldr	r2, [pc, #32]	@ (800648c <vPortExitCritical+0x50>)
 800646a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800646c:	4b07      	ldr	r3, [pc, #28]	@ (800648c <vPortExitCritical+0x50>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <vPortExitCritical+0x44>
 8006474:	2300      	movs	r3, #0
 8006476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f383 8811 	msr	BASEPRI, r3
}
 800647e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	200000ac 	.word	0x200000ac

08006490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006490:	f3ef 8009 	mrs	r0, PSP
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <pxCurrentTCBConst>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	f01e 0f10 	tst.w	lr, #16
 80064a0:	bf08      	it	eq
 80064a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064aa:	6010      	str	r0, [r2, #0]
 80064ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064b4:	f380 8811 	msr	BASEPRI, r0
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f7ff f9e4 	bl	800588c <vTaskSwitchContext>
 80064c4:	f04f 0000 	mov.w	r0, #0
 80064c8:	f380 8811 	msr	BASEPRI, r0
 80064cc:	bc09      	pop	{r0, r3}
 80064ce:	6819      	ldr	r1, [r3, #0]
 80064d0:	6808      	ldr	r0, [r1, #0]
 80064d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d6:	f01e 0f10 	tst.w	lr, #16
 80064da:	bf08      	it	eq
 80064dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064e0:	f380 8809 	msr	PSP, r0
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	f3af 8000 	nop.w

080064f0 <pxCurrentTCBConst>:
 80064f0:	20000500 	.word	0x20000500
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop

080064f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006512:	f7ff f901 	bl	8005718 <xTaskIncrementTick>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800651c:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <SysTick_Handler+0x40>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f383 8811 	msr	BASEPRI, r3
}
 800652e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006540:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <vPortSetupTimerInterrupt+0x34>)
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006546:	4b0b      	ldr	r3, [pc, #44]	@ (8006574 <vPortSetupTimerInterrupt+0x38>)
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800654c:	4b0a      	ldr	r3, [pc, #40]	@ (8006578 <vPortSetupTimerInterrupt+0x3c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a0a      	ldr	r2, [pc, #40]	@ (800657c <vPortSetupTimerInterrupt+0x40>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	099b      	lsrs	r3, r3, #6
 8006558:	4a09      	ldr	r2, [pc, #36]	@ (8006580 <vPortSetupTimerInterrupt+0x44>)
 800655a:	3b01      	subs	r3, #1
 800655c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800655e:	4b04      	ldr	r3, [pc, #16]	@ (8006570 <vPortSetupTimerInterrupt+0x34>)
 8006560:	2207      	movs	r2, #7
 8006562:	601a      	str	r2, [r3, #0]
}
 8006564:	bf00      	nop
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	e000e010 	.word	0xe000e010
 8006574:	e000e018 	.word	0xe000e018
 8006578:	20000000 	.word	0x20000000
 800657c:	10624dd3 	.word	0x10624dd3
 8006580:	e000e014 	.word	0xe000e014

08006584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006584:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006594 <vPortEnableVFP+0x10>
 8006588:	6801      	ldr	r1, [r0, #0]
 800658a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800658e:	6001      	str	r1, [r0, #0]
 8006590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006592:	bf00      	nop
 8006594:	e000ed88 	.word	0xe000ed88

08006598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800659e:	f3ef 8305 	mrs	r3, IPSR
 80065a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b0f      	cmp	r3, #15
 80065a8:	d915      	bls.n	80065d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065aa:	4a18      	ldr	r2, [pc, #96]	@ (800660c <vPortValidateInterruptPriority+0x74>)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065b4:	4b16      	ldr	r3, [pc, #88]	@ (8006610 <vPortValidateInterruptPriority+0x78>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	7afa      	ldrb	r2, [r7, #11]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d20b      	bcs.n	80065d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006614 <vPortValidateInterruptPriority+0x7c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065de:	4b0e      	ldr	r3, [pc, #56]	@ (8006618 <vPortValidateInterruptPriority+0x80>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d90b      	bls.n	80065fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	603b      	str	r3, [r7, #0]
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	e7fd      	b.n	80065fa <vPortValidateInterruptPriority+0x62>
	}
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	e000e3f0 	.word	0xe000e3f0
 8006610:	2000062c 	.word	0x2000062c
 8006614:	e000ed0c 	.word	0xe000ed0c
 8006618:	20000630 	.word	0x20000630

0800661c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08a      	sub	sp, #40	@ 0x28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006628:	f7fe ffca 	bl	80055c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800662c:	4b5c      	ldr	r3, [pc, #368]	@ (80067a0 <pvPortMalloc+0x184>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006634:	f000 f924 	bl	8006880 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006638:	4b5a      	ldr	r3, [pc, #360]	@ (80067a4 <pvPortMalloc+0x188>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4013      	ands	r3, r2
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 8095 	bne.w	8006770 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01e      	beq.n	800668a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800664c:	2208      	movs	r2, #8
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d015      	beq.n	800668a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f023 0307 	bic.w	r3, r3, #7
 8006664:	3308      	adds	r3, #8
 8006666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <pvPortMalloc+0x6e>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	617b      	str	r3, [r7, #20]
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d06f      	beq.n	8006770 <pvPortMalloc+0x154>
 8006690:	4b45      	ldr	r3, [pc, #276]	@ (80067a8 <pvPortMalloc+0x18c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d86a      	bhi.n	8006770 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800669a:	4b44      	ldr	r3, [pc, #272]	@ (80067ac <pvPortMalloc+0x190>)
 800669c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800669e:	4b43      	ldr	r3, [pc, #268]	@ (80067ac <pvPortMalloc+0x190>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066a4:	e004      	b.n	80066b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d903      	bls.n	80066c2 <pvPortMalloc+0xa6>
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f1      	bne.n	80066a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066c2:	4b37      	ldr	r3, [pc, #220]	@ (80067a0 <pvPortMalloc+0x184>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d051      	beq.n	8006770 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2208      	movs	r2, #8
 80066d2:	4413      	add	r3, r2
 80066d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	1ad2      	subs	r2, r2, r3
 80066e6:	2308      	movs	r3, #8
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d920      	bls.n	8006730 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4413      	add	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00b      	beq.n	8006718 <pvPortMalloc+0xfc>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	613b      	str	r3, [r7, #16]
}
 8006712:	bf00      	nop
 8006714:	bf00      	nop
 8006716:	e7fd      	b.n	8006714 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800672a:	69b8      	ldr	r0, [r7, #24]
 800672c:	f000 f90a 	bl	8006944 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006730:	4b1d      	ldr	r3, [pc, #116]	@ (80067a8 <pvPortMalloc+0x18c>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	4a1b      	ldr	r2, [pc, #108]	@ (80067a8 <pvPortMalloc+0x18c>)
 800673c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800673e:	4b1a      	ldr	r3, [pc, #104]	@ (80067a8 <pvPortMalloc+0x18c>)
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b1b      	ldr	r3, [pc, #108]	@ (80067b0 <pvPortMalloc+0x194>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d203      	bcs.n	8006752 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800674a:	4b17      	ldr	r3, [pc, #92]	@ (80067a8 <pvPortMalloc+0x18c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a18      	ldr	r2, [pc, #96]	@ (80067b0 <pvPortMalloc+0x194>)
 8006750:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	4b13      	ldr	r3, [pc, #76]	@ (80067a4 <pvPortMalloc+0x188>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	431a      	orrs	r2, r3
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006766:	4b13      	ldr	r3, [pc, #76]	@ (80067b4 <pvPortMalloc+0x198>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3301      	adds	r3, #1
 800676c:	4a11      	ldr	r2, [pc, #68]	@ (80067b4 <pvPortMalloc+0x198>)
 800676e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006770:	f7fe ff34 	bl	80055dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <pvPortMalloc+0x17a>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	60fb      	str	r3, [r7, #12]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <pvPortMalloc+0x176>
	return pvReturn;
 8006796:	69fb      	ldr	r3, [r7, #28]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3728      	adds	r7, #40	@ 0x28
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	2000423c 	.word	0x2000423c
 80067a4:	20004250 	.word	0x20004250
 80067a8:	20004240 	.word	0x20004240
 80067ac:	20004234 	.word	0x20004234
 80067b0:	20004244 	.word	0x20004244
 80067b4:	20004248 	.word	0x20004248

080067b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d04f      	beq.n	800686a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067ca:	2308      	movs	r3, #8
 80067cc:	425b      	negs	r3, r3
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4413      	add	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	4b25      	ldr	r3, [pc, #148]	@ (8006874 <vPortFree+0xbc>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <vPortFree+0x46>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00b      	beq.n	800681e <vPortFree+0x66>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	60bb      	str	r3, [r7, #8]
}
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	e7fd      	b.n	800681a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	4b14      	ldr	r3, [pc, #80]	@ (8006874 <vPortFree+0xbc>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01e      	beq.n	800686a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11a      	bne.n	800686a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	4b0e      	ldr	r3, [pc, #56]	@ (8006874 <vPortFree+0xbc>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	43db      	mvns	r3, r3
 800683e:	401a      	ands	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006844:	f7fe febc 	bl	80055c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	4b0a      	ldr	r3, [pc, #40]	@ (8006878 <vPortFree+0xc0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4413      	add	r3, r2
 8006852:	4a09      	ldr	r2, [pc, #36]	@ (8006878 <vPortFree+0xc0>)
 8006854:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006856:	6938      	ldr	r0, [r7, #16]
 8006858:	f000 f874 	bl	8006944 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800685c:	4b07      	ldr	r3, [pc, #28]	@ (800687c <vPortFree+0xc4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3301      	adds	r3, #1
 8006862:	4a06      	ldr	r2, [pc, #24]	@ (800687c <vPortFree+0xc4>)
 8006864:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006866:	f7fe feb9 	bl	80055dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800686a:	bf00      	nop
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20004250 	.word	0x20004250
 8006878:	20004240 	.word	0x20004240
 800687c:	2000424c 	.word	0x2000424c

08006880 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006886:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800688a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800688c:	4b27      	ldr	r3, [pc, #156]	@ (800692c <prvHeapInit+0xac>)
 800688e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3307      	adds	r3, #7
 800689e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0307 	bic.w	r3, r3, #7
 80068a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	4a1f      	ldr	r2, [pc, #124]	@ (800692c <prvHeapInit+0xac>)
 80068b0:	4413      	add	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006930 <prvHeapInit+0xb0>)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068be:	4b1c      	ldr	r3, [pc, #112]	@ (8006930 <prvHeapInit+0xb0>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	4413      	add	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068cc:	2208      	movs	r2, #8
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1a9b      	subs	r3, r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0307 	bic.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4a15      	ldr	r2, [pc, #84]	@ (8006934 <prvHeapInit+0xb4>)
 80068e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068e2:	4b14      	ldr	r3, [pc, #80]	@ (8006934 <prvHeapInit+0xb4>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2200      	movs	r2, #0
 80068e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068ea:	4b12      	ldr	r3, [pc, #72]	@ (8006934 <prvHeapInit+0xb4>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006900:	4b0c      	ldr	r3, [pc, #48]	@ (8006934 <prvHeapInit+0xb4>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4a0a      	ldr	r2, [pc, #40]	@ (8006938 <prvHeapInit+0xb8>)
 800690e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	4a09      	ldr	r2, [pc, #36]	@ (800693c <prvHeapInit+0xbc>)
 8006916:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006918:	4b09      	ldr	r3, [pc, #36]	@ (8006940 <prvHeapInit+0xc0>)
 800691a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800691e:	601a      	str	r2, [r3, #0]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	20000634 	.word	0x20000634
 8006930:	20004234 	.word	0x20004234
 8006934:	2000423c 	.word	0x2000423c
 8006938:	20004244 	.word	0x20004244
 800693c:	20004240 	.word	0x20004240
 8006940:	20004250 	.word	0x20004250

08006944 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800694c:	4b28      	ldr	r3, [pc, #160]	@ (80069f0 <prvInsertBlockIntoFreeList+0xac>)
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e002      	b.n	8006958 <prvInsertBlockIntoFreeList+0x14>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	429a      	cmp	r2, r3
 8006960:	d8f7      	bhi.n	8006952 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4413      	add	r3, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d108      	bne.n	8006986 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	441a      	add	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	441a      	add	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d118      	bne.n	80069cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	4b15      	ldr	r3, [pc, #84]	@ (80069f4 <prvInsertBlockIntoFreeList+0xb0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d00d      	beq.n	80069c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	441a      	add	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	e008      	b.n	80069d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069c2:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <prvInsertBlockIntoFreeList+0xb0>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	e003      	b.n	80069d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d002      	beq.n	80069e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20004234 	.word	0x20004234
 80069f4:	2000423c 	.word	0x2000423c

080069f8 <sbrk_aligned>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006a38 <sbrk_aligned+0x40>)
 80069fc:	460c      	mov	r4, r1
 80069fe:	6831      	ldr	r1, [r6, #0]
 8006a00:	4605      	mov	r5, r0
 8006a02:	b911      	cbnz	r1, 8006a0a <sbrk_aligned+0x12>
 8006a04:	f000 f92e 	bl	8006c64 <_sbrk_r>
 8006a08:	6030      	str	r0, [r6, #0]
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 f929 	bl	8006c64 <_sbrk_r>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	d103      	bne.n	8006a1e <sbrk_aligned+0x26>
 8006a16:	f04f 34ff 	mov.w	r4, #4294967295
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	1cc4      	adds	r4, r0, #3
 8006a20:	f024 0403 	bic.w	r4, r4, #3
 8006a24:	42a0      	cmp	r0, r4
 8006a26:	d0f8      	beq.n	8006a1a <sbrk_aligned+0x22>
 8006a28:	1a21      	subs	r1, r4, r0
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 f91a 	bl	8006c64 <_sbrk_r>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d1f2      	bne.n	8006a1a <sbrk_aligned+0x22>
 8006a34:	e7ef      	b.n	8006a16 <sbrk_aligned+0x1e>
 8006a36:	bf00      	nop
 8006a38:	20004254 	.word	0x20004254

08006a3c <_malloc_r>:
 8006a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a40:	1ccd      	adds	r5, r1, #3
 8006a42:	f025 0503 	bic.w	r5, r5, #3
 8006a46:	3508      	adds	r5, #8
 8006a48:	2d0c      	cmp	r5, #12
 8006a4a:	bf38      	it	cc
 8006a4c:	250c      	movcc	r5, #12
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	4606      	mov	r6, r0
 8006a52:	db01      	blt.n	8006a58 <_malloc_r+0x1c>
 8006a54:	42a9      	cmp	r1, r5
 8006a56:	d904      	bls.n	8006a62 <_malloc_r+0x26>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	6033      	str	r3, [r6, #0]
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b38 <_malloc_r+0xfc>
 8006a66:	f000 f869 	bl	8006b3c <__malloc_lock>
 8006a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a6e:	461c      	mov	r4, r3
 8006a70:	bb44      	cbnz	r4, 8006ac4 <_malloc_r+0x88>
 8006a72:	4629      	mov	r1, r5
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff ffbf 	bl	80069f8 <sbrk_aligned>
 8006a7a:	1c43      	adds	r3, r0, #1
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	d158      	bne.n	8006b32 <_malloc_r+0xf6>
 8006a80:	f8d8 4000 	ldr.w	r4, [r8]
 8006a84:	4627      	mov	r7, r4
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	d143      	bne.n	8006b12 <_malloc_r+0xd6>
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	d04b      	beq.n	8006b26 <_malloc_r+0xea>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	4639      	mov	r1, r7
 8006a92:	4630      	mov	r0, r6
 8006a94:	eb04 0903 	add.w	r9, r4, r3
 8006a98:	f000 f8e4 	bl	8006c64 <_sbrk_r>
 8006a9c:	4581      	cmp	r9, r0
 8006a9e:	d142      	bne.n	8006b26 <_malloc_r+0xea>
 8006aa0:	6821      	ldr	r1, [r4, #0]
 8006aa2:	1a6d      	subs	r5, r5, r1
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7ff ffa6 	bl	80069f8 <sbrk_aligned>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d03a      	beq.n	8006b26 <_malloc_r+0xea>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	442b      	add	r3, r5
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	bb62      	cbnz	r2, 8006b18 <_malloc_r+0xdc>
 8006abe:	f8c8 7000 	str.w	r7, [r8]
 8006ac2:	e00f      	b.n	8006ae4 <_malloc_r+0xa8>
 8006ac4:	6822      	ldr	r2, [r4, #0]
 8006ac6:	1b52      	subs	r2, r2, r5
 8006ac8:	d420      	bmi.n	8006b0c <_malloc_r+0xd0>
 8006aca:	2a0b      	cmp	r2, #11
 8006acc:	d917      	bls.n	8006afe <_malloc_r+0xc2>
 8006ace:	1961      	adds	r1, r4, r5
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	6025      	str	r5, [r4, #0]
 8006ad4:	bf18      	it	ne
 8006ad6:	6059      	strne	r1, [r3, #4]
 8006ad8:	6863      	ldr	r3, [r4, #4]
 8006ada:	bf08      	it	eq
 8006adc:	f8c8 1000 	streq.w	r1, [r8]
 8006ae0:	5162      	str	r2, [r4, r5]
 8006ae2:	604b      	str	r3, [r1, #4]
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f000 f82f 	bl	8006b48 <__malloc_unlock>
 8006aea:	f104 000b 	add.w	r0, r4, #11
 8006aee:	1d23      	adds	r3, r4, #4
 8006af0:	f020 0007 	bic.w	r0, r0, #7
 8006af4:	1ac2      	subs	r2, r0, r3
 8006af6:	bf1c      	itt	ne
 8006af8:	1a1b      	subne	r3, r3, r0
 8006afa:	50a3      	strne	r3, [r4, r2]
 8006afc:	e7af      	b.n	8006a5e <_malloc_r+0x22>
 8006afe:	6862      	ldr	r2, [r4, #4]
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	bf0c      	ite	eq
 8006b04:	f8c8 2000 	streq.w	r2, [r8]
 8006b08:	605a      	strne	r2, [r3, #4]
 8006b0a:	e7eb      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	6864      	ldr	r4, [r4, #4]
 8006b10:	e7ae      	b.n	8006a70 <_malloc_r+0x34>
 8006b12:	463c      	mov	r4, r7
 8006b14:	687f      	ldr	r7, [r7, #4]
 8006b16:	e7b6      	b.n	8006a86 <_malloc_r+0x4a>
 8006b18:	461a      	mov	r2, r3
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d1fb      	bne.n	8006b18 <_malloc_r+0xdc>
 8006b20:	2300      	movs	r3, #0
 8006b22:	6053      	str	r3, [r2, #4]
 8006b24:	e7de      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b26:	230c      	movs	r3, #12
 8006b28:	6033      	str	r3, [r6, #0]
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f000 f80c 	bl	8006b48 <__malloc_unlock>
 8006b30:	e794      	b.n	8006a5c <_malloc_r+0x20>
 8006b32:	6005      	str	r5, [r0, #0]
 8006b34:	e7d6      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b36:	bf00      	nop
 8006b38:	20004258 	.word	0x20004258

08006b3c <__malloc_lock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	@ (8006b44 <__malloc_lock+0x8>)
 8006b3e:	f000 b8cb 	b.w	8006cd8 <__retarget_lock_acquire_recursive>
 8006b42:	bf00      	nop
 8006b44:	20004398 	.word	0x20004398

08006b48 <__malloc_unlock>:
 8006b48:	4801      	ldr	r0, [pc, #4]	@ (8006b50 <__malloc_unlock+0x8>)
 8006b4a:	f000 b8c6 	b.w	8006cda <__retarget_lock_release_recursive>
 8006b4e:	bf00      	nop
 8006b50:	20004398 	.word	0x20004398

08006b54 <siprintf>:
 8006b54:	b40e      	push	{r1, r2, r3}
 8006b56:	b510      	push	{r4, lr}
 8006b58:	b09d      	sub	sp, #116	@ 0x74
 8006b5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006b5c:	9002      	str	r0, [sp, #8]
 8006b5e:	9006      	str	r0, [sp, #24]
 8006b60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b64:	480a      	ldr	r0, [pc, #40]	@ (8006b90 <siprintf+0x3c>)
 8006b66:	9107      	str	r1, [sp, #28]
 8006b68:	9104      	str	r1, [sp, #16]
 8006b6a:	490a      	ldr	r1, [pc, #40]	@ (8006b94 <siprintf+0x40>)
 8006b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b70:	9105      	str	r1, [sp, #20]
 8006b72:	2400      	movs	r4, #0
 8006b74:	a902      	add	r1, sp, #8
 8006b76:	6800      	ldr	r0, [r0, #0]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006b7c:	f000 f962 	bl	8006e44 <_svfiprintf_r>
 8006b80:	9b02      	ldr	r3, [sp, #8]
 8006b82:	701c      	strb	r4, [r3, #0]
 8006b84:	b01d      	add	sp, #116	@ 0x74
 8006b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b8a:	b003      	add	sp, #12
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	200000b0 	.word	0x200000b0
 8006b94:	ffff0208 	.word	0xffff0208

08006b98 <memset>:
 8006b98:	4402      	add	r2, r0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d100      	bne.n	8006ba2 <memset+0xa>
 8006ba0:	4770      	bx	lr
 8006ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ba6:	e7f9      	b.n	8006b9c <memset+0x4>

08006ba8 <_reclaim_reent>:
 8006ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8006c60 <_reclaim_reent+0xb8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4283      	cmp	r3, r0
 8006bae:	b570      	push	{r4, r5, r6, lr}
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	d053      	beq.n	8006c5c <_reclaim_reent+0xb4>
 8006bb4:	69c3      	ldr	r3, [r0, #28]
 8006bb6:	b31b      	cbz	r3, 8006c00 <_reclaim_reent+0x58>
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	b163      	cbz	r3, 8006bd6 <_reclaim_reent+0x2e>
 8006bbc:	2500      	movs	r5, #0
 8006bbe:	69e3      	ldr	r3, [r4, #28]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	5959      	ldr	r1, [r3, r5]
 8006bc4:	b9b1      	cbnz	r1, 8006bf4 <_reclaim_reent+0x4c>
 8006bc6:	3504      	adds	r5, #4
 8006bc8:	2d80      	cmp	r5, #128	@ 0x80
 8006bca:	d1f8      	bne.n	8006bbe <_reclaim_reent+0x16>
 8006bcc:	69e3      	ldr	r3, [r4, #28]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	68d9      	ldr	r1, [r3, #12]
 8006bd2:	f000 f891 	bl	8006cf8 <_free_r>
 8006bd6:	69e3      	ldr	r3, [r4, #28]
 8006bd8:	6819      	ldr	r1, [r3, #0]
 8006bda:	b111      	cbz	r1, 8006be2 <_reclaim_reent+0x3a>
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 f88b 	bl	8006cf8 <_free_r>
 8006be2:	69e3      	ldr	r3, [r4, #28]
 8006be4:	689d      	ldr	r5, [r3, #8]
 8006be6:	b15d      	cbz	r5, 8006c00 <_reclaim_reent+0x58>
 8006be8:	4629      	mov	r1, r5
 8006bea:	4620      	mov	r0, r4
 8006bec:	682d      	ldr	r5, [r5, #0]
 8006bee:	f000 f883 	bl	8006cf8 <_free_r>
 8006bf2:	e7f8      	b.n	8006be6 <_reclaim_reent+0x3e>
 8006bf4:	680e      	ldr	r6, [r1, #0]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 f87e 	bl	8006cf8 <_free_r>
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	e7e1      	b.n	8006bc4 <_reclaim_reent+0x1c>
 8006c00:	6961      	ldr	r1, [r4, #20]
 8006c02:	b111      	cbz	r1, 8006c0a <_reclaim_reent+0x62>
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 f877 	bl	8006cf8 <_free_r>
 8006c0a:	69e1      	ldr	r1, [r4, #28]
 8006c0c:	b111      	cbz	r1, 8006c14 <_reclaim_reent+0x6c>
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 f872 	bl	8006cf8 <_free_r>
 8006c14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006c16:	b111      	cbz	r1, 8006c1e <_reclaim_reent+0x76>
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 f86d 	bl	8006cf8 <_free_r>
 8006c1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c20:	b111      	cbz	r1, 8006c28 <_reclaim_reent+0x80>
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 f868 	bl	8006cf8 <_free_r>
 8006c28:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006c2a:	b111      	cbz	r1, 8006c32 <_reclaim_reent+0x8a>
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 f863 	bl	8006cf8 <_free_r>
 8006c32:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006c34:	b111      	cbz	r1, 8006c3c <_reclaim_reent+0x94>
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 f85e 	bl	8006cf8 <_free_r>
 8006c3c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006c3e:	b111      	cbz	r1, 8006c46 <_reclaim_reent+0x9e>
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 f859 	bl	8006cf8 <_free_r>
 8006c46:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006c48:	b111      	cbz	r1, 8006c50 <_reclaim_reent+0xa8>
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 f854 	bl	8006cf8 <_free_r>
 8006c50:	6a23      	ldr	r3, [r4, #32]
 8006c52:	b11b      	cbz	r3, 8006c5c <_reclaim_reent+0xb4>
 8006c54:	4620      	mov	r0, r4
 8006c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c5a:	4718      	bx	r3
 8006c5c:	bd70      	pop	{r4, r5, r6, pc}
 8006c5e:	bf00      	nop
 8006c60:	200000b0 	.word	0x200000b0

08006c64 <_sbrk_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4d06      	ldr	r5, [pc, #24]	@ (8006c80 <_sbrk_r+0x1c>)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	602b      	str	r3, [r5, #0]
 8006c70:	f7fa f9e0 	bl	8001034 <_sbrk>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <_sbrk_r+0x1a>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	b103      	cbz	r3, 8006c7e <_sbrk_r+0x1a>
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	20004394 	.word	0x20004394

08006c84 <__errno>:
 8006c84:	4b01      	ldr	r3, [pc, #4]	@ (8006c8c <__errno+0x8>)
 8006c86:	6818      	ldr	r0, [r3, #0]
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	200000b0 	.word	0x200000b0

08006c90 <__libc_init_array>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	4d0d      	ldr	r5, [pc, #52]	@ (8006cc8 <__libc_init_array+0x38>)
 8006c94:	4c0d      	ldr	r4, [pc, #52]	@ (8006ccc <__libc_init_array+0x3c>)
 8006c96:	1b64      	subs	r4, r4, r5
 8006c98:	10a4      	asrs	r4, r4, #2
 8006c9a:	2600      	movs	r6, #0
 8006c9c:	42a6      	cmp	r6, r4
 8006c9e:	d109      	bne.n	8006cb4 <__libc_init_array+0x24>
 8006ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8006cd0 <__libc_init_array+0x40>)
 8006ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8006cd4 <__libc_init_array+0x44>)
 8006ca4:	f000 fba6 	bl	80073f4 <_init>
 8006ca8:	1b64      	subs	r4, r4, r5
 8006caa:	10a4      	asrs	r4, r4, #2
 8006cac:	2600      	movs	r6, #0
 8006cae:	42a6      	cmp	r6, r4
 8006cb0:	d105      	bne.n	8006cbe <__libc_init_array+0x2e>
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}
 8006cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb8:	4798      	blx	r3
 8006cba:	3601      	adds	r6, #1
 8006cbc:	e7ee      	b.n	8006c9c <__libc_init_array+0xc>
 8006cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc2:	4798      	blx	r3
 8006cc4:	3601      	adds	r6, #1
 8006cc6:	e7f2      	b.n	8006cae <__libc_init_array+0x1e>
 8006cc8:	08007568 	.word	0x08007568
 8006ccc:	08007568 	.word	0x08007568
 8006cd0:	08007568 	.word	0x08007568
 8006cd4:	0800756c 	.word	0x0800756c

08006cd8 <__retarget_lock_acquire_recursive>:
 8006cd8:	4770      	bx	lr

08006cda <__retarget_lock_release_recursive>:
 8006cda:	4770      	bx	lr

08006cdc <memcpy>:
 8006cdc:	440a      	add	r2, r1
 8006cde:	4291      	cmp	r1, r2
 8006ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ce4:	d100      	bne.n	8006ce8 <memcpy+0xc>
 8006ce6:	4770      	bx	lr
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf2:	4291      	cmp	r1, r2
 8006cf4:	d1f9      	bne.n	8006cea <memcpy+0xe>
 8006cf6:	bd10      	pop	{r4, pc}

08006cf8 <_free_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d041      	beq.n	8006d84 <_free_r+0x8c>
 8006d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d04:	1f0c      	subs	r4, r1, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bfb8      	it	lt
 8006d0a:	18e4      	addlt	r4, r4, r3
 8006d0c:	f7ff ff16 	bl	8006b3c <__malloc_lock>
 8006d10:	4a1d      	ldr	r2, [pc, #116]	@ (8006d88 <_free_r+0x90>)
 8006d12:	6813      	ldr	r3, [r2, #0]
 8006d14:	b933      	cbnz	r3, 8006d24 <_free_r+0x2c>
 8006d16:	6063      	str	r3, [r4, #4]
 8006d18:	6014      	str	r4, [r2, #0]
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d20:	f7ff bf12 	b.w	8006b48 <__malloc_unlock>
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	d908      	bls.n	8006d3a <_free_r+0x42>
 8006d28:	6820      	ldr	r0, [r4, #0]
 8006d2a:	1821      	adds	r1, r4, r0
 8006d2c:	428b      	cmp	r3, r1
 8006d2e:	bf01      	itttt	eq
 8006d30:	6819      	ldreq	r1, [r3, #0]
 8006d32:	685b      	ldreq	r3, [r3, #4]
 8006d34:	1809      	addeq	r1, r1, r0
 8006d36:	6021      	streq	r1, [r4, #0]
 8006d38:	e7ed      	b.n	8006d16 <_free_r+0x1e>
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	b10b      	cbz	r3, 8006d44 <_free_r+0x4c>
 8006d40:	42a3      	cmp	r3, r4
 8006d42:	d9fa      	bls.n	8006d3a <_free_r+0x42>
 8006d44:	6811      	ldr	r1, [r2, #0]
 8006d46:	1850      	adds	r0, r2, r1
 8006d48:	42a0      	cmp	r0, r4
 8006d4a:	d10b      	bne.n	8006d64 <_free_r+0x6c>
 8006d4c:	6820      	ldr	r0, [r4, #0]
 8006d4e:	4401      	add	r1, r0
 8006d50:	1850      	adds	r0, r2, r1
 8006d52:	4283      	cmp	r3, r0
 8006d54:	6011      	str	r1, [r2, #0]
 8006d56:	d1e0      	bne.n	8006d1a <_free_r+0x22>
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	6053      	str	r3, [r2, #4]
 8006d5e:	4408      	add	r0, r1
 8006d60:	6010      	str	r0, [r2, #0]
 8006d62:	e7da      	b.n	8006d1a <_free_r+0x22>
 8006d64:	d902      	bls.n	8006d6c <_free_r+0x74>
 8006d66:	230c      	movs	r3, #12
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	e7d6      	b.n	8006d1a <_free_r+0x22>
 8006d6c:	6820      	ldr	r0, [r4, #0]
 8006d6e:	1821      	adds	r1, r4, r0
 8006d70:	428b      	cmp	r3, r1
 8006d72:	bf04      	itt	eq
 8006d74:	6819      	ldreq	r1, [r3, #0]
 8006d76:	685b      	ldreq	r3, [r3, #4]
 8006d78:	6063      	str	r3, [r4, #4]
 8006d7a:	bf04      	itt	eq
 8006d7c:	1809      	addeq	r1, r1, r0
 8006d7e:	6021      	streq	r1, [r4, #0]
 8006d80:	6054      	str	r4, [r2, #4]
 8006d82:	e7ca      	b.n	8006d1a <_free_r+0x22>
 8006d84:	bd38      	pop	{r3, r4, r5, pc}
 8006d86:	bf00      	nop
 8006d88:	20004258 	.word	0x20004258

08006d8c <__ssputs_r>:
 8006d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d90:	688e      	ldr	r6, [r1, #8]
 8006d92:	461f      	mov	r7, r3
 8006d94:	42be      	cmp	r6, r7
 8006d96:	680b      	ldr	r3, [r1, #0]
 8006d98:	4682      	mov	sl, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	4690      	mov	r8, r2
 8006d9e:	d82d      	bhi.n	8006dfc <__ssputs_r+0x70>
 8006da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006da4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006da8:	d026      	beq.n	8006df8 <__ssputs_r+0x6c>
 8006daa:	6965      	ldr	r5, [r4, #20]
 8006dac:	6909      	ldr	r1, [r1, #16]
 8006dae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006db2:	eba3 0901 	sub.w	r9, r3, r1
 8006db6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dba:	1c7b      	adds	r3, r7, #1
 8006dbc:	444b      	add	r3, r9
 8006dbe:	106d      	asrs	r5, r5, #1
 8006dc0:	429d      	cmp	r5, r3
 8006dc2:	bf38      	it	cc
 8006dc4:	461d      	movcc	r5, r3
 8006dc6:	0553      	lsls	r3, r2, #21
 8006dc8:	d527      	bpl.n	8006e1a <__ssputs_r+0x8e>
 8006dca:	4629      	mov	r1, r5
 8006dcc:	f7ff fe36 	bl	8006a3c <_malloc_r>
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	b360      	cbz	r0, 8006e2e <__ssputs_r+0xa2>
 8006dd4:	6921      	ldr	r1, [r4, #16]
 8006dd6:	464a      	mov	r2, r9
 8006dd8:	f7ff ff80 	bl	8006cdc <memcpy>
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de6:	81a3      	strh	r3, [r4, #12]
 8006de8:	6126      	str	r6, [r4, #16]
 8006dea:	6165      	str	r5, [r4, #20]
 8006dec:	444e      	add	r6, r9
 8006dee:	eba5 0509 	sub.w	r5, r5, r9
 8006df2:	6026      	str	r6, [r4, #0]
 8006df4:	60a5      	str	r5, [r4, #8]
 8006df6:	463e      	mov	r6, r7
 8006df8:	42be      	cmp	r6, r7
 8006dfa:	d900      	bls.n	8006dfe <__ssputs_r+0x72>
 8006dfc:	463e      	mov	r6, r7
 8006dfe:	6820      	ldr	r0, [r4, #0]
 8006e00:	4632      	mov	r2, r6
 8006e02:	4641      	mov	r1, r8
 8006e04:	f000 faa6 	bl	8007354 <memmove>
 8006e08:	68a3      	ldr	r3, [r4, #8]
 8006e0a:	1b9b      	subs	r3, r3, r6
 8006e0c:	60a3      	str	r3, [r4, #8]
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	4433      	add	r3, r6
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	2000      	movs	r0, #0
 8006e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1a:	462a      	mov	r2, r5
 8006e1c:	f000 fab4 	bl	8007388 <_realloc_r>
 8006e20:	4606      	mov	r6, r0
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d1e0      	bne.n	8006de8 <__ssputs_r+0x5c>
 8006e26:	6921      	ldr	r1, [r4, #16]
 8006e28:	4650      	mov	r0, sl
 8006e2a:	f7ff ff65 	bl	8006cf8 <_free_r>
 8006e2e:	230c      	movs	r3, #12
 8006e30:	f8ca 3000 	str.w	r3, [sl]
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e3a:	81a3      	strh	r3, [r4, #12]
 8006e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e40:	e7e9      	b.n	8006e16 <__ssputs_r+0x8a>
	...

08006e44 <_svfiprintf_r>:
 8006e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e48:	4698      	mov	r8, r3
 8006e4a:	898b      	ldrh	r3, [r1, #12]
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	b09d      	sub	sp, #116	@ 0x74
 8006e50:	4607      	mov	r7, r0
 8006e52:	460d      	mov	r5, r1
 8006e54:	4614      	mov	r4, r2
 8006e56:	d510      	bpl.n	8006e7a <_svfiprintf_r+0x36>
 8006e58:	690b      	ldr	r3, [r1, #16]
 8006e5a:	b973      	cbnz	r3, 8006e7a <_svfiprintf_r+0x36>
 8006e5c:	2140      	movs	r1, #64	@ 0x40
 8006e5e:	f7ff fded 	bl	8006a3c <_malloc_r>
 8006e62:	6028      	str	r0, [r5, #0]
 8006e64:	6128      	str	r0, [r5, #16]
 8006e66:	b930      	cbnz	r0, 8006e76 <_svfiprintf_r+0x32>
 8006e68:	230c      	movs	r3, #12
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	b01d      	add	sp, #116	@ 0x74
 8006e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e76:	2340      	movs	r3, #64	@ 0x40
 8006e78:	616b      	str	r3, [r5, #20]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7e:	2320      	movs	r3, #32
 8006e80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e88:	2330      	movs	r3, #48	@ 0x30
 8006e8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007028 <_svfiprintf_r+0x1e4>
 8006e8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e92:	f04f 0901 	mov.w	r9, #1
 8006e96:	4623      	mov	r3, r4
 8006e98:	469a      	mov	sl, r3
 8006e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e9e:	b10a      	cbz	r2, 8006ea4 <_svfiprintf_r+0x60>
 8006ea0:	2a25      	cmp	r2, #37	@ 0x25
 8006ea2:	d1f9      	bne.n	8006e98 <_svfiprintf_r+0x54>
 8006ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ea8:	d00b      	beq.n	8006ec2 <_svfiprintf_r+0x7e>
 8006eaa:	465b      	mov	r3, fp
 8006eac:	4622      	mov	r2, r4
 8006eae:	4629      	mov	r1, r5
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	f7ff ff6b 	bl	8006d8c <__ssputs_r>
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	f000 80a7 	beq.w	800700a <_svfiprintf_r+0x1c6>
 8006ebc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ebe:	445a      	add	r2, fp
 8006ec0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 809f 	beq.w	800700a <_svfiprintf_r+0x1c6>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed6:	f10a 0a01 	add.w	sl, sl, #1
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	9307      	str	r3, [sp, #28]
 8006ede:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ee2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ee4:	4654      	mov	r4, sl
 8006ee6:	2205      	movs	r2, #5
 8006ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eec:	484e      	ldr	r0, [pc, #312]	@ (8007028 <_svfiprintf_r+0x1e4>)
 8006eee:	f7f9 f977 	bl	80001e0 <memchr>
 8006ef2:	9a04      	ldr	r2, [sp, #16]
 8006ef4:	b9d8      	cbnz	r0, 8006f2e <_svfiprintf_r+0xea>
 8006ef6:	06d0      	lsls	r0, r2, #27
 8006ef8:	bf44      	itt	mi
 8006efa:	2320      	movmi	r3, #32
 8006efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f00:	0711      	lsls	r1, r2, #28
 8006f02:	bf44      	itt	mi
 8006f04:	232b      	movmi	r3, #43	@ 0x2b
 8006f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f10:	d015      	beq.n	8006f3e <_svfiprintf_r+0xfa>
 8006f12:	9a07      	ldr	r2, [sp, #28]
 8006f14:	4654      	mov	r4, sl
 8006f16:	2000      	movs	r0, #0
 8006f18:	f04f 0c0a 	mov.w	ip, #10
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f22:	3b30      	subs	r3, #48	@ 0x30
 8006f24:	2b09      	cmp	r3, #9
 8006f26:	d94b      	bls.n	8006fc0 <_svfiprintf_r+0x17c>
 8006f28:	b1b0      	cbz	r0, 8006f58 <_svfiprintf_r+0x114>
 8006f2a:	9207      	str	r2, [sp, #28]
 8006f2c:	e014      	b.n	8006f58 <_svfiprintf_r+0x114>
 8006f2e:	eba0 0308 	sub.w	r3, r0, r8
 8006f32:	fa09 f303 	lsl.w	r3, r9, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	46a2      	mov	sl, r4
 8006f3c:	e7d2      	b.n	8006ee4 <_svfiprintf_r+0xa0>
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	1d19      	adds	r1, r3, #4
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	9103      	str	r1, [sp, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	bfbb      	ittet	lt
 8006f4a:	425b      	neglt	r3, r3
 8006f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f50:	9307      	strge	r3, [sp, #28]
 8006f52:	9307      	strlt	r3, [sp, #28]
 8006f54:	bfb8      	it	lt
 8006f56:	9204      	strlt	r2, [sp, #16]
 8006f58:	7823      	ldrb	r3, [r4, #0]
 8006f5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f5c:	d10a      	bne.n	8006f74 <_svfiprintf_r+0x130>
 8006f5e:	7863      	ldrb	r3, [r4, #1]
 8006f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f62:	d132      	bne.n	8006fca <_svfiprintf_r+0x186>
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	1d1a      	adds	r2, r3, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	9203      	str	r2, [sp, #12]
 8006f6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f70:	3402      	adds	r4, #2
 8006f72:	9305      	str	r3, [sp, #20]
 8006f74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007038 <_svfiprintf_r+0x1f4>
 8006f78:	7821      	ldrb	r1, [r4, #0]
 8006f7a:	2203      	movs	r2, #3
 8006f7c:	4650      	mov	r0, sl
 8006f7e:	f7f9 f92f 	bl	80001e0 <memchr>
 8006f82:	b138      	cbz	r0, 8006f94 <_svfiprintf_r+0x150>
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	eba0 000a 	sub.w	r0, r0, sl
 8006f8a:	2240      	movs	r2, #64	@ 0x40
 8006f8c:	4082      	lsls	r2, r0
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	3401      	adds	r4, #1
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f98:	4824      	ldr	r0, [pc, #144]	@ (800702c <_svfiprintf_r+0x1e8>)
 8006f9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f9e:	2206      	movs	r2, #6
 8006fa0:	f7f9 f91e 	bl	80001e0 <memchr>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d036      	beq.n	8007016 <_svfiprintf_r+0x1d2>
 8006fa8:	4b21      	ldr	r3, [pc, #132]	@ (8007030 <_svfiprintf_r+0x1ec>)
 8006faa:	bb1b      	cbnz	r3, 8006ff4 <_svfiprintf_r+0x1b0>
 8006fac:	9b03      	ldr	r3, [sp, #12]
 8006fae:	3307      	adds	r3, #7
 8006fb0:	f023 0307 	bic.w	r3, r3, #7
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	9303      	str	r3, [sp, #12]
 8006fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fba:	4433      	add	r3, r6
 8006fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fbe:	e76a      	b.n	8006e96 <_svfiprintf_r+0x52>
 8006fc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	2001      	movs	r0, #1
 8006fc8:	e7a8      	b.n	8006f1c <_svfiprintf_r+0xd8>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	3401      	adds	r4, #1
 8006fce:	9305      	str	r3, [sp, #20]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	f04f 0c0a 	mov.w	ip, #10
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fdc:	3a30      	subs	r2, #48	@ 0x30
 8006fde:	2a09      	cmp	r2, #9
 8006fe0:	d903      	bls.n	8006fea <_svfiprintf_r+0x1a6>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0c6      	beq.n	8006f74 <_svfiprintf_r+0x130>
 8006fe6:	9105      	str	r1, [sp, #20]
 8006fe8:	e7c4      	b.n	8006f74 <_svfiprintf_r+0x130>
 8006fea:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fee:	4604      	mov	r4, r0
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e7f0      	b.n	8006fd6 <_svfiprintf_r+0x192>
 8006ff4:	ab03      	add	r3, sp, #12
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	462a      	mov	r2, r5
 8006ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8007034 <_svfiprintf_r+0x1f0>)
 8006ffc:	a904      	add	r1, sp, #16
 8006ffe:	4638      	mov	r0, r7
 8007000:	f3af 8000 	nop.w
 8007004:	1c42      	adds	r2, r0, #1
 8007006:	4606      	mov	r6, r0
 8007008:	d1d6      	bne.n	8006fb8 <_svfiprintf_r+0x174>
 800700a:	89ab      	ldrh	r3, [r5, #12]
 800700c:	065b      	lsls	r3, r3, #25
 800700e:	f53f af2d 	bmi.w	8006e6c <_svfiprintf_r+0x28>
 8007012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007014:	e72c      	b.n	8006e70 <_svfiprintf_r+0x2c>
 8007016:	ab03      	add	r3, sp, #12
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	462a      	mov	r2, r5
 800701c:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <_svfiprintf_r+0x1f0>)
 800701e:	a904      	add	r1, sp, #16
 8007020:	4638      	mov	r0, r7
 8007022:	f000 f879 	bl	8007118 <_printf_i>
 8007026:	e7ed      	b.n	8007004 <_svfiprintf_r+0x1c0>
 8007028:	0800752c 	.word	0x0800752c
 800702c:	08007536 	.word	0x08007536
 8007030:	00000000 	.word	0x00000000
 8007034:	08006d8d 	.word	0x08006d8d
 8007038:	08007532 	.word	0x08007532

0800703c <_printf_common>:
 800703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	4616      	mov	r6, r2
 8007042:	4698      	mov	r8, r3
 8007044:	688a      	ldr	r2, [r1, #8]
 8007046:	690b      	ldr	r3, [r1, #16]
 8007048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800704c:	4293      	cmp	r3, r2
 800704e:	bfb8      	it	lt
 8007050:	4613      	movlt	r3, r2
 8007052:	6033      	str	r3, [r6, #0]
 8007054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007058:	4607      	mov	r7, r0
 800705a:	460c      	mov	r4, r1
 800705c:	b10a      	cbz	r2, 8007062 <_printf_common+0x26>
 800705e:	3301      	adds	r3, #1
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	0699      	lsls	r1, r3, #26
 8007066:	bf42      	ittt	mi
 8007068:	6833      	ldrmi	r3, [r6, #0]
 800706a:	3302      	addmi	r3, #2
 800706c:	6033      	strmi	r3, [r6, #0]
 800706e:	6825      	ldr	r5, [r4, #0]
 8007070:	f015 0506 	ands.w	r5, r5, #6
 8007074:	d106      	bne.n	8007084 <_printf_common+0x48>
 8007076:	f104 0a19 	add.w	sl, r4, #25
 800707a:	68e3      	ldr	r3, [r4, #12]
 800707c:	6832      	ldr	r2, [r6, #0]
 800707e:	1a9b      	subs	r3, r3, r2
 8007080:	42ab      	cmp	r3, r5
 8007082:	dc26      	bgt.n	80070d2 <_printf_common+0x96>
 8007084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007088:	6822      	ldr	r2, [r4, #0]
 800708a:	3b00      	subs	r3, #0
 800708c:	bf18      	it	ne
 800708e:	2301      	movne	r3, #1
 8007090:	0692      	lsls	r2, r2, #26
 8007092:	d42b      	bmi.n	80070ec <_printf_common+0xb0>
 8007094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007098:	4641      	mov	r1, r8
 800709a:	4638      	mov	r0, r7
 800709c:	47c8      	blx	r9
 800709e:	3001      	adds	r0, #1
 80070a0:	d01e      	beq.n	80070e0 <_printf_common+0xa4>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	6922      	ldr	r2, [r4, #16]
 80070a6:	f003 0306 	and.w	r3, r3, #6
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	bf02      	ittt	eq
 80070ae:	68e5      	ldreq	r5, [r4, #12]
 80070b0:	6833      	ldreq	r3, [r6, #0]
 80070b2:	1aed      	subeq	r5, r5, r3
 80070b4:	68a3      	ldr	r3, [r4, #8]
 80070b6:	bf0c      	ite	eq
 80070b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070bc:	2500      	movne	r5, #0
 80070be:	4293      	cmp	r3, r2
 80070c0:	bfc4      	itt	gt
 80070c2:	1a9b      	subgt	r3, r3, r2
 80070c4:	18ed      	addgt	r5, r5, r3
 80070c6:	2600      	movs	r6, #0
 80070c8:	341a      	adds	r4, #26
 80070ca:	42b5      	cmp	r5, r6
 80070cc:	d11a      	bne.n	8007104 <_printf_common+0xc8>
 80070ce:	2000      	movs	r0, #0
 80070d0:	e008      	b.n	80070e4 <_printf_common+0xa8>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4652      	mov	r2, sl
 80070d6:	4641      	mov	r1, r8
 80070d8:	4638      	mov	r0, r7
 80070da:	47c8      	blx	r9
 80070dc:	3001      	adds	r0, #1
 80070de:	d103      	bne.n	80070e8 <_printf_common+0xac>
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e8:	3501      	adds	r5, #1
 80070ea:	e7c6      	b.n	800707a <_printf_common+0x3e>
 80070ec:	18e1      	adds	r1, r4, r3
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	2030      	movs	r0, #48	@ 0x30
 80070f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070f6:	4422      	add	r2, r4
 80070f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007100:	3302      	adds	r3, #2
 8007102:	e7c7      	b.n	8007094 <_printf_common+0x58>
 8007104:	2301      	movs	r3, #1
 8007106:	4622      	mov	r2, r4
 8007108:	4641      	mov	r1, r8
 800710a:	4638      	mov	r0, r7
 800710c:	47c8      	blx	r9
 800710e:	3001      	adds	r0, #1
 8007110:	d0e6      	beq.n	80070e0 <_printf_common+0xa4>
 8007112:	3601      	adds	r6, #1
 8007114:	e7d9      	b.n	80070ca <_printf_common+0x8e>
	...

08007118 <_printf_i>:
 8007118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	7e0f      	ldrb	r7, [r1, #24]
 800711e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007120:	2f78      	cmp	r7, #120	@ 0x78
 8007122:	4691      	mov	r9, r2
 8007124:	4680      	mov	r8, r0
 8007126:	460c      	mov	r4, r1
 8007128:	469a      	mov	sl, r3
 800712a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800712e:	d807      	bhi.n	8007140 <_printf_i+0x28>
 8007130:	2f62      	cmp	r7, #98	@ 0x62
 8007132:	d80a      	bhi.n	800714a <_printf_i+0x32>
 8007134:	2f00      	cmp	r7, #0
 8007136:	f000 80d1 	beq.w	80072dc <_printf_i+0x1c4>
 800713a:	2f58      	cmp	r7, #88	@ 0x58
 800713c:	f000 80b8 	beq.w	80072b0 <_printf_i+0x198>
 8007140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007148:	e03a      	b.n	80071c0 <_printf_i+0xa8>
 800714a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800714e:	2b15      	cmp	r3, #21
 8007150:	d8f6      	bhi.n	8007140 <_printf_i+0x28>
 8007152:	a101      	add	r1, pc, #4	@ (adr r1, 8007158 <_printf_i+0x40>)
 8007154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007158:	080071b1 	.word	0x080071b1
 800715c:	080071c5 	.word	0x080071c5
 8007160:	08007141 	.word	0x08007141
 8007164:	08007141 	.word	0x08007141
 8007168:	08007141 	.word	0x08007141
 800716c:	08007141 	.word	0x08007141
 8007170:	080071c5 	.word	0x080071c5
 8007174:	08007141 	.word	0x08007141
 8007178:	08007141 	.word	0x08007141
 800717c:	08007141 	.word	0x08007141
 8007180:	08007141 	.word	0x08007141
 8007184:	080072c3 	.word	0x080072c3
 8007188:	080071ef 	.word	0x080071ef
 800718c:	0800727d 	.word	0x0800727d
 8007190:	08007141 	.word	0x08007141
 8007194:	08007141 	.word	0x08007141
 8007198:	080072e5 	.word	0x080072e5
 800719c:	08007141 	.word	0x08007141
 80071a0:	080071ef 	.word	0x080071ef
 80071a4:	08007141 	.word	0x08007141
 80071a8:	08007141 	.word	0x08007141
 80071ac:	08007285 	.word	0x08007285
 80071b0:	6833      	ldr	r3, [r6, #0]
 80071b2:	1d1a      	adds	r2, r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6032      	str	r2, [r6, #0]
 80071b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071c0:	2301      	movs	r3, #1
 80071c2:	e09c      	b.n	80072fe <_printf_i+0x1e6>
 80071c4:	6833      	ldr	r3, [r6, #0]
 80071c6:	6820      	ldr	r0, [r4, #0]
 80071c8:	1d19      	adds	r1, r3, #4
 80071ca:	6031      	str	r1, [r6, #0]
 80071cc:	0606      	lsls	r6, r0, #24
 80071ce:	d501      	bpl.n	80071d4 <_printf_i+0xbc>
 80071d0:	681d      	ldr	r5, [r3, #0]
 80071d2:	e003      	b.n	80071dc <_printf_i+0xc4>
 80071d4:	0645      	lsls	r5, r0, #25
 80071d6:	d5fb      	bpl.n	80071d0 <_printf_i+0xb8>
 80071d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071dc:	2d00      	cmp	r5, #0
 80071de:	da03      	bge.n	80071e8 <_printf_i+0xd0>
 80071e0:	232d      	movs	r3, #45	@ 0x2d
 80071e2:	426d      	negs	r5, r5
 80071e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071e8:	4858      	ldr	r0, [pc, #352]	@ (800734c <_printf_i+0x234>)
 80071ea:	230a      	movs	r3, #10
 80071ec:	e011      	b.n	8007212 <_printf_i+0xfa>
 80071ee:	6821      	ldr	r1, [r4, #0]
 80071f0:	6833      	ldr	r3, [r6, #0]
 80071f2:	0608      	lsls	r0, r1, #24
 80071f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071f8:	d402      	bmi.n	8007200 <_printf_i+0xe8>
 80071fa:	0649      	lsls	r1, r1, #25
 80071fc:	bf48      	it	mi
 80071fe:	b2ad      	uxthmi	r5, r5
 8007200:	2f6f      	cmp	r7, #111	@ 0x6f
 8007202:	4852      	ldr	r0, [pc, #328]	@ (800734c <_printf_i+0x234>)
 8007204:	6033      	str	r3, [r6, #0]
 8007206:	bf14      	ite	ne
 8007208:	230a      	movne	r3, #10
 800720a:	2308      	moveq	r3, #8
 800720c:	2100      	movs	r1, #0
 800720e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007212:	6866      	ldr	r6, [r4, #4]
 8007214:	60a6      	str	r6, [r4, #8]
 8007216:	2e00      	cmp	r6, #0
 8007218:	db05      	blt.n	8007226 <_printf_i+0x10e>
 800721a:	6821      	ldr	r1, [r4, #0]
 800721c:	432e      	orrs	r6, r5
 800721e:	f021 0104 	bic.w	r1, r1, #4
 8007222:	6021      	str	r1, [r4, #0]
 8007224:	d04b      	beq.n	80072be <_printf_i+0x1a6>
 8007226:	4616      	mov	r6, r2
 8007228:	fbb5 f1f3 	udiv	r1, r5, r3
 800722c:	fb03 5711 	mls	r7, r3, r1, r5
 8007230:	5dc7      	ldrb	r7, [r0, r7]
 8007232:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007236:	462f      	mov	r7, r5
 8007238:	42bb      	cmp	r3, r7
 800723a:	460d      	mov	r5, r1
 800723c:	d9f4      	bls.n	8007228 <_printf_i+0x110>
 800723e:	2b08      	cmp	r3, #8
 8007240:	d10b      	bne.n	800725a <_printf_i+0x142>
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	07df      	lsls	r7, r3, #31
 8007246:	d508      	bpl.n	800725a <_printf_i+0x142>
 8007248:	6923      	ldr	r3, [r4, #16]
 800724a:	6861      	ldr	r1, [r4, #4]
 800724c:	4299      	cmp	r1, r3
 800724e:	bfde      	ittt	le
 8007250:	2330      	movle	r3, #48	@ 0x30
 8007252:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007256:	f106 36ff 	addle.w	r6, r6, #4294967295
 800725a:	1b92      	subs	r2, r2, r6
 800725c:	6122      	str	r2, [r4, #16]
 800725e:	f8cd a000 	str.w	sl, [sp]
 8007262:	464b      	mov	r3, r9
 8007264:	aa03      	add	r2, sp, #12
 8007266:	4621      	mov	r1, r4
 8007268:	4640      	mov	r0, r8
 800726a:	f7ff fee7 	bl	800703c <_printf_common>
 800726e:	3001      	adds	r0, #1
 8007270:	d14a      	bne.n	8007308 <_printf_i+0x1f0>
 8007272:	f04f 30ff 	mov.w	r0, #4294967295
 8007276:	b004      	add	sp, #16
 8007278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	f043 0320 	orr.w	r3, r3, #32
 8007282:	6023      	str	r3, [r4, #0]
 8007284:	4832      	ldr	r0, [pc, #200]	@ (8007350 <_printf_i+0x238>)
 8007286:	2778      	movs	r7, #120	@ 0x78
 8007288:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	6831      	ldr	r1, [r6, #0]
 8007290:	061f      	lsls	r7, r3, #24
 8007292:	f851 5b04 	ldr.w	r5, [r1], #4
 8007296:	d402      	bmi.n	800729e <_printf_i+0x186>
 8007298:	065f      	lsls	r7, r3, #25
 800729a:	bf48      	it	mi
 800729c:	b2ad      	uxthmi	r5, r5
 800729e:	6031      	str	r1, [r6, #0]
 80072a0:	07d9      	lsls	r1, r3, #31
 80072a2:	bf44      	itt	mi
 80072a4:	f043 0320 	orrmi.w	r3, r3, #32
 80072a8:	6023      	strmi	r3, [r4, #0]
 80072aa:	b11d      	cbz	r5, 80072b4 <_printf_i+0x19c>
 80072ac:	2310      	movs	r3, #16
 80072ae:	e7ad      	b.n	800720c <_printf_i+0xf4>
 80072b0:	4826      	ldr	r0, [pc, #152]	@ (800734c <_printf_i+0x234>)
 80072b2:	e7e9      	b.n	8007288 <_printf_i+0x170>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	f023 0320 	bic.w	r3, r3, #32
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	e7f6      	b.n	80072ac <_printf_i+0x194>
 80072be:	4616      	mov	r6, r2
 80072c0:	e7bd      	b.n	800723e <_printf_i+0x126>
 80072c2:	6833      	ldr	r3, [r6, #0]
 80072c4:	6825      	ldr	r5, [r4, #0]
 80072c6:	6961      	ldr	r1, [r4, #20]
 80072c8:	1d18      	adds	r0, r3, #4
 80072ca:	6030      	str	r0, [r6, #0]
 80072cc:	062e      	lsls	r6, r5, #24
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	d501      	bpl.n	80072d6 <_printf_i+0x1be>
 80072d2:	6019      	str	r1, [r3, #0]
 80072d4:	e002      	b.n	80072dc <_printf_i+0x1c4>
 80072d6:	0668      	lsls	r0, r5, #25
 80072d8:	d5fb      	bpl.n	80072d2 <_printf_i+0x1ba>
 80072da:	8019      	strh	r1, [r3, #0]
 80072dc:	2300      	movs	r3, #0
 80072de:	6123      	str	r3, [r4, #16]
 80072e0:	4616      	mov	r6, r2
 80072e2:	e7bc      	b.n	800725e <_printf_i+0x146>
 80072e4:	6833      	ldr	r3, [r6, #0]
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	6032      	str	r2, [r6, #0]
 80072ea:	681e      	ldr	r6, [r3, #0]
 80072ec:	6862      	ldr	r2, [r4, #4]
 80072ee:	2100      	movs	r1, #0
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7f8 ff75 	bl	80001e0 <memchr>
 80072f6:	b108      	cbz	r0, 80072fc <_printf_i+0x1e4>
 80072f8:	1b80      	subs	r0, r0, r6
 80072fa:	6060      	str	r0, [r4, #4]
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	2300      	movs	r3, #0
 8007302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007306:	e7aa      	b.n	800725e <_printf_i+0x146>
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	4632      	mov	r2, r6
 800730c:	4649      	mov	r1, r9
 800730e:	4640      	mov	r0, r8
 8007310:	47d0      	blx	sl
 8007312:	3001      	adds	r0, #1
 8007314:	d0ad      	beq.n	8007272 <_printf_i+0x15a>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	079b      	lsls	r3, r3, #30
 800731a:	d413      	bmi.n	8007344 <_printf_i+0x22c>
 800731c:	68e0      	ldr	r0, [r4, #12]
 800731e:	9b03      	ldr	r3, [sp, #12]
 8007320:	4298      	cmp	r0, r3
 8007322:	bfb8      	it	lt
 8007324:	4618      	movlt	r0, r3
 8007326:	e7a6      	b.n	8007276 <_printf_i+0x15e>
 8007328:	2301      	movs	r3, #1
 800732a:	4632      	mov	r2, r6
 800732c:	4649      	mov	r1, r9
 800732e:	4640      	mov	r0, r8
 8007330:	47d0      	blx	sl
 8007332:	3001      	adds	r0, #1
 8007334:	d09d      	beq.n	8007272 <_printf_i+0x15a>
 8007336:	3501      	adds	r5, #1
 8007338:	68e3      	ldr	r3, [r4, #12]
 800733a:	9903      	ldr	r1, [sp, #12]
 800733c:	1a5b      	subs	r3, r3, r1
 800733e:	42ab      	cmp	r3, r5
 8007340:	dcf2      	bgt.n	8007328 <_printf_i+0x210>
 8007342:	e7eb      	b.n	800731c <_printf_i+0x204>
 8007344:	2500      	movs	r5, #0
 8007346:	f104 0619 	add.w	r6, r4, #25
 800734a:	e7f5      	b.n	8007338 <_printf_i+0x220>
 800734c:	0800753d 	.word	0x0800753d
 8007350:	0800754e 	.word	0x0800754e

08007354 <memmove>:
 8007354:	4288      	cmp	r0, r1
 8007356:	b510      	push	{r4, lr}
 8007358:	eb01 0402 	add.w	r4, r1, r2
 800735c:	d902      	bls.n	8007364 <memmove+0x10>
 800735e:	4284      	cmp	r4, r0
 8007360:	4623      	mov	r3, r4
 8007362:	d807      	bhi.n	8007374 <memmove+0x20>
 8007364:	1e43      	subs	r3, r0, #1
 8007366:	42a1      	cmp	r1, r4
 8007368:	d008      	beq.n	800737c <memmove+0x28>
 800736a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800736e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007372:	e7f8      	b.n	8007366 <memmove+0x12>
 8007374:	4402      	add	r2, r0
 8007376:	4601      	mov	r1, r0
 8007378:	428a      	cmp	r2, r1
 800737a:	d100      	bne.n	800737e <memmove+0x2a>
 800737c:	bd10      	pop	{r4, pc}
 800737e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007386:	e7f7      	b.n	8007378 <memmove+0x24>

08007388 <_realloc_r>:
 8007388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800738c:	4607      	mov	r7, r0
 800738e:	4614      	mov	r4, r2
 8007390:	460d      	mov	r5, r1
 8007392:	b921      	cbnz	r1, 800739e <_realloc_r+0x16>
 8007394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007398:	4611      	mov	r1, r2
 800739a:	f7ff bb4f 	b.w	8006a3c <_malloc_r>
 800739e:	b92a      	cbnz	r2, 80073ac <_realloc_r+0x24>
 80073a0:	f7ff fcaa 	bl	8006cf8 <_free_r>
 80073a4:	4625      	mov	r5, r4
 80073a6:	4628      	mov	r0, r5
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ac:	f000 f81a 	bl	80073e4 <_malloc_usable_size_r>
 80073b0:	4284      	cmp	r4, r0
 80073b2:	4606      	mov	r6, r0
 80073b4:	d802      	bhi.n	80073bc <_realloc_r+0x34>
 80073b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073ba:	d8f4      	bhi.n	80073a6 <_realloc_r+0x1e>
 80073bc:	4621      	mov	r1, r4
 80073be:	4638      	mov	r0, r7
 80073c0:	f7ff fb3c 	bl	8006a3c <_malloc_r>
 80073c4:	4680      	mov	r8, r0
 80073c6:	b908      	cbnz	r0, 80073cc <_realloc_r+0x44>
 80073c8:	4645      	mov	r5, r8
 80073ca:	e7ec      	b.n	80073a6 <_realloc_r+0x1e>
 80073cc:	42b4      	cmp	r4, r6
 80073ce:	4622      	mov	r2, r4
 80073d0:	4629      	mov	r1, r5
 80073d2:	bf28      	it	cs
 80073d4:	4632      	movcs	r2, r6
 80073d6:	f7ff fc81 	bl	8006cdc <memcpy>
 80073da:	4629      	mov	r1, r5
 80073dc:	4638      	mov	r0, r7
 80073de:	f7ff fc8b 	bl	8006cf8 <_free_r>
 80073e2:	e7f1      	b.n	80073c8 <_realloc_r+0x40>

080073e4 <_malloc_usable_size_r>:
 80073e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e8:	1f18      	subs	r0, r3, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bfbc      	itt	lt
 80073ee:	580b      	ldrlt	r3, [r1, r0]
 80073f0:	18c0      	addlt	r0, r0, r3
 80073f2:	4770      	bx	lr

080073f4 <_init>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr

08007400 <_fini>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	bf00      	nop
 8007404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007406:	bc08      	pop	{r3}
 8007408:	469e      	mov	lr, r3
 800740a:	4770      	bx	lr
